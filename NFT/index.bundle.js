/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{var a={711:function(a){a.exports=function(a){function t(n){if(e[n])return e[n].exports;var o=e[n]={exports:{},id:n,loaded:!1};return a[n].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var e={};return t.m=a,t.c=e,t.p="dist/",t(0)}([function(a,t,e){"use strict";function n(a){return a&&a.__esModule?a:{default:a}}var o=Object.assign||function(a){for(var t=1;t<arguments.length;t++){var e=arguments[t];for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(a[n]=e[n])}return a},r=(n(e(1)),e(6)),i=n(r),s=n(e(7)),d=n(e(8)),u=n(e(9)),l=n(e(10)),c=n(e(11)),f=n(e(14)),p=[],y=!1,m={offset:120,delay:0,easing:"ease",duration:400,disable:!1,once:!1,startEvent:"DOMContentLoaded",throttleDelay:99,debounceDelay:50,disableMutationObserver:!1},h=function(){if(arguments.length>0&&void 0!==arguments[0]&&arguments[0]&&(y=!0),y)return p=(0,c.default)(p,m),(0,l.default)(p,m.once),p},A=function(){p=(0,f.default)(),h()};a.exports={init:function(a){m=o(m,a),p=(0,f.default)();var t=document.all&&!window.atob;return function(a){return!0===a||"mobile"===a&&u.default.mobile()||"phone"===a&&u.default.phone()||"tablet"===a&&u.default.tablet()||"function"==typeof a&&!0===a()}(m.disable)||t?void p.forEach((function(a,t){a.node.removeAttribute("data-aos"),a.node.removeAttribute("data-aos-easing"),a.node.removeAttribute("data-aos-duration"),a.node.removeAttribute("data-aos-delay")})):(m.disableMutationObserver||d.default.isSupported()||(console.info('\n      aos: MutationObserver is not supported on this browser,\n      code mutations observing has been disabled.\n      You may have to call "refreshHard()" by yourself.\n    '),m.disableMutationObserver=!0),document.querySelector("body").setAttribute("data-aos-easing",m.easing),document.querySelector("body").setAttribute("data-aos-duration",m.duration),document.querySelector("body").setAttribute("data-aos-delay",m.delay),"DOMContentLoaded"===m.startEvent&&["complete","interactive"].indexOf(document.readyState)>-1?h(!0):"load"===m.startEvent?window.addEventListener(m.startEvent,(function(){h(!0)})):document.addEventListener(m.startEvent,(function(){h(!0)})),window.addEventListener("resize",(0,s.default)(h,m.debounceDelay,!0)),window.addEventListener("orientationchange",(0,s.default)(h,m.debounceDelay,!0)),window.addEventListener("scroll",(0,i.default)((function(){(0,l.default)(p,m.once)}),m.throttleDelay)),m.disableMutationObserver||d.default.ready("[data-aos]",A),p)},refresh:h,refreshHard:A}},function(a,t){},,,,,function(a,t){(function(t){"use strict";function e(a,t,e){function o(t){var e=f,n=p;return f=p=void 0,v=t,m=a.apply(n,e)}function i(a){return v=a,h=setTimeout(u,t),_?o(a):m}function d(a){var e=a-A;return void 0===A||e>=t||e<0||x&&a-v>=y}function u(){var a=C();return d(a)?l(a):void(h=setTimeout(u,function(a){var e=t-(a-A);return x?b(e,y-(a-v)):e}(a)))}function l(a){return h=void 0,w&&f?o(a):(f=p=void 0,m)}function c(){var a=C(),e=d(a);if(f=arguments,p=this,A=a,e){if(void 0===h)return i(A);if(x)return h=setTimeout(u,t),o(A)}return void 0===h&&(h=setTimeout(u,t)),m}var f,p,y,m,h,A,v=0,_=!1,x=!1,w=!0;if("function"!=typeof a)throw new TypeError(s);return t=r(t)||0,n(e)&&(_=!!e.leading,y=(x="maxWait"in e)?g(r(e.maxWait)||0,t):y,w="trailing"in e?!!e.trailing:w),c.cancel=function(){void 0!==h&&clearTimeout(h),v=0,f=A=p=h=void 0},c.flush=function(){return void 0===h?m:l(C())},c}function n(a){var t=void 0===a?"undefined":i(a);return!!a&&("object"==t||"function"==t)}function o(a){return"symbol"==(void 0===a?"undefined":i(a))||function(a){return!!a&&"object"==(void 0===a?"undefined":i(a))}(a)&&v.call(a)==u}function r(a){if("number"==typeof a)return a;if(o(a))return d;if(n(a)){var t="function"==typeof a.valueOf?a.valueOf():a;a=n(t)?t+"":t}if("string"!=typeof a)return 0===a?a:+a;a=a.replace(l,"");var e=f.test(a);return e||p.test(a)?y(a.slice(2),e?2:8):c.test(a)?d:+a}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},s="Expected a function",d=NaN,u="[object Symbol]",l=/^\s+|\s+$/g,c=/^[-+]0x[0-9a-f]+$/i,f=/^0b[01]+$/i,p=/^0o[0-7]+$/i,y=parseInt,m="object"==(void 0===t?"undefined":i(t))&&t&&t.Object===Object&&t,h="object"==("undefined"==typeof self?"undefined":i(self))&&self&&self.Object===Object&&self,A=m||h||Function("return this")(),v=Object.prototype.toString,g=Math.max,b=Math.min,C=function(){return A.Date.now()};a.exports=function(a,t,o){var r=!0,i=!0;if("function"!=typeof a)throw new TypeError(s);return n(o)&&(r="leading"in o?!!o.leading:r,i="trailing"in o?!!o.trailing:i),e(a,t,{leading:r,maxWait:t,trailing:i})}}).call(t,function(){return this}())},function(a,t){(function(t){"use strict";function e(a){var t=void 0===a?"undefined":r(a);return!!a&&("object"==t||"function"==t)}function n(a){return"symbol"==(void 0===a?"undefined":r(a))||function(a){return!!a&&"object"==(void 0===a?"undefined":r(a))}(a)&&A.call(a)==d}function o(a){if("number"==typeof a)return a;if(n(a))return s;if(e(a)){var t="function"==typeof a.valueOf?a.valueOf():a;a=e(t)?t+"":t}if("string"!=typeof a)return 0===a?a:+a;a=a.replace(u,"");var o=c.test(a);return o||f.test(a)?p(a.slice(2),o?2:8):l.test(a)?s:+a}var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},i="Expected a function",s=NaN,d="[object Symbol]",u=/^\s+|\s+$/g,l=/^[-+]0x[0-9a-f]+$/i,c=/^0b[01]+$/i,f=/^0o[0-7]+$/i,p=parseInt,y="object"==(void 0===t?"undefined":r(t))&&t&&t.Object===Object&&t,m="object"==("undefined"==typeof self?"undefined":r(self))&&self&&self.Object===Object&&self,h=y||m||Function("return this")(),A=Object.prototype.toString,v=Math.max,g=Math.min,b=function(){return h.Date.now()};a.exports=function(a,t,n){function r(t){var e=f,n=p;return f=p=void 0,C=t,m=a.apply(n,e)}function s(a){return C=a,h=setTimeout(u,t),_?r(a):m}function d(a){var e=a-A;return void 0===A||e>=t||e<0||x&&a-C>=y}function u(){var a=b();return d(a)?l(a):void(h=setTimeout(u,function(a){var e=t-(a-A);return x?g(e,y-(a-C)):e}(a)))}function l(a){return h=void 0,w&&f?r(a):(f=p=void 0,m)}function c(){var a=b(),e=d(a);if(f=arguments,p=this,A=a,e){if(void 0===h)return s(A);if(x)return h=setTimeout(u,t),r(A)}return void 0===h&&(h=setTimeout(u,t)),m}var f,p,y,m,h,A,C=0,_=!1,x=!1,w=!0;if("function"!=typeof a)throw new TypeError(i);return t=o(t)||0,e(n)&&(_=!!n.leading,y=(x="maxWait"in n)?v(o(n.maxWait)||0,t):y,w="trailing"in n?!!n.trailing:w),c.cancel=function(){void 0!==h&&clearTimeout(h),C=0,f=A=p=h=void 0},c.flush=function(){return void 0===h?m:l(b())},c}}).call(t,function(){return this}())},function(a,t){"use strict";function e(a){var t=void 0,n=void 0;for(t=0;t<a.length;t+=1){if((n=a[t]).dataset&&n.dataset.aos)return!0;if(n.children&&e(n.children))return!0}return!1}function n(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}function o(a){a&&a.forEach((function(a){var t=Array.prototype.slice.call(a.addedNodes),n=Array.prototype.slice.call(a.removedNodes);if(e(t.concat(n)))return r()}))}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){};t.default={isSupported:function(){return!!n()},ready:function(a,t){var e=window.document,i=new(n())(o);r=t,i.observe(e.documentElement,{childList:!0,subtree:!0,removedNodes:!0})}}},function(a,t){"use strict";function e(){return navigator.userAgent||navigator.vendor||window.opera||""}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function a(a,t){for(var e=0;e<t.length;e++){var n=t[e];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(a,n.key,n)}}return function(t,e,n){return e&&a(t.prototype,e),n&&a(t,n),t}}(),o=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,r=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,i=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i,s=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,d=function(){function a(){!function(a,t){if(!(a instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a)}return n(a,[{key:"phone",value:function(){var a=e();return!(!o.test(a)&&!r.test(a.substr(0,4)))}},{key:"mobile",value:function(){var a=e();return!(!i.test(a)&&!s.test(a.substr(0,4)))}},{key:"tablet",value:function(){return this.mobile()&&!this.phone()}}]),a}();t.default=new d},function(a,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(a,t){var e=window.pageYOffset,n=window.innerHeight;a.forEach((function(a,o){!function(a,t,e){var n=a.node.getAttribute("data-aos-once");t>a.position?a.node.classList.add("aos-animate"):void 0!==n&&("false"===n||!e&&"true"!==n)&&a.node.classList.remove("aos-animate")}(a,n+e,t)}))}},function(a,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(a){return a&&a.__esModule?a:{default:a}}(e(12));t.default=function(a,t){return a.forEach((function(a,e){a.node.classList.add("aos-init"),a.position=(0,n.default)(a.node,t.offset)})),a}},function(a,t,e){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(a){return a&&a.__esModule?a:{default:a}}(e(13));t.default=function(a,t){var e=0,o=0,r=window.innerHeight,i={offset:a.getAttribute("data-aos-offset"),anchor:a.getAttribute("data-aos-anchor"),anchorPlacement:a.getAttribute("data-aos-anchor-placement")};switch(i.offset&&!isNaN(i.offset)&&(o=parseInt(i.offset)),i.anchor&&document.querySelectorAll(i.anchor)&&(a=document.querySelectorAll(i.anchor)[0]),e=(0,n.default)(a).top,i.anchorPlacement){case"top-bottom":break;case"center-bottom":e+=a.offsetHeight/2;break;case"bottom-bottom":e+=a.offsetHeight;break;case"top-center":e+=r/2;break;case"bottom-center":e+=r/2+a.offsetHeight;break;case"center-center":e+=r/2+a.offsetHeight/2;break;case"top-top":e+=r;break;case"bottom-top":e+=a.offsetHeight+r;break;case"center-top":e+=a.offsetHeight/2+r}return i.anchorPlacement||i.offset||isNaN(t)||(o=t),e+o}},function(a,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(a){for(var t=0,e=0;a&&!isNaN(a.offsetLeft)&&!isNaN(a.offsetTop);)t+=a.offsetLeft-("BODY"!=a.tagName?a.scrollLeft:0),e+=a.offsetTop-("BODY"!=a.tagName?a.scrollTop:0),a=a.offsetParent;return{top:e,left:t}}},function(a,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(a){return a=a||document.querySelectorAll("[data-aos]"),Array.prototype.map.call(a,(function(a){return{node:a}}))}}])},659:(a,t,e)=>{"use strict";e.d(t,{Z:()=>s});var n=e(537),o=e.n(n),r=e(645),i=e.n(r)()(o());i.push([a.id,'[data-aos][data-aos][data-aos-duration="50"],body[data-aos-duration="50"] [data-aos]{transition-duration:50ms}[data-aos][data-aos][data-aos-delay="50"],body[data-aos-delay="50"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="50"].aos-animate,body[data-aos-delay="50"] [data-aos].aos-animate{transition-delay:50ms}[data-aos][data-aos][data-aos-duration="100"],body[data-aos-duration="100"] [data-aos]{transition-duration:.1s}[data-aos][data-aos][data-aos-delay="100"],body[data-aos-delay="100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="100"].aos-animate,body[data-aos-delay="100"] [data-aos].aos-animate{transition-delay:.1s}[data-aos][data-aos][data-aos-duration="150"],body[data-aos-duration="150"] [data-aos]{transition-duration:.15s}[data-aos][data-aos][data-aos-delay="150"],body[data-aos-delay="150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="150"].aos-animate,body[data-aos-delay="150"] [data-aos].aos-animate{transition-delay:.15s}[data-aos][data-aos][data-aos-duration="200"],body[data-aos-duration="200"] [data-aos]{transition-duration:.2s}[data-aos][data-aos][data-aos-delay="200"],body[data-aos-delay="200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="200"].aos-animate,body[data-aos-delay="200"] [data-aos].aos-animate{transition-delay:.2s}[data-aos][data-aos][data-aos-duration="250"],body[data-aos-duration="250"] [data-aos]{transition-duration:.25s}[data-aos][data-aos][data-aos-delay="250"],body[data-aos-delay="250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="250"].aos-animate,body[data-aos-delay="250"] [data-aos].aos-animate{transition-delay:.25s}[data-aos][data-aos][data-aos-duration="300"],body[data-aos-duration="300"] [data-aos]{transition-duration:.3s}[data-aos][data-aos][data-aos-delay="300"],body[data-aos-delay="300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="300"].aos-animate,body[data-aos-delay="300"] [data-aos].aos-animate{transition-delay:.3s}[data-aos][data-aos][data-aos-duration="350"],body[data-aos-duration="350"] [data-aos]{transition-duration:.35s}[data-aos][data-aos][data-aos-delay="350"],body[data-aos-delay="350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="350"].aos-animate,body[data-aos-delay="350"] [data-aos].aos-animate{transition-delay:.35s}[data-aos][data-aos][data-aos-duration="400"],body[data-aos-duration="400"] [data-aos]{transition-duration:.4s}[data-aos][data-aos][data-aos-delay="400"],body[data-aos-delay="400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="400"].aos-animate,body[data-aos-delay="400"] [data-aos].aos-animate{transition-delay:.4s}[data-aos][data-aos][data-aos-duration="450"],body[data-aos-duration="450"] [data-aos]{transition-duration:.45s}[data-aos][data-aos][data-aos-delay="450"],body[data-aos-delay="450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="450"].aos-animate,body[data-aos-delay="450"] [data-aos].aos-animate{transition-delay:.45s}[data-aos][data-aos][data-aos-duration="500"],body[data-aos-duration="500"] [data-aos]{transition-duration:.5s}[data-aos][data-aos][data-aos-delay="500"],body[data-aos-delay="500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="500"].aos-animate,body[data-aos-delay="500"] [data-aos].aos-animate{transition-delay:.5s}[data-aos][data-aos][data-aos-duration="550"],body[data-aos-duration="550"] [data-aos]{transition-duration:.55s}[data-aos][data-aos][data-aos-delay="550"],body[data-aos-delay="550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="550"].aos-animate,body[data-aos-delay="550"] [data-aos].aos-animate{transition-delay:.55s}[data-aos][data-aos][data-aos-duration="600"],body[data-aos-duration="600"] [data-aos]{transition-duration:.6s}[data-aos][data-aos][data-aos-delay="600"],body[data-aos-delay="600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="600"].aos-animate,body[data-aos-delay="600"] [data-aos].aos-animate{transition-delay:.6s}[data-aos][data-aos][data-aos-duration="650"],body[data-aos-duration="650"] [data-aos]{transition-duration:.65s}[data-aos][data-aos][data-aos-delay="650"],body[data-aos-delay="650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="650"].aos-animate,body[data-aos-delay="650"] [data-aos].aos-animate{transition-delay:.65s}[data-aos][data-aos][data-aos-duration="700"],body[data-aos-duration="700"] [data-aos]{transition-duration:.7s}[data-aos][data-aos][data-aos-delay="700"],body[data-aos-delay="700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="700"].aos-animate,body[data-aos-delay="700"] [data-aos].aos-animate{transition-delay:.7s}[data-aos][data-aos][data-aos-duration="750"],body[data-aos-duration="750"] [data-aos]{transition-duration:.75s}[data-aos][data-aos][data-aos-delay="750"],body[data-aos-delay="750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="750"].aos-animate,body[data-aos-delay="750"] [data-aos].aos-animate{transition-delay:.75s}[data-aos][data-aos][data-aos-duration="800"],body[data-aos-duration="800"] [data-aos]{transition-duration:.8s}[data-aos][data-aos][data-aos-delay="800"],body[data-aos-delay="800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="800"].aos-animate,body[data-aos-delay="800"] [data-aos].aos-animate{transition-delay:.8s}[data-aos][data-aos][data-aos-duration="850"],body[data-aos-duration="850"] [data-aos]{transition-duration:.85s}[data-aos][data-aos][data-aos-delay="850"],body[data-aos-delay="850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="850"].aos-animate,body[data-aos-delay="850"] [data-aos].aos-animate{transition-delay:.85s}[data-aos][data-aos][data-aos-duration="900"],body[data-aos-duration="900"] [data-aos]{transition-duration:.9s}[data-aos][data-aos][data-aos-delay="900"],body[data-aos-delay="900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="900"].aos-animate,body[data-aos-delay="900"] [data-aos].aos-animate{transition-delay:.9s}[data-aos][data-aos][data-aos-duration="950"],body[data-aos-duration="950"] [data-aos]{transition-duration:.95s}[data-aos][data-aos][data-aos-delay="950"],body[data-aos-delay="950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="950"].aos-animate,body[data-aos-delay="950"] [data-aos].aos-animate{transition-delay:.95s}[data-aos][data-aos][data-aos-duration="1000"],body[data-aos-duration="1000"] [data-aos]{transition-duration:1s}[data-aos][data-aos][data-aos-delay="1000"],body[data-aos-delay="1000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1000"].aos-animate,body[data-aos-delay="1000"] [data-aos].aos-animate{transition-delay:1s}[data-aos][data-aos][data-aos-duration="1050"],body[data-aos-duration="1050"] [data-aos]{transition-duration:1.05s}[data-aos][data-aos][data-aos-delay="1050"],body[data-aos-delay="1050"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1050"].aos-animate,body[data-aos-delay="1050"] [data-aos].aos-animate{transition-delay:1.05s}[data-aos][data-aos][data-aos-duration="1100"],body[data-aos-duration="1100"] [data-aos]{transition-duration:1.1s}[data-aos][data-aos][data-aos-delay="1100"],body[data-aos-delay="1100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1100"].aos-animate,body[data-aos-delay="1100"] [data-aos].aos-animate{transition-delay:1.1s}[data-aos][data-aos][data-aos-duration="1150"],body[data-aos-duration="1150"] [data-aos]{transition-duration:1.15s}[data-aos][data-aos][data-aos-delay="1150"],body[data-aos-delay="1150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1150"].aos-animate,body[data-aos-delay="1150"] [data-aos].aos-animate{transition-delay:1.15s}[data-aos][data-aos][data-aos-duration="1200"],body[data-aos-duration="1200"] [data-aos]{transition-duration:1.2s}[data-aos][data-aos][data-aos-delay="1200"],body[data-aos-delay="1200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1200"].aos-animate,body[data-aos-delay="1200"] [data-aos].aos-animate{transition-delay:1.2s}[data-aos][data-aos][data-aos-duration="1250"],body[data-aos-duration="1250"] [data-aos]{transition-duration:1.25s}[data-aos][data-aos][data-aos-delay="1250"],body[data-aos-delay="1250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1250"].aos-animate,body[data-aos-delay="1250"] [data-aos].aos-animate{transition-delay:1.25s}[data-aos][data-aos][data-aos-duration="1300"],body[data-aos-duration="1300"] [data-aos]{transition-duration:1.3s}[data-aos][data-aos][data-aos-delay="1300"],body[data-aos-delay="1300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1300"].aos-animate,body[data-aos-delay="1300"] [data-aos].aos-animate{transition-delay:1.3s}[data-aos][data-aos][data-aos-duration="1350"],body[data-aos-duration="1350"] [data-aos]{transition-duration:1.35s}[data-aos][data-aos][data-aos-delay="1350"],body[data-aos-delay="1350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1350"].aos-animate,body[data-aos-delay="1350"] [data-aos].aos-animate{transition-delay:1.35s}[data-aos][data-aos][data-aos-duration="1400"],body[data-aos-duration="1400"] [data-aos]{transition-duration:1.4s}[data-aos][data-aos][data-aos-delay="1400"],body[data-aos-delay="1400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1400"].aos-animate,body[data-aos-delay="1400"] [data-aos].aos-animate{transition-delay:1.4s}[data-aos][data-aos][data-aos-duration="1450"],body[data-aos-duration="1450"] [data-aos]{transition-duration:1.45s}[data-aos][data-aos][data-aos-delay="1450"],body[data-aos-delay="1450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1450"].aos-animate,body[data-aos-delay="1450"] [data-aos].aos-animate{transition-delay:1.45s}[data-aos][data-aos][data-aos-duration="1500"],body[data-aos-duration="1500"] [data-aos]{transition-duration:1.5s}[data-aos][data-aos][data-aos-delay="1500"],body[data-aos-delay="1500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1500"].aos-animate,body[data-aos-delay="1500"] [data-aos].aos-animate{transition-delay:1.5s}[data-aos][data-aos][data-aos-duration="1550"],body[data-aos-duration="1550"] [data-aos]{transition-duration:1.55s}[data-aos][data-aos][data-aos-delay="1550"],body[data-aos-delay="1550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1550"].aos-animate,body[data-aos-delay="1550"] [data-aos].aos-animate{transition-delay:1.55s}[data-aos][data-aos][data-aos-duration="1600"],body[data-aos-duration="1600"] [data-aos]{transition-duration:1.6s}[data-aos][data-aos][data-aos-delay="1600"],body[data-aos-delay="1600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1600"].aos-animate,body[data-aos-delay="1600"] [data-aos].aos-animate{transition-delay:1.6s}[data-aos][data-aos][data-aos-duration="1650"],body[data-aos-duration="1650"] [data-aos]{transition-duration:1.65s}[data-aos][data-aos][data-aos-delay="1650"],body[data-aos-delay="1650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1650"].aos-animate,body[data-aos-delay="1650"] [data-aos].aos-animate{transition-delay:1.65s}[data-aos][data-aos][data-aos-duration="1700"],body[data-aos-duration="1700"] [data-aos]{transition-duration:1.7s}[data-aos][data-aos][data-aos-delay="1700"],body[data-aos-delay="1700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1700"].aos-animate,body[data-aos-delay="1700"] [data-aos].aos-animate{transition-delay:1.7s}[data-aos][data-aos][data-aos-duration="1750"],body[data-aos-duration="1750"] [data-aos]{transition-duration:1.75s}[data-aos][data-aos][data-aos-delay="1750"],body[data-aos-delay="1750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1750"].aos-animate,body[data-aos-delay="1750"] [data-aos].aos-animate{transition-delay:1.75s}[data-aos][data-aos][data-aos-duration="1800"],body[data-aos-duration="1800"] [data-aos]{transition-duration:1.8s}[data-aos][data-aos][data-aos-delay="1800"],body[data-aos-delay="1800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1800"].aos-animate,body[data-aos-delay="1800"] [data-aos].aos-animate{transition-delay:1.8s}[data-aos][data-aos][data-aos-duration="1850"],body[data-aos-duration="1850"] [data-aos]{transition-duration:1.85s}[data-aos][data-aos][data-aos-delay="1850"],body[data-aos-delay="1850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1850"].aos-animate,body[data-aos-delay="1850"] [data-aos].aos-animate{transition-delay:1.85s}[data-aos][data-aos][data-aos-duration="1900"],body[data-aos-duration="1900"] [data-aos]{transition-duration:1.9s}[data-aos][data-aos][data-aos-delay="1900"],body[data-aos-delay="1900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1900"].aos-animate,body[data-aos-delay="1900"] [data-aos].aos-animate{transition-delay:1.9s}[data-aos][data-aos][data-aos-duration="1950"],body[data-aos-duration="1950"] [data-aos]{transition-duration:1.95s}[data-aos][data-aos][data-aos-delay="1950"],body[data-aos-delay="1950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1950"].aos-animate,body[data-aos-delay="1950"] [data-aos].aos-animate{transition-delay:1.95s}[data-aos][data-aos][data-aos-duration="2000"],body[data-aos-duration="2000"] [data-aos]{transition-duration:2s}[data-aos][data-aos][data-aos-delay="2000"],body[data-aos-delay="2000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2000"].aos-animate,body[data-aos-delay="2000"] [data-aos].aos-animate{transition-delay:2s}[data-aos][data-aos][data-aos-duration="2050"],body[data-aos-duration="2050"] [data-aos]{transition-duration:2.05s}[data-aos][data-aos][data-aos-delay="2050"],body[data-aos-delay="2050"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2050"].aos-animate,body[data-aos-delay="2050"] [data-aos].aos-animate{transition-delay:2.05s}[data-aos][data-aos][data-aos-duration="2100"],body[data-aos-duration="2100"] [data-aos]{transition-duration:2.1s}[data-aos][data-aos][data-aos-delay="2100"],body[data-aos-delay="2100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2100"].aos-animate,body[data-aos-delay="2100"] [data-aos].aos-animate{transition-delay:2.1s}[data-aos][data-aos][data-aos-duration="2150"],body[data-aos-duration="2150"] [data-aos]{transition-duration:2.15s}[data-aos][data-aos][data-aos-delay="2150"],body[data-aos-delay="2150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2150"].aos-animate,body[data-aos-delay="2150"] [data-aos].aos-animate{transition-delay:2.15s}[data-aos][data-aos][data-aos-duration="2200"],body[data-aos-duration="2200"] [data-aos]{transition-duration:2.2s}[data-aos][data-aos][data-aos-delay="2200"],body[data-aos-delay="2200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2200"].aos-animate,body[data-aos-delay="2200"] [data-aos].aos-animate{transition-delay:2.2s}[data-aos][data-aos][data-aos-duration="2250"],body[data-aos-duration="2250"] [data-aos]{transition-duration:2.25s}[data-aos][data-aos][data-aos-delay="2250"],body[data-aos-delay="2250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2250"].aos-animate,body[data-aos-delay="2250"] [data-aos].aos-animate{transition-delay:2.25s}[data-aos][data-aos][data-aos-duration="2300"],body[data-aos-duration="2300"] [data-aos]{transition-duration:2.3s}[data-aos][data-aos][data-aos-delay="2300"],body[data-aos-delay="2300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2300"].aos-animate,body[data-aos-delay="2300"] [data-aos].aos-animate{transition-delay:2.3s}[data-aos][data-aos][data-aos-duration="2350"],body[data-aos-duration="2350"] [data-aos]{transition-duration:2.35s}[data-aos][data-aos][data-aos-delay="2350"],body[data-aos-delay="2350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2350"].aos-animate,body[data-aos-delay="2350"] [data-aos].aos-animate{transition-delay:2.35s}[data-aos][data-aos][data-aos-duration="2400"],body[data-aos-duration="2400"] [data-aos]{transition-duration:2.4s}[data-aos][data-aos][data-aos-delay="2400"],body[data-aos-delay="2400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2400"].aos-animate,body[data-aos-delay="2400"] [data-aos].aos-animate{transition-delay:2.4s}[data-aos][data-aos][data-aos-duration="2450"],body[data-aos-duration="2450"] [data-aos]{transition-duration:2.45s}[data-aos][data-aos][data-aos-delay="2450"],body[data-aos-delay="2450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2450"].aos-animate,body[data-aos-delay="2450"] [data-aos].aos-animate{transition-delay:2.45s}[data-aos][data-aos][data-aos-duration="2500"],body[data-aos-duration="2500"] [data-aos]{transition-duration:2.5s}[data-aos][data-aos][data-aos-delay="2500"],body[data-aos-delay="2500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2500"].aos-animate,body[data-aos-delay="2500"] [data-aos].aos-animate{transition-delay:2.5s}[data-aos][data-aos][data-aos-duration="2550"],body[data-aos-duration="2550"] [data-aos]{transition-duration:2.55s}[data-aos][data-aos][data-aos-delay="2550"],body[data-aos-delay="2550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2550"].aos-animate,body[data-aos-delay="2550"] [data-aos].aos-animate{transition-delay:2.55s}[data-aos][data-aos][data-aos-duration="2600"],body[data-aos-duration="2600"] [data-aos]{transition-duration:2.6s}[data-aos][data-aos][data-aos-delay="2600"],body[data-aos-delay="2600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2600"].aos-animate,body[data-aos-delay="2600"] [data-aos].aos-animate{transition-delay:2.6s}[data-aos][data-aos][data-aos-duration="2650"],body[data-aos-duration="2650"] [data-aos]{transition-duration:2.65s}[data-aos][data-aos][data-aos-delay="2650"],body[data-aos-delay="2650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2650"].aos-animate,body[data-aos-delay="2650"] [data-aos].aos-animate{transition-delay:2.65s}[data-aos][data-aos][data-aos-duration="2700"],body[data-aos-duration="2700"] [data-aos]{transition-duration:2.7s}[data-aos][data-aos][data-aos-delay="2700"],body[data-aos-delay="2700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2700"].aos-animate,body[data-aos-delay="2700"] [data-aos].aos-animate{transition-delay:2.7s}[data-aos][data-aos][data-aos-duration="2750"],body[data-aos-duration="2750"] [data-aos]{transition-duration:2.75s}[data-aos][data-aos][data-aos-delay="2750"],body[data-aos-delay="2750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2750"].aos-animate,body[data-aos-delay="2750"] [data-aos].aos-animate{transition-delay:2.75s}[data-aos][data-aos][data-aos-duration="2800"],body[data-aos-duration="2800"] [data-aos]{transition-duration:2.8s}[data-aos][data-aos][data-aos-delay="2800"],body[data-aos-delay="2800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2800"].aos-animate,body[data-aos-delay="2800"] [data-aos].aos-animate{transition-delay:2.8s}[data-aos][data-aos][data-aos-duration="2850"],body[data-aos-duration="2850"] [data-aos]{transition-duration:2.85s}[data-aos][data-aos][data-aos-delay="2850"],body[data-aos-delay="2850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2850"].aos-animate,body[data-aos-delay="2850"] [data-aos].aos-animate{transition-delay:2.85s}[data-aos][data-aos][data-aos-duration="2900"],body[data-aos-duration="2900"] [data-aos]{transition-duration:2.9s}[data-aos][data-aos][data-aos-delay="2900"],body[data-aos-delay="2900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2900"].aos-animate,body[data-aos-delay="2900"] [data-aos].aos-animate{transition-delay:2.9s}[data-aos][data-aos][data-aos-duration="2950"],body[data-aos-duration="2950"] [data-aos]{transition-duration:2.95s}[data-aos][data-aos][data-aos-delay="2950"],body[data-aos-delay="2950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2950"].aos-animate,body[data-aos-delay="2950"] [data-aos].aos-animate{transition-delay:2.95s}[data-aos][data-aos][data-aos-duration="3000"],body[data-aos-duration="3000"] [data-aos]{transition-duration:3s}[data-aos][data-aos][data-aos-delay="3000"],body[data-aos-delay="3000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="3000"].aos-animate,body[data-aos-delay="3000"] [data-aos].aos-animate{transition-delay:3s}[data-aos][data-aos][data-aos-easing=linear],body[data-aos-easing=linear] [data-aos]{transition-timing-function:cubic-bezier(.25,.25,.75,.75)}[data-aos][data-aos][data-aos-easing=ease],body[data-aos-easing=ease] [data-aos]{transition-timing-function:ease}[data-aos][data-aos][data-aos-easing=ease-in],body[data-aos-easing=ease-in] [data-aos]{transition-timing-function:ease-in}[data-aos][data-aos][data-aos-easing=ease-out],body[data-aos-easing=ease-out] [data-aos]{transition-timing-function:ease-out}[data-aos][data-aos][data-aos-easing=ease-in-out],body[data-aos-easing=ease-in-out] [data-aos]{transition-timing-function:ease-in-out}[data-aos][data-aos][data-aos-easing=ease-in-back],body[data-aos-easing=ease-in-back] [data-aos]{transition-timing-function:cubic-bezier(.6,-.28,.735,.045)}[data-aos][data-aos][data-aos-easing=ease-out-back],body[data-aos-easing=ease-out-back] [data-aos]{transition-timing-function:cubic-bezier(.175,.885,.32,1.275)}[data-aos][data-aos][data-aos-easing=ease-in-out-back],body[data-aos-easing=ease-in-out-back] [data-aos]{transition-timing-function:cubic-bezier(.68,-.55,.265,1.55)}[data-aos][data-aos][data-aos-easing=ease-in-sine],body[data-aos-easing=ease-in-sine] [data-aos]{transition-timing-function:cubic-bezier(.47,0,.745,.715)}[data-aos][data-aos][data-aos-easing=ease-out-sine],body[data-aos-easing=ease-out-sine] [data-aos]{transition-timing-function:cubic-bezier(.39,.575,.565,1)}[data-aos][data-aos][data-aos-easing=ease-in-out-sine],body[data-aos-easing=ease-in-out-sine] [data-aos]{transition-timing-function:cubic-bezier(.445,.05,.55,.95)}[data-aos][data-aos][data-aos-easing=ease-in-quad],body[data-aos-easing=ease-in-quad] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-quad],body[data-aos-easing=ease-out-quad] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-quad],body[data-aos-easing=ease-in-out-quad] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos][data-aos][data-aos-easing=ease-in-cubic],body[data-aos-easing=ease-in-cubic] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-cubic],body[data-aos-easing=ease-out-cubic] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-cubic],body[data-aos-easing=ease-in-out-cubic] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos][data-aos][data-aos-easing=ease-in-quart],body[data-aos-easing=ease-in-quart] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-quart],body[data-aos-easing=ease-out-quart] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-quart],body[data-aos-easing=ease-in-out-quart] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos^=fade][data-aos^=fade]{opacity:0;transition-property:opacity,transform}[data-aos^=fade][data-aos^=fade].aos-animate{opacity:1;transform:translateZ(0)}[data-aos=fade-up]{transform:translate3d(0,100px,0)}[data-aos=fade-down]{transform:translate3d(0,-100px,0)}[data-aos=fade-right]{transform:translate3d(-100px,0,0)}[data-aos=fade-left]{transform:translate3d(100px,0,0)}[data-aos=fade-up-right]{transform:translate3d(-100px,100px,0)}[data-aos=fade-up-left]{transform:translate3d(100px,100px,0)}[data-aos=fade-down-right]{transform:translate3d(-100px,-100px,0)}[data-aos=fade-down-left]{transform:translate3d(100px,-100px,0)}[data-aos^=zoom][data-aos^=zoom]{opacity:0;transition-property:opacity,transform}[data-aos^=zoom][data-aos^=zoom].aos-animate{opacity:1;transform:translateZ(0) scale(1)}[data-aos=zoom-in]{transform:scale(.6)}[data-aos=zoom-in-up]{transform:translate3d(0,100px,0) scale(.6)}[data-aos=zoom-in-down]{transform:translate3d(0,-100px,0) scale(.6)}[data-aos=zoom-in-right]{transform:translate3d(-100px,0,0) scale(.6)}[data-aos=zoom-in-left]{transform:translate3d(100px,0,0) scale(.6)}[data-aos=zoom-out]{transform:scale(1.2)}[data-aos=zoom-out-up]{transform:translate3d(0,100px,0) scale(1.2)}[data-aos=zoom-out-down]{transform:translate3d(0,-100px,0) scale(1.2)}[data-aos=zoom-out-right]{transform:translate3d(-100px,0,0) scale(1.2)}[data-aos=zoom-out-left]{transform:translate3d(100px,0,0) scale(1.2)}[data-aos^=slide][data-aos^=slide]{transition-property:transform}[data-aos^=slide][data-aos^=slide].aos-animate{transform:translateZ(0)}[data-aos=slide-up]{transform:translate3d(0,100%,0)}[data-aos=slide-down]{transform:translate3d(0,-100%,0)}[data-aos=slide-right]{transform:translate3d(-100%,0,0)}[data-aos=slide-left]{transform:translate3d(100%,0,0)}[data-aos^=flip][data-aos^=flip]{backface-visibility:hidden;transition-property:transform}[data-aos=flip-left]{transform:perspective(2500px) rotateY(-100deg)}[data-aos=flip-left].aos-animate{transform:perspective(2500px) rotateY(0)}[data-aos=flip-right]{transform:perspective(2500px) rotateY(100deg)}[data-aos=flip-right].aos-animate{transform:perspective(2500px) rotateY(0)}[data-aos=flip-up]{transform:perspective(2500px) rotateX(-100deg)}[data-aos=flip-up].aos-animate{transform:perspective(2500px) rotateX(0)}[data-aos=flip-down]{transform:perspective(2500px) rotateX(100deg)}[data-aos=flip-down].aos-animate{transform:perspective(2500px) rotateX(0)}',"",{version:3,sources:["webpack://./node_modules/aos/dist/aos.css"],names:[],mappings:"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",sourcesContent:['[data-aos][data-aos][data-aos-duration="50"],body[data-aos-duration="50"] [data-aos]{transition-duration:50ms}[data-aos][data-aos][data-aos-delay="50"],body[data-aos-delay="50"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="50"].aos-animate,body[data-aos-delay="50"] [data-aos].aos-animate{transition-delay:50ms}[data-aos][data-aos][data-aos-duration="100"],body[data-aos-duration="100"] [data-aos]{transition-duration:.1s}[data-aos][data-aos][data-aos-delay="100"],body[data-aos-delay="100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="100"].aos-animate,body[data-aos-delay="100"] [data-aos].aos-animate{transition-delay:.1s}[data-aos][data-aos][data-aos-duration="150"],body[data-aos-duration="150"] [data-aos]{transition-duration:.15s}[data-aos][data-aos][data-aos-delay="150"],body[data-aos-delay="150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="150"].aos-animate,body[data-aos-delay="150"] [data-aos].aos-animate{transition-delay:.15s}[data-aos][data-aos][data-aos-duration="200"],body[data-aos-duration="200"] [data-aos]{transition-duration:.2s}[data-aos][data-aos][data-aos-delay="200"],body[data-aos-delay="200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="200"].aos-animate,body[data-aos-delay="200"] [data-aos].aos-animate{transition-delay:.2s}[data-aos][data-aos][data-aos-duration="250"],body[data-aos-duration="250"] [data-aos]{transition-duration:.25s}[data-aos][data-aos][data-aos-delay="250"],body[data-aos-delay="250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="250"].aos-animate,body[data-aos-delay="250"] [data-aos].aos-animate{transition-delay:.25s}[data-aos][data-aos][data-aos-duration="300"],body[data-aos-duration="300"] [data-aos]{transition-duration:.3s}[data-aos][data-aos][data-aos-delay="300"],body[data-aos-delay="300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="300"].aos-animate,body[data-aos-delay="300"] [data-aos].aos-animate{transition-delay:.3s}[data-aos][data-aos][data-aos-duration="350"],body[data-aos-duration="350"] [data-aos]{transition-duration:.35s}[data-aos][data-aos][data-aos-delay="350"],body[data-aos-delay="350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="350"].aos-animate,body[data-aos-delay="350"] [data-aos].aos-animate{transition-delay:.35s}[data-aos][data-aos][data-aos-duration="400"],body[data-aos-duration="400"] [data-aos]{transition-duration:.4s}[data-aos][data-aos][data-aos-delay="400"],body[data-aos-delay="400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="400"].aos-animate,body[data-aos-delay="400"] [data-aos].aos-animate{transition-delay:.4s}[data-aos][data-aos][data-aos-duration="450"],body[data-aos-duration="450"] [data-aos]{transition-duration:.45s}[data-aos][data-aos][data-aos-delay="450"],body[data-aos-delay="450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="450"].aos-animate,body[data-aos-delay="450"] [data-aos].aos-animate{transition-delay:.45s}[data-aos][data-aos][data-aos-duration="500"],body[data-aos-duration="500"] [data-aos]{transition-duration:.5s}[data-aos][data-aos][data-aos-delay="500"],body[data-aos-delay="500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="500"].aos-animate,body[data-aos-delay="500"] [data-aos].aos-animate{transition-delay:.5s}[data-aos][data-aos][data-aos-duration="550"],body[data-aos-duration="550"] [data-aos]{transition-duration:.55s}[data-aos][data-aos][data-aos-delay="550"],body[data-aos-delay="550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="550"].aos-animate,body[data-aos-delay="550"] [data-aos].aos-animate{transition-delay:.55s}[data-aos][data-aos][data-aos-duration="600"],body[data-aos-duration="600"] [data-aos]{transition-duration:.6s}[data-aos][data-aos][data-aos-delay="600"],body[data-aos-delay="600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="600"].aos-animate,body[data-aos-delay="600"] [data-aos].aos-animate{transition-delay:.6s}[data-aos][data-aos][data-aos-duration="650"],body[data-aos-duration="650"] [data-aos]{transition-duration:.65s}[data-aos][data-aos][data-aos-delay="650"],body[data-aos-delay="650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="650"].aos-animate,body[data-aos-delay="650"] [data-aos].aos-animate{transition-delay:.65s}[data-aos][data-aos][data-aos-duration="700"],body[data-aos-duration="700"] [data-aos]{transition-duration:.7s}[data-aos][data-aos][data-aos-delay="700"],body[data-aos-delay="700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="700"].aos-animate,body[data-aos-delay="700"] [data-aos].aos-animate{transition-delay:.7s}[data-aos][data-aos][data-aos-duration="750"],body[data-aos-duration="750"] [data-aos]{transition-duration:.75s}[data-aos][data-aos][data-aos-delay="750"],body[data-aos-delay="750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="750"].aos-animate,body[data-aos-delay="750"] [data-aos].aos-animate{transition-delay:.75s}[data-aos][data-aos][data-aos-duration="800"],body[data-aos-duration="800"] [data-aos]{transition-duration:.8s}[data-aos][data-aos][data-aos-delay="800"],body[data-aos-delay="800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="800"].aos-animate,body[data-aos-delay="800"] [data-aos].aos-animate{transition-delay:.8s}[data-aos][data-aos][data-aos-duration="850"],body[data-aos-duration="850"] [data-aos]{transition-duration:.85s}[data-aos][data-aos][data-aos-delay="850"],body[data-aos-delay="850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="850"].aos-animate,body[data-aos-delay="850"] [data-aos].aos-animate{transition-delay:.85s}[data-aos][data-aos][data-aos-duration="900"],body[data-aos-duration="900"] [data-aos]{transition-duration:.9s}[data-aos][data-aos][data-aos-delay="900"],body[data-aos-delay="900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="900"].aos-animate,body[data-aos-delay="900"] [data-aos].aos-animate{transition-delay:.9s}[data-aos][data-aos][data-aos-duration="950"],body[data-aos-duration="950"] [data-aos]{transition-duration:.95s}[data-aos][data-aos][data-aos-delay="950"],body[data-aos-delay="950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="950"].aos-animate,body[data-aos-delay="950"] [data-aos].aos-animate{transition-delay:.95s}[data-aos][data-aos][data-aos-duration="1000"],body[data-aos-duration="1000"] [data-aos]{transition-duration:1s}[data-aos][data-aos][data-aos-delay="1000"],body[data-aos-delay="1000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1000"].aos-animate,body[data-aos-delay="1000"] [data-aos].aos-animate{transition-delay:1s}[data-aos][data-aos][data-aos-duration="1050"],body[data-aos-duration="1050"] [data-aos]{transition-duration:1.05s}[data-aos][data-aos][data-aos-delay="1050"],body[data-aos-delay="1050"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1050"].aos-animate,body[data-aos-delay="1050"] [data-aos].aos-animate{transition-delay:1.05s}[data-aos][data-aos][data-aos-duration="1100"],body[data-aos-duration="1100"] [data-aos]{transition-duration:1.1s}[data-aos][data-aos][data-aos-delay="1100"],body[data-aos-delay="1100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1100"].aos-animate,body[data-aos-delay="1100"] [data-aos].aos-animate{transition-delay:1.1s}[data-aos][data-aos][data-aos-duration="1150"],body[data-aos-duration="1150"] [data-aos]{transition-duration:1.15s}[data-aos][data-aos][data-aos-delay="1150"],body[data-aos-delay="1150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1150"].aos-animate,body[data-aos-delay="1150"] [data-aos].aos-animate{transition-delay:1.15s}[data-aos][data-aos][data-aos-duration="1200"],body[data-aos-duration="1200"] [data-aos]{transition-duration:1.2s}[data-aos][data-aos][data-aos-delay="1200"],body[data-aos-delay="1200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1200"].aos-animate,body[data-aos-delay="1200"] [data-aos].aos-animate{transition-delay:1.2s}[data-aos][data-aos][data-aos-duration="1250"],body[data-aos-duration="1250"] [data-aos]{transition-duration:1.25s}[data-aos][data-aos][data-aos-delay="1250"],body[data-aos-delay="1250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1250"].aos-animate,body[data-aos-delay="1250"] [data-aos].aos-animate{transition-delay:1.25s}[data-aos][data-aos][data-aos-duration="1300"],body[data-aos-duration="1300"] [data-aos]{transition-duration:1.3s}[data-aos][data-aos][data-aos-delay="1300"],body[data-aos-delay="1300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1300"].aos-animate,body[data-aos-delay="1300"] [data-aos].aos-animate{transition-delay:1.3s}[data-aos][data-aos][data-aos-duration="1350"],body[data-aos-duration="1350"] [data-aos]{transition-duration:1.35s}[data-aos][data-aos][data-aos-delay="1350"],body[data-aos-delay="1350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1350"].aos-animate,body[data-aos-delay="1350"] [data-aos].aos-animate{transition-delay:1.35s}[data-aos][data-aos][data-aos-duration="1400"],body[data-aos-duration="1400"] [data-aos]{transition-duration:1.4s}[data-aos][data-aos][data-aos-delay="1400"],body[data-aos-delay="1400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1400"].aos-animate,body[data-aos-delay="1400"] [data-aos].aos-animate{transition-delay:1.4s}[data-aos][data-aos][data-aos-duration="1450"],body[data-aos-duration="1450"] [data-aos]{transition-duration:1.45s}[data-aos][data-aos][data-aos-delay="1450"],body[data-aos-delay="1450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1450"].aos-animate,body[data-aos-delay="1450"] [data-aos].aos-animate{transition-delay:1.45s}[data-aos][data-aos][data-aos-duration="1500"],body[data-aos-duration="1500"] [data-aos]{transition-duration:1.5s}[data-aos][data-aos][data-aos-delay="1500"],body[data-aos-delay="1500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1500"].aos-animate,body[data-aos-delay="1500"] [data-aos].aos-animate{transition-delay:1.5s}[data-aos][data-aos][data-aos-duration="1550"],body[data-aos-duration="1550"] [data-aos]{transition-duration:1.55s}[data-aos][data-aos][data-aos-delay="1550"],body[data-aos-delay="1550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1550"].aos-animate,body[data-aos-delay="1550"] [data-aos].aos-animate{transition-delay:1.55s}[data-aos][data-aos][data-aos-duration="1600"],body[data-aos-duration="1600"] [data-aos]{transition-duration:1.6s}[data-aos][data-aos][data-aos-delay="1600"],body[data-aos-delay="1600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1600"].aos-animate,body[data-aos-delay="1600"] [data-aos].aos-animate{transition-delay:1.6s}[data-aos][data-aos][data-aos-duration="1650"],body[data-aos-duration="1650"] [data-aos]{transition-duration:1.65s}[data-aos][data-aos][data-aos-delay="1650"],body[data-aos-delay="1650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1650"].aos-animate,body[data-aos-delay="1650"] [data-aos].aos-animate{transition-delay:1.65s}[data-aos][data-aos][data-aos-duration="1700"],body[data-aos-duration="1700"] [data-aos]{transition-duration:1.7s}[data-aos][data-aos][data-aos-delay="1700"],body[data-aos-delay="1700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1700"].aos-animate,body[data-aos-delay="1700"] [data-aos].aos-animate{transition-delay:1.7s}[data-aos][data-aos][data-aos-duration="1750"],body[data-aos-duration="1750"] [data-aos]{transition-duration:1.75s}[data-aos][data-aos][data-aos-delay="1750"],body[data-aos-delay="1750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1750"].aos-animate,body[data-aos-delay="1750"] [data-aos].aos-animate{transition-delay:1.75s}[data-aos][data-aos][data-aos-duration="1800"],body[data-aos-duration="1800"] [data-aos]{transition-duration:1.8s}[data-aos][data-aos][data-aos-delay="1800"],body[data-aos-delay="1800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1800"].aos-animate,body[data-aos-delay="1800"] [data-aos].aos-animate{transition-delay:1.8s}[data-aos][data-aos][data-aos-duration="1850"],body[data-aos-duration="1850"] [data-aos]{transition-duration:1.85s}[data-aos][data-aos][data-aos-delay="1850"],body[data-aos-delay="1850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1850"].aos-animate,body[data-aos-delay="1850"] [data-aos].aos-animate{transition-delay:1.85s}[data-aos][data-aos][data-aos-duration="1900"],body[data-aos-duration="1900"] [data-aos]{transition-duration:1.9s}[data-aos][data-aos][data-aos-delay="1900"],body[data-aos-delay="1900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1900"].aos-animate,body[data-aos-delay="1900"] [data-aos].aos-animate{transition-delay:1.9s}[data-aos][data-aos][data-aos-duration="1950"],body[data-aos-duration="1950"] [data-aos]{transition-duration:1.95s}[data-aos][data-aos][data-aos-delay="1950"],body[data-aos-delay="1950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1950"].aos-animate,body[data-aos-delay="1950"] [data-aos].aos-animate{transition-delay:1.95s}[data-aos][data-aos][data-aos-duration="2000"],body[data-aos-duration="2000"] [data-aos]{transition-duration:2s}[data-aos][data-aos][data-aos-delay="2000"],body[data-aos-delay="2000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2000"].aos-animate,body[data-aos-delay="2000"] [data-aos].aos-animate{transition-delay:2s}[data-aos][data-aos][data-aos-duration="2050"],body[data-aos-duration="2050"] [data-aos]{transition-duration:2.05s}[data-aos][data-aos][data-aos-delay="2050"],body[data-aos-delay="2050"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2050"].aos-animate,body[data-aos-delay="2050"] [data-aos].aos-animate{transition-delay:2.05s}[data-aos][data-aos][data-aos-duration="2100"],body[data-aos-duration="2100"] [data-aos]{transition-duration:2.1s}[data-aos][data-aos][data-aos-delay="2100"],body[data-aos-delay="2100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2100"].aos-animate,body[data-aos-delay="2100"] [data-aos].aos-animate{transition-delay:2.1s}[data-aos][data-aos][data-aos-duration="2150"],body[data-aos-duration="2150"] [data-aos]{transition-duration:2.15s}[data-aos][data-aos][data-aos-delay="2150"],body[data-aos-delay="2150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2150"].aos-animate,body[data-aos-delay="2150"] [data-aos].aos-animate{transition-delay:2.15s}[data-aos][data-aos][data-aos-duration="2200"],body[data-aos-duration="2200"] [data-aos]{transition-duration:2.2s}[data-aos][data-aos][data-aos-delay="2200"],body[data-aos-delay="2200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2200"].aos-animate,body[data-aos-delay="2200"] [data-aos].aos-animate{transition-delay:2.2s}[data-aos][data-aos][data-aos-duration="2250"],body[data-aos-duration="2250"] [data-aos]{transition-duration:2.25s}[data-aos][data-aos][data-aos-delay="2250"],body[data-aos-delay="2250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2250"].aos-animate,body[data-aos-delay="2250"] [data-aos].aos-animate{transition-delay:2.25s}[data-aos][data-aos][data-aos-duration="2300"],body[data-aos-duration="2300"] [data-aos]{transition-duration:2.3s}[data-aos][data-aos][data-aos-delay="2300"],body[data-aos-delay="2300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2300"].aos-animate,body[data-aos-delay="2300"] [data-aos].aos-animate{transition-delay:2.3s}[data-aos][data-aos][data-aos-duration="2350"],body[data-aos-duration="2350"] [data-aos]{transition-duration:2.35s}[data-aos][data-aos][data-aos-delay="2350"],body[data-aos-delay="2350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2350"].aos-animate,body[data-aos-delay="2350"] [data-aos].aos-animate{transition-delay:2.35s}[data-aos][data-aos][data-aos-duration="2400"],body[data-aos-duration="2400"] [data-aos]{transition-duration:2.4s}[data-aos][data-aos][data-aos-delay="2400"],body[data-aos-delay="2400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2400"].aos-animate,body[data-aos-delay="2400"] [data-aos].aos-animate{transition-delay:2.4s}[data-aos][data-aos][data-aos-duration="2450"],body[data-aos-duration="2450"] [data-aos]{transition-duration:2.45s}[data-aos][data-aos][data-aos-delay="2450"],body[data-aos-delay="2450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2450"].aos-animate,body[data-aos-delay="2450"] [data-aos].aos-animate{transition-delay:2.45s}[data-aos][data-aos][data-aos-duration="2500"],body[data-aos-duration="2500"] [data-aos]{transition-duration:2.5s}[data-aos][data-aos][data-aos-delay="2500"],body[data-aos-delay="2500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2500"].aos-animate,body[data-aos-delay="2500"] [data-aos].aos-animate{transition-delay:2.5s}[data-aos][data-aos][data-aos-duration="2550"],body[data-aos-duration="2550"] [data-aos]{transition-duration:2.55s}[data-aos][data-aos][data-aos-delay="2550"],body[data-aos-delay="2550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2550"].aos-animate,body[data-aos-delay="2550"] [data-aos].aos-animate{transition-delay:2.55s}[data-aos][data-aos][data-aos-duration="2600"],body[data-aos-duration="2600"] [data-aos]{transition-duration:2.6s}[data-aos][data-aos][data-aos-delay="2600"],body[data-aos-delay="2600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2600"].aos-animate,body[data-aos-delay="2600"] [data-aos].aos-animate{transition-delay:2.6s}[data-aos][data-aos][data-aos-duration="2650"],body[data-aos-duration="2650"] [data-aos]{transition-duration:2.65s}[data-aos][data-aos][data-aos-delay="2650"],body[data-aos-delay="2650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2650"].aos-animate,body[data-aos-delay="2650"] [data-aos].aos-animate{transition-delay:2.65s}[data-aos][data-aos][data-aos-duration="2700"],body[data-aos-duration="2700"] [data-aos]{transition-duration:2.7s}[data-aos][data-aos][data-aos-delay="2700"],body[data-aos-delay="2700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2700"].aos-animate,body[data-aos-delay="2700"] [data-aos].aos-animate{transition-delay:2.7s}[data-aos][data-aos][data-aos-duration="2750"],body[data-aos-duration="2750"] [data-aos]{transition-duration:2.75s}[data-aos][data-aos][data-aos-delay="2750"],body[data-aos-delay="2750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2750"].aos-animate,body[data-aos-delay="2750"] [data-aos].aos-animate{transition-delay:2.75s}[data-aos][data-aos][data-aos-duration="2800"],body[data-aos-duration="2800"] [data-aos]{transition-duration:2.8s}[data-aos][data-aos][data-aos-delay="2800"],body[data-aos-delay="2800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2800"].aos-animate,body[data-aos-delay="2800"] [data-aos].aos-animate{transition-delay:2.8s}[data-aos][data-aos][data-aos-duration="2850"],body[data-aos-duration="2850"] [data-aos]{transition-duration:2.85s}[data-aos][data-aos][data-aos-delay="2850"],body[data-aos-delay="2850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2850"].aos-animate,body[data-aos-delay="2850"] [data-aos].aos-animate{transition-delay:2.85s}[data-aos][data-aos][data-aos-duration="2900"],body[data-aos-duration="2900"] [data-aos]{transition-duration:2.9s}[data-aos][data-aos][data-aos-delay="2900"],body[data-aos-delay="2900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2900"].aos-animate,body[data-aos-delay="2900"] [data-aos].aos-animate{transition-delay:2.9s}[data-aos][data-aos][data-aos-duration="2950"],body[data-aos-duration="2950"] [data-aos]{transition-duration:2.95s}[data-aos][data-aos][data-aos-delay="2950"],body[data-aos-delay="2950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2950"].aos-animate,body[data-aos-delay="2950"] [data-aos].aos-animate{transition-delay:2.95s}[data-aos][data-aos][data-aos-duration="3000"],body[data-aos-duration="3000"] [data-aos]{transition-duration:3s}[data-aos][data-aos][data-aos-delay="3000"],body[data-aos-delay="3000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="3000"].aos-animate,body[data-aos-delay="3000"] [data-aos].aos-animate{transition-delay:3s}[data-aos][data-aos][data-aos-easing=linear],body[data-aos-easing=linear] [data-aos]{transition-timing-function:cubic-bezier(.25,.25,.75,.75)}[data-aos][data-aos][data-aos-easing=ease],body[data-aos-easing=ease] [data-aos]{transition-timing-function:ease}[data-aos][data-aos][data-aos-easing=ease-in],body[data-aos-easing=ease-in] [data-aos]{transition-timing-function:ease-in}[data-aos][data-aos][data-aos-easing=ease-out],body[data-aos-easing=ease-out] [data-aos]{transition-timing-function:ease-out}[data-aos][data-aos][data-aos-easing=ease-in-out],body[data-aos-easing=ease-in-out] [data-aos]{transition-timing-function:ease-in-out}[data-aos][data-aos][data-aos-easing=ease-in-back],body[data-aos-easing=ease-in-back] [data-aos]{transition-timing-function:cubic-bezier(.6,-.28,.735,.045)}[data-aos][data-aos][data-aos-easing=ease-out-back],body[data-aos-easing=ease-out-back] [data-aos]{transition-timing-function:cubic-bezier(.175,.885,.32,1.275)}[data-aos][data-aos][data-aos-easing=ease-in-out-back],body[data-aos-easing=ease-in-out-back] [data-aos]{transition-timing-function:cubic-bezier(.68,-.55,.265,1.55)}[data-aos][data-aos][data-aos-easing=ease-in-sine],body[data-aos-easing=ease-in-sine] [data-aos]{transition-timing-function:cubic-bezier(.47,0,.745,.715)}[data-aos][data-aos][data-aos-easing=ease-out-sine],body[data-aos-easing=ease-out-sine] [data-aos]{transition-timing-function:cubic-bezier(.39,.575,.565,1)}[data-aos][data-aos][data-aos-easing=ease-in-out-sine],body[data-aos-easing=ease-in-out-sine] [data-aos]{transition-timing-function:cubic-bezier(.445,.05,.55,.95)}[data-aos][data-aos][data-aos-easing=ease-in-quad],body[data-aos-easing=ease-in-quad] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-quad],body[data-aos-easing=ease-out-quad] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-quad],body[data-aos-easing=ease-in-out-quad] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos][data-aos][data-aos-easing=ease-in-cubic],body[data-aos-easing=ease-in-cubic] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-cubic],body[data-aos-easing=ease-out-cubic] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-cubic],body[data-aos-easing=ease-in-out-cubic] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos][data-aos][data-aos-easing=ease-in-quart],body[data-aos-easing=ease-in-quart] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-quart],body[data-aos-easing=ease-out-quart] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-quart],body[data-aos-easing=ease-in-out-quart] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos^=fade][data-aos^=fade]{opacity:0;transition-property:opacity,transform}[data-aos^=fade][data-aos^=fade].aos-animate{opacity:1;transform:translateZ(0)}[data-aos=fade-up]{transform:translate3d(0,100px,0)}[data-aos=fade-down]{transform:translate3d(0,-100px,0)}[data-aos=fade-right]{transform:translate3d(-100px,0,0)}[data-aos=fade-left]{transform:translate3d(100px,0,0)}[data-aos=fade-up-right]{transform:translate3d(-100px,100px,0)}[data-aos=fade-up-left]{transform:translate3d(100px,100px,0)}[data-aos=fade-down-right]{transform:translate3d(-100px,-100px,0)}[data-aos=fade-down-left]{transform:translate3d(100px,-100px,0)}[data-aos^=zoom][data-aos^=zoom]{opacity:0;transition-property:opacity,transform}[data-aos^=zoom][data-aos^=zoom].aos-animate{opacity:1;transform:translateZ(0) scale(1)}[data-aos=zoom-in]{transform:scale(.6)}[data-aos=zoom-in-up]{transform:translate3d(0,100px,0) scale(.6)}[data-aos=zoom-in-down]{transform:translate3d(0,-100px,0) scale(.6)}[data-aos=zoom-in-right]{transform:translate3d(-100px,0,0) scale(.6)}[data-aos=zoom-in-left]{transform:translate3d(100px,0,0) scale(.6)}[data-aos=zoom-out]{transform:scale(1.2)}[data-aos=zoom-out-up]{transform:translate3d(0,100px,0) scale(1.2)}[data-aos=zoom-out-down]{transform:translate3d(0,-100px,0) scale(1.2)}[data-aos=zoom-out-right]{transform:translate3d(-100px,0,0) scale(1.2)}[data-aos=zoom-out-left]{transform:translate3d(100px,0,0) scale(1.2)}[data-aos^=slide][data-aos^=slide]{transition-property:transform}[data-aos^=slide][data-aos^=slide].aos-animate{transform:translateZ(0)}[data-aos=slide-up]{transform:translate3d(0,100%,0)}[data-aos=slide-down]{transform:translate3d(0,-100%,0)}[data-aos=slide-right]{transform:translate3d(-100%,0,0)}[data-aos=slide-left]{transform:translate3d(100%,0,0)}[data-aos^=flip][data-aos^=flip]{backface-visibility:hidden;transition-property:transform}[data-aos=flip-left]{transform:perspective(2500px) rotateY(-100deg)}[data-aos=flip-left].aos-animate{transform:perspective(2500px) rotateY(0)}[data-aos=flip-right]{transform:perspective(2500px) rotateY(100deg)}[data-aos=flip-right].aos-animate{transform:perspective(2500px) rotateY(0)}[data-aos=flip-up]{transform:perspective(2500px) rotateX(-100deg)}[data-aos=flip-up].aos-animate{transform:perspective(2500px) rotateX(0)}[data-aos=flip-down]{transform:perspective(2500px) rotateX(100deg)}[data-aos=flip-down].aos-animate{transform:perspective(2500px) rotateX(0)}'],sourceRoot:""}]);const s=i},60:(a,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>f});var n=e(537),o=e.n(n),r=e(645),i=e.n(r),s=e(667),d=e.n(s),u=new URL(e(636),e.b),l=i()(o()),c=d()(u);l.push([a.id,"body{background-color:#0e0d1a}@font-face{font-family:'NewRoman';src:url("+c+")}h1,h2,h3,h4{font-family:NewRoman}span{font-family:NewRoman}p{font-family:NewRoman}\n","",{version:3,sources:["webpack://./src/App.vue","webpack://./src/_variables.scss"],names:[],mappings:"AAgCA,KACI,wBCjCa,CDkChB,WAGG,sBAAuB,CACvB,2CAA+D,CAGnE,YACI,oBAAqB,CACxB,KAGG,oBAAqB,CACxB,EAGG,oBAAqB",sourcesContent:["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import '_variables';\n\nbody {\n    background-color: $primary;\n}\n\n@font-face {\n    font-family: 'NewRoman';\n    src: url('./Assets/Code_New_Roman_Nerd_Font_Complete_Mono.ttf');\n}\n\nh1, h2, h3, h4 {\n    font-family: NewRoman;\n}\n\nspan {\n    font-family: NewRoman;\n}\n\np {\n    font-family: NewRoman;\n}\n","$primary: #0e0d1a;\n$on-primary: #F0F4EF;\n$on-primary-hover: #BFCC94;\n$secondary: #151426;\n$on-secondary: #F0F4EF;\n$on-secondary-hover: #BFCC94;\n\n$background: $primary;\n\n$banner_background: $primary;\n$banner_text: $on-primary;\n$banner_nav_background: $primary;\n$nav_text: $on-primary;\n$nav_text_hover: $on-primary-hover;\n$news_border: $on-primary;\n\n$landing_text: $primary;\n\n$roadmap_text: $on-primary;\n$roadmap_background: $secondary;\n\n$roadmap_item: $primary; \n\n$FAQ_background: $secondary;\n$FAQ_background_hover: #804260;\n$FAQ_question_background: $primary;\n$FAQ_answer_background: $primary;\n$FAQ_text: $on-primary;\n\n$footer_background: $primary;\n$footer_text: $on-primary;\n\n$team_background: $secondary;\n$team_title: $on-primary;\n\n$member_background: $primary;\n$member_text: $on-primary;\n\n$rarity_background: $secondary;\n$rarity_text: $on-primary;"],sourceRoot:""}]);const f=l},178:(a,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>s});var n=e(537),o=e.n(n),r=e(645),i=e.n(r)()(o());i.push([a.id,".question[data-v-4b04491c]{cursor:pointer}.container[data-v-4b04491c]{margin:2vh 0}.question[data-v-4b04491c]{background-color:#0e0d1a;padding:2px}\n","",{version:3,sources:["webpack://./src/Components/FAQquestion.vue","webpack://./src/_variables.scss"],names:[],mappings:"AA+BA,2BACE,cAAe,CAChB,4BAGC,YAAa,CACd,2BAGC,wBCxCe,CDyCf,WAAY",sourcesContent:['\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import "../_variables";\n\n.question {\n  cursor: pointer;\n}\n\n.container {\n  margin: 2vh 0;\n}\n\n.question {\n  background-color: $FAQ_question_background;\n  padding: 2px;\n}\n\n',"$primary: #0e0d1a;\n$on-primary: #F0F4EF;\n$on-primary-hover: #BFCC94;\n$secondary: #151426;\n$on-secondary: #F0F4EF;\n$on-secondary-hover: #BFCC94;\n\n$background: $primary;\n\n$banner_background: $primary;\n$banner_text: $on-primary;\n$banner_nav_background: $primary;\n$nav_text: $on-primary;\n$nav_text_hover: $on-primary-hover;\n$news_border: $on-primary;\n\n$landing_text: $primary;\n\n$roadmap_text: $on-primary;\n$roadmap_background: $secondary;\n\n$roadmap_item: $primary; \n\n$FAQ_background: $secondary;\n$FAQ_background_hover: #804260;\n$FAQ_question_background: $primary;\n$FAQ_answer_background: $primary;\n$FAQ_text: $on-primary;\n\n$footer_background: $primary;\n$footer_text: $on-primary;\n\n$team_background: $secondary;\n$team_title: $on-primary;\n\n$member_background: $primary;\n$member_text: $on-primary;\n\n$rarity_background: $secondary;\n$rarity_text: $on-primary;"],sourceRoot:""}]);const s=i},31:(a,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>s});var n=e(537),o=e.n(n),r=e(645),i=e.n(r)()(o());i.push([a.id,".footer[data-v-a4e733aa]{color:#F0F4EF;display:flex;justify-content:space-between;margin-top:40px}p[data-v-a4e733aa]{margin:0}\n","",{version:3,sources:["webpack://./src/Components/Footer.vue","webpack://./src/_variables.scss"],names:[],mappings:"AAoBA,yBACE,aCpBkB,CDqBlB,YAAa,CACb,6BAA8B,CAC9B,eAAgB,CACjB,mBAGC,QAAS",sourcesContent:['\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import "../_variables";\n\n.footer {\n  color: $footer_text;\n  display: flex;\n  justify-content: space-between;\n  margin-top: 40px;\n}\n\np {\n  margin: 0;\n}\n\n',"$primary: #0e0d1a;\n$on-primary: #F0F4EF;\n$on-primary-hover: #BFCC94;\n$secondary: #151426;\n$on-secondary: #F0F4EF;\n$on-secondary-hover: #BFCC94;\n\n$background: $primary;\n\n$banner_background: $primary;\n$banner_text: $on-primary;\n$banner_nav_background: $primary;\n$nav_text: $on-primary;\n$nav_text_hover: $on-primary-hover;\n$news_border: $on-primary;\n\n$landing_text: $primary;\n\n$roadmap_text: $on-primary;\n$roadmap_background: $secondary;\n\n$roadmap_item: $primary; \n\n$FAQ_background: $secondary;\n$FAQ_background_hover: #804260;\n$FAQ_question_background: $primary;\n$FAQ_answer_background: $primary;\n$FAQ_text: $on-primary;\n\n$footer_background: $primary;\n$footer_text: $on-primary;\n\n$team_background: $secondary;\n$team_title: $on-primary;\n\n$member_background: $primary;\n$member_text: $on-primary;\n\n$rarity_background: $secondary;\n$rarity_text: $on-primary;"],sourceRoot:""}]);const s=i},318:(a,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>s});var n=e(537),o=e.n(n),r=e(645),i=e.n(r)()(o());i.push([a.id,".header[data-v-62826bc6]{z-index:10;position:fixed;width:100%;top:0;left:0;background-color:#0e0d1a;color:#F0F4EF;opacity:80%;display:flex;flex-direction:column;justify-content:center}.header_container[data-v-62826bc6]{display:flex;justify-content:space-between;align-items:center}.nav[data-v-62826bc6]{display:flex;justify-content:end;align-items:center;width:60%}.news[data-v-62826bc6]{margin-right:2vw;border:2px solid #F0F4EF;border-radius:20px;padding:10px;text-align:center}.title[data-v-62826bc6]{margin-left:20px}.mobile_menu_icon[data-v-62826bc6]{display:none;font-size:50pt;margin-right:1vw;cursor:pointer}.mobile_nav_menu[data-v-62826bc6]{display:none}@media only screen and (max-width: 1100px){.mobile_menu_icon[data-v-62826bc6]{display:block}.mobile_nav_menu[data-v-62826bc6]{display:block}.links[data-v-62826bc6]{display:none}}\n","",{version:3,sources:["webpack://./src/Components/Header.vue","webpack://./src/_variables.scss"],names:[],mappings:"AA4CA,yBACE,UAAW,CACX,cAAe,CACf,UAAW,CACX,KAAM,CACN,MAAO,CACP,wBClDe,CDmDf,aClDkB,CDmDlB,WAAY,CACZ,YAAa,CACb,qBAAsB,CACtB,sBAAuB,CACxB,mCAGC,YAAa,CACb,6BAA8B,CAC9B,kBAAmB,CACpB,sBAGC,YAAa,CACb,mBAAoB,CACpB,kBAAmB,CACnB,SAAU,CACX,uBAGC,gBAAiB,CACjB,wBCxEkB,CDyElB,kBAAmB,CACnB,YAAa,CACb,iBAAkB,CACnB,wBAGC,gBAAiB,CAClB,mCAGC,YAAa,CACb,cAAe,CACf,gBAAiB,CACjB,cAAe,CAChB,kCAGC,YAAa,CACd,2CAGC,mCACE,aAAc,CACf,kCAGC,aAAc,CACf,wBAGC,YAAa,CACd",sourcesContent:['\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import "../_variables";\n\n.header {\n  z-index: 10;\n  position: fixed;\n  width: 100%;\n  top: 0;\n  left: 0;\n  background-color: $banner_background;\n  color: $banner_text;\n  opacity: 80%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n\n.header_container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.nav {\n  display: flex;\n  justify-content: end;\n  align-items: center;\n  width: 60%;\n}\n\n.news {\n  margin-right: 2vw;\n  border: 2px solid $banner_text;\n  border-radius: 20px;\n  padding: 10px;\n  text-align: center;\n}\n\n.title {\n  margin-left: 20px;\n}\n\n.mobile_menu_icon {\n  display: none;\n  font-size: 50pt;\n  margin-right: 1vw;\n  cursor: pointer;\n}\n\n.mobile_nav_menu {\n  display: none;\n}\n\n@media only screen and (max-width: 1100px) {\n  .mobile_menu_icon {\n    display: block;\n  }\n\n  .mobile_nav_menu {\n    display: block;\n  }\n\n  .links {\n    display: none;\n  }\n}\n',"$primary: #0e0d1a;\n$on-primary: #F0F4EF;\n$on-primary-hover: #BFCC94;\n$secondary: #151426;\n$on-secondary: #F0F4EF;\n$on-secondary-hover: #BFCC94;\n\n$background: $primary;\n\n$banner_background: $primary;\n$banner_text: $on-primary;\n$banner_nav_background: $primary;\n$nav_text: $on-primary;\n$nav_text_hover: $on-primary-hover;\n$news_border: $on-primary;\n\n$landing_text: $primary;\n\n$roadmap_text: $on-primary;\n$roadmap_background: $secondary;\n\n$roadmap_item: $primary; \n\n$FAQ_background: $secondary;\n$FAQ_background_hover: #804260;\n$FAQ_question_background: $primary;\n$FAQ_answer_background: $primary;\n$FAQ_text: $on-primary;\n\n$footer_background: $primary;\n$footer_text: $on-primary;\n\n$team_background: $secondary;\n$team_title: $on-primary;\n\n$member_background: $primary;\n$member_text: $on-primary;\n\n$rarity_background: $secondary;\n$rarity_text: $on-primary;"],sourceRoot:""}]);const s=i},989:(a,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>s});var n=e(537),o=e.n(n),r=e(645),i=e.n(r)()(o());i.push([a.id,".menu[data-v-f2b1337c]{display:flex;align-items:center;justify-content:space-around}.menu_item[data-v-f2b1337c]{margin-left:2vw;cursor:pointer;font-size:16pt}.social[data-v-f2b1337c]{margin-right:1vw}.menu_column[data-v-f2b1337c]{flex-direction:column}\n","",{version:3,sources:["webpack://./src/Components/NavMenu.vue"],names:[],mappings:"AAsCA,uBACE,YAAa,CACb,kBAAmB,CACnB,4BAA6B,CAC9B,4BAGG,eAAgB,CAChB,cAAe,CACf,cAAe,CAChB,yBAGD,gBAAiB,CAClB,8BAGC,qBAAsB",sourcesContent:['\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import "../_variables";\n\n.menu {\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n}\n\n.menu_item {\n    margin-left: 2vw;\n    cursor: pointer;\n    font-size: 16pt;\n  }\n\n.social {\n  margin-right: 1vw;\n}\n\n.menu_column {\n  flex-direction: column;\n}\n\n'],sourceRoot:""}]);const s=i},420:(a,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>s});var n=e(537),o=e.n(n),r=e(645),i=e.n(r)()(o());i.push([a.id,".team_member[data-v-17e3b5e7]{background-color:#0e0d1a;color:#F0F4EF;text-align:center;padding:15px;margin:15px;border-radius:10px}.member_image[data-v-17e3b5e7]{width:20vw;height:auto}\n","",{version:3,sources:["webpack://./src/Components/TeamMember.vue","webpack://./src/_variables.scss"],names:[],mappings:"AA0BA,8BACI,wBC3Ba,CD4Bb,aC3BgB,CD4BhB,iBAAkB,CAClB,YAAa,CACb,WAAY,CACZ,kBAAmB,CACtB,+BAGG,UAAW,CACX,WAAY",sourcesContent:["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import '../_variables';\n\n.team_member {\n    background-color: $member_background;\n    color: $member_text;\n    text-align: center;\n    padding: 15px;\n    margin: 15px;\n    border-radius: 10px;\n}\n\n.member_image {\n    width: 20vw;\n    height: auto;\n}\n\n","$primary: #0e0d1a;\n$on-primary: #F0F4EF;\n$on-primary-hover: #BFCC94;\n$secondary: #151426;\n$on-secondary: #F0F4EF;\n$on-secondary-hover: #BFCC94;\n\n$background: $primary;\n\n$banner_background: $primary;\n$banner_text: $on-primary;\n$banner_nav_background: $primary;\n$nav_text: $on-primary;\n$nav_text_hover: $on-primary-hover;\n$news_border: $on-primary;\n\n$landing_text: $primary;\n\n$roadmap_text: $on-primary;\n$roadmap_background: $secondary;\n\n$roadmap_item: $primary; \n\n$FAQ_background: $secondary;\n$FAQ_background_hover: #804260;\n$FAQ_question_background: $primary;\n$FAQ_answer_background: $primary;\n$FAQ_text: $on-primary;\n\n$footer_background: $primary;\n$footer_text: $on-primary;\n\n$team_background: $secondary;\n$team_title: $on-primary;\n\n$member_background: $primary;\n$member_text: $on-primary;\n\n$rarity_background: $secondary;\n$rarity_text: $on-primary;"],sourceRoot:""}]);const s=i},888:(a,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>s});var n=e(537),o=e.n(n),r=e(645),i=e.n(r)()(o());i.push([a.id,"#FAQ_container[data-v-ccb51dfc]{background-color:#151426;margin:0 10vw;color:#F0F4EF;margin-top:20px;padding:15px}.title[data-v-ccb51dfc]{text-align:center;font-size:24pt}@media only screen and (max-width: 1000px){.title h1[data-v-ccb51dfc]{font-size:30pt}}\n","",{version:3,sources:["webpack://./src/Pages/FAQ.vue","webpack://./src/_variables.scss"],names:[],mappings:"AA0DA,gCACE,wBCxDiB,CDyDjB,aAAc,CACd,aC5DkB,CD6DlB,eAAgB,CAChB,YAAa,CACd,wBAGC,iBAAkB,CAClB,cAAe,CAChB,2CAGC,2BAEI,cAAe,CAChB",sourcesContent:['\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import "../_variables";\n\n#FAQ_container {\n  background-color: $FAQ_background;\n  margin: 0 10vw;\n  color: $FAQ_text;\n  margin-top: 20px;\n  padding: 15px;\n}\n\n.title {\n  text-align: center;\n  font-size: 24pt;\n}\n\n@media only screen and (max-width: 1000px) {\n  .title {\n    h1{\n      font-size: 30pt;\n    }\n  }\n\n}\n\n',"$primary: #0e0d1a;\n$on-primary: #F0F4EF;\n$on-primary-hover: #BFCC94;\n$secondary: #151426;\n$on-secondary: #F0F4EF;\n$on-secondary-hover: #BFCC94;\n\n$background: $primary;\n\n$banner_background: $primary;\n$banner_text: $on-primary;\n$banner_nav_background: $primary;\n$nav_text: $on-primary;\n$nav_text_hover: $on-primary-hover;\n$news_border: $on-primary;\n\n$landing_text: $primary;\n\n$roadmap_text: $on-primary;\n$roadmap_background: $secondary;\n\n$roadmap_item: $primary; \n\n$FAQ_background: $secondary;\n$FAQ_background_hover: #804260;\n$FAQ_question_background: $primary;\n$FAQ_answer_background: $primary;\n$FAQ_text: $on-primary;\n\n$footer_background: $primary;\n$footer_text: $on-primary;\n\n$team_background: $secondary;\n$team_title: $on-primary;\n\n$member_background: $primary;\n$member_text: $on-primary;\n\n$rarity_background: $secondary;\n$rarity_text: $on-primary;"],sourceRoot:""}]);const s=i},952:(a,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>f});var n=e(537),o=e.n(n),r=e(645),i=e.n(r),s=e(667),d=e.n(s),u=new URL(e(551),e.b),l=i()(o()),c=d()(u);l.push([a.id,".landing[data-v-77fb7183]{height:1080px;width:98vw}.landing[data-v-77fb7183]{background-image:url("+c+");background-size:cover;background-position:center top;background-repeat:no-repeat}\n","",{version:3,sources:["webpack://./src/Pages/Landing.vue"],names:[],mappings:"AAYA,0BACE,aAAc,CACd,UAAW,CACZ,0BAGC,wDAA2C,CAC3C,qBAAsB,CACtB,8BAA+B,CAC/B,2BAA4B",sourcesContent:['\n\n\n\n\n\n\n\n\n\n@import "../_variables";\n\n.landing {\n  height: 1080px;\n  width: 98vw;\n}\n\n.landing {\n  background-image: url("../Assets/Mike.jpg");\n  background-size: cover;\n  background-position: center top;\n  background-repeat: no-repeat;\n\n}\n\n'],sourceRoot:""}]);const f=l},547:(a,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>s});var n=e(537),o=e.n(n),r=e(645),i=e.n(r)()(o());i.push([a.id,"#rarity_container[data-v-ed322822]{margin-top:20px;padding:0 10vw;color:#F0F4EF}.rarity_content[data-v-ed322822]{height:30vh}.container[data-v-ed322822]{padding-top:5px;background-color:#151426;height:60vh}.container h1[data-v-ed322822]{text-align:center;font-size:48pt}.rarity_content[data-v-ed322822]{display:flex;justify-content:center;align-items:center}\n","",{version:3,sources:["webpack://./src/Pages/Rarity.vue","webpack://./src/_variables.scss"],names:[],mappings:"AAkBA,mCACE,eAAgB,CAChB,cAAe,CACf,aCpBkB,CDqBnB,iCAGG,WAAY,CACf,4BAGC,eAAgB,CAChB,wBC3BiB,CD4BjB,WAAY,CAHd,+BAKI,iBAAkB,CAClB,cAAe,CAChB,iCAGD,YAAa,CACb,sBAAuB,CACvB,kBAAmB",sourcesContent:['\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import "../_variables";\n\n#rarity_container {\n  margin-top: 20px;\n  padding: 0 10vw;\n  color: $rarity_text;\n}\n\n.rarity_content {\n    height: 30vh;\n}\n\n.container {\n  padding-top: 5px;\n  background-color: $rarity_background;\n  height: 60vh;\n  h1 {\n    text-align: center;\n    font-size: 48pt;\n  }\n}\n.rarity_content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n',"$primary: #0e0d1a;\n$on-primary: #F0F4EF;\n$on-primary-hover: #BFCC94;\n$secondary: #151426;\n$on-secondary: #F0F4EF;\n$on-secondary-hover: #BFCC94;\n\n$background: $primary;\n\n$banner_background: $primary;\n$banner_text: $on-primary;\n$banner_nav_background: $primary;\n$nav_text: $on-primary;\n$nav_text_hover: $on-primary-hover;\n$news_border: $on-primary;\n\n$landing_text: $primary;\n\n$roadmap_text: $on-primary;\n$roadmap_background: $secondary;\n\n$roadmap_item: $primary; \n\n$FAQ_background: $secondary;\n$FAQ_background_hover: #804260;\n$FAQ_question_background: $primary;\n$FAQ_answer_background: $primary;\n$FAQ_text: $on-primary;\n\n$footer_background: $primary;\n$footer_text: $on-primary;\n\n$team_background: $secondary;\n$team_title: $on-primary;\n\n$member_background: $primary;\n$member_text: $on-primary;\n\n$rarity_background: $secondary;\n$rarity_text: $on-primary;"],sourceRoot:""}]);const s=i},638:(a,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>s});var n=e(537),o=e.n(n),r=e(645),i=e.n(r)()(o());i.push([a.id,"#roadmap_container[data-v-f06a21b0]{padding:0 10vw;color:#F0F4EF;margin-top:20px}.text[data-v-f06a21b0]{background-color:#151426;display:flex;flex-direction:column}.title[data-v-f06a21b0]{text-align:center;font-size:24pt}.roadmap-1[data-v-f06a21b0]{width:50%}.roadmap-3[data-v-f06a21b0]{width:50%}.roadmap-item[data-v-f06a21b0]{text-align:center;background-color:#0e0d1a;border-radius:10px;margin:10px}.roadmap-2[data-v-f06a21b0]{display:flex;flex-direction:column;align-items:end}.roadmap-2 div[data-v-f06a21b0]{width:50%}@media only screen and (max-width: 1000px){.roadmap-2 div[data-v-f06a21b0]{width:100%}.roadmap-item[data-v-f06a21b0]{width:100%}.title[data-v-f06a21b0]{font-size:16pt}}\n","",{version:3,sources:["webpack://./src/Pages/Roadmap.vue","webpack://./src/_variables.scss"],names:[],mappings:"AAyDA,oCACE,cAAe,CACf,aC1DkB,CD2DlB,eAAgB,CACjB,uBAGC,wBC7DiB,CD8DjB,YAAa,CACb,qBAAsB,CACvB,wBAGC,iBAAkB,CAClB,cAAe,CAChB,4BAGC,SAAU,CACX,4BAGC,SAAU,CACX,+BAGC,iBAAkB,CAClB,wBCpFe,CDqFf,kBAAmB,CACnB,WAAY,CACb,4BAGC,YAAa,CACb,qBAAsB,CACtB,eAAgB,CAHlB,gCAKI,SAAU,CACX,2CAID,gCACE,UAAW,CACZ,+BAGC,UAAW,CACZ,wBAGC,cAAe,CAChB",sourcesContent:['\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import "../_variables";\n\n#roadmap_container {\n  padding: 0 10vw;\n  color: $roadmap_text;\n  margin-top: 20px;\n}\n\n.text {\n  background-color: $roadmap_background;\n  display: flex;\n  flex-direction: column;\n}\n\n.title {\n  text-align: center;\n  font-size: 24pt;\n}\n\n.roadmap-1 {\n  width: 50%;\n}\n\n.roadmap-3 {\n  width: 50%;\n}\n\n.roadmap-item {\n  text-align: center;\n  background-color: $roadmap_item;\n  border-radius: 10px;\n  margin: 10px;\n}\n\n.roadmap-2 {\n  display: flex;\n  flex-direction: column;\n  align-items: end;\n  div {\n    width: 50%;\n  }\n}\n\n@media only screen and (max-width: 1000px) {\n  .roadmap-2 div {\n    width: 100%;\n  }\n\n  .roadmap-item {\n    width: 100%;\n  }\n\n  .title {\n    font-size: 16pt;\n  }\n}\n',"$primary: #0e0d1a;\n$on-primary: #F0F4EF;\n$on-primary-hover: #BFCC94;\n$secondary: #151426;\n$on-secondary: #F0F4EF;\n$on-secondary-hover: #BFCC94;\n\n$background: $primary;\n\n$banner_background: $primary;\n$banner_text: $on-primary;\n$banner_nav_background: $primary;\n$nav_text: $on-primary;\n$nav_text_hover: $on-primary-hover;\n$news_border: $on-primary;\n\n$landing_text: $primary;\n\n$roadmap_text: $on-primary;\n$roadmap_background: $secondary;\n\n$roadmap_item: $primary; \n\n$FAQ_background: $secondary;\n$FAQ_background_hover: #804260;\n$FAQ_question_background: $primary;\n$FAQ_answer_background: $primary;\n$FAQ_text: $on-primary;\n\n$footer_background: $primary;\n$footer_text: $on-primary;\n\n$team_background: $secondary;\n$team_title: $on-primary;\n\n$member_background: $primary;\n$member_text: $on-primary;\n\n$rarity_background: $secondary;\n$rarity_text: $on-primary;"],sourceRoot:""}]);const s=i},917:(a,t,e)=>{"use strict";e.r(t),e.d(t,{default:()=>s});var n=e(537),o=e.n(n),r=e(645),i=e.n(r)()(o());i.push([a.id,"#team_container[data-v-4f43d2be]{margin-top:20px;padding:0 10vw;color:#F0F4EF}.members[data-v-4f43d2be]{display:flex;justify-content:space-around}.container[data-v-4f43d2be]{padding-top:5px;background-color:#151426}.container h1[data-v-4f43d2be]{text-align:center;font-size:48pt}@media only screen and (max-width: 1000px){.members[data-v-4f43d2be]{flex-direction:column}.container h1[data-v-4f43d2be]{font-size:30pt}}\n","",{version:3,sources:["webpack://./src/Pages/Team.vue","webpack://./src/_variables.scss"],names:[],mappings:"AAsDA,iCACE,eAAgB,CAChB,cAAe,CACf,aCxDkB,CDyDnB,0BAGC,YAAa,CACb,4BAA6B,CAC9B,4BAGC,eAAgB,CAChB,wBChEiB,CD8DnB,+BAIE,iBAAkB,CAClB,cAAe,CAChB,2CAIC,0BACE,qBAAsB,CACvB,+BAIG,cAAe,CAChB",sourcesContent:['\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import "../_variables";\n\n#team_container {\n  margin-top: 20px;\n  padding: 0 10vw;\n  color: $team_title;\n}\n\n.members {\n  display: flex;\n  justify-content: space-around;\n}\n\n.container {\n  padding-top: 5px;\n  background-color: $team_background;\n  h1 {\n  text-align: center;\n  font-size: 48pt;\n}\n}\n\n@media only screen and (max-width: 1000px) {\n  .members {\n    flex-direction: column;\n  }\n\n  .container {\n    h1{\n      font-size: 30pt;\n    }\n  }\n\n}\n\n',"$primary: #0e0d1a;\n$on-primary: #F0F4EF;\n$on-primary-hover: #BFCC94;\n$secondary: #151426;\n$on-secondary: #F0F4EF;\n$on-secondary-hover: #BFCC94;\n\n$background: $primary;\n\n$banner_background: $primary;\n$banner_text: $on-primary;\n$banner_nav_background: $primary;\n$nav_text: $on-primary;\n$nav_text_hover: $on-primary-hover;\n$news_border: $on-primary;\n\n$landing_text: $primary;\n\n$roadmap_text: $on-primary;\n$roadmap_background: $secondary;\n\n$roadmap_item: $primary; \n\n$FAQ_background: $secondary;\n$FAQ_background_hover: #804260;\n$FAQ_question_background: $primary;\n$FAQ_answer_background: $primary;\n$FAQ_text: $on-primary;\n\n$footer_background: $primary;\n$footer_text: $on-primary;\n\n$team_background: $secondary;\n$team_title: $on-primary;\n\n$member_background: $primary;\n$member_text: $on-primary;\n\n$rarity_background: $secondary;\n$rarity_text: $on-primary;"],sourceRoot:""}]);const s=i},645:a=>{"use strict";a.exports=function(a){var t=[];return t.toString=function(){return this.map((function(t){var e="",n=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),n&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=a(t),n&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(a,e,n,o,r){"string"==typeof a&&(a=[[null,a,void 0]]);var i={};if(n)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(i[d]=!0)}for(var u=0;u<a.length;u++){var l=[].concat(a[u]);n&&i[l[0]]||(void 0!==r&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=r),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},667:a=>{"use strict";a.exports=function(a,t){return t||(t={}),a?(a=String(a.__esModule?a.default:a),/^['"].*['"]$/.test(a)&&(a=a.slice(1,-1)),t.hash&&(a+=t.hash),/["'() \t\n]|(%20)/.test(a)||t.needQuotes?'"'.concat(a.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):a):a}},537:a=>{"use strict";a.exports=function(a){var t=a[1],e=a[3];if(!e)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),r="/*# ".concat(o," */"),i=e.sources.map((function(a){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(a," */")}));return[t].concat(i).concat([r]).join("\n")}return[t].join("\n")}},755:function(a,t){var e;!function(t,e){"use strict";"object"==typeof a.exports?a.exports=t.document?e(t,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return e(a)}:e(t)}("undefined"!=typeof window?window:this,(function(n,o){"use strict";var r=[],i=Object.getPrototypeOf,s=r.slice,d=r.flat?function(a){return r.flat.call(a)}:function(a){return r.concat.apply([],a)},u=r.push,l=r.indexOf,c={},f=c.toString,p=c.hasOwnProperty,y=p.toString,m=y.call(Object),h={},A=function(a){return"function"==typeof a&&"number"!=typeof a.nodeType&&"function"!=typeof a.item},v=function(a){return null!=a&&a===a.window},g=n.document,b={type:!0,src:!0,nonce:!0,noModule:!0};function C(a,t,e){var n,o,r=(e=e||g).createElement("script");if(r.text=a,t)for(n in b)(o=t[n]||t.getAttribute&&t.getAttribute(n))&&r.setAttribute(n,o);e.head.appendChild(r).parentNode.removeChild(r)}function _(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?c[f.call(a)]||"object":typeof a}var x="3.6.0",w=function(a,t){return new w.fn.init(a,t)};function $(a){var t=!!a&&"length"in a&&a.length,e=_(a);return!A(a)&&!v(a)&&("array"===e||0===t||"number"==typeof t&&t>0&&t-1 in a)}w.fn=w.prototype={jquery:x,constructor:w,length:0,toArray:function(){return s.call(this)},get:function(a){return null==a?s.call(this):a<0?this[a+this.length]:this[a]},pushStack:function(a){var t=w.merge(this.constructor(),a);return t.prevObject=this,t},each:function(a){return w.each(this,a)},map:function(a){return this.pushStack(w.map(this,(function(t,e){return a.call(t,e,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(w.grep(this,(function(a,t){return(t+1)%2})))},odd:function(){return this.pushStack(w.grep(this,(function(a,t){return t%2})))},eq:function(a){var t=this.length,e=+a+(a<0?t:0);return this.pushStack(e>=0&&e<t?[this[e]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:r.sort,splice:r.splice},w.extend=w.fn.extend=function(){var a,t,e,n,o,r,i=arguments[0]||{},s=1,d=arguments.length,u=!1;for("boolean"==typeof i&&(u=i,i=arguments[s]||{},s++),"object"==typeof i||A(i)||(i={}),s===d&&(i=this,s--);s<d;s++)if(null!=(a=arguments[s]))for(t in a)n=a[t],"__proto__"!==t&&i!==n&&(u&&n&&(w.isPlainObject(n)||(o=Array.isArray(n)))?(e=i[t],r=o&&!Array.isArray(e)?[]:o||w.isPlainObject(e)?e:{},o=!1,i[t]=w.extend(u,r,n)):void 0!==n&&(i[t]=n));return i},w.extend({expando:"jQuery"+(x+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isPlainObject:function(a){var t,e;return!(!a||"[object Object]"!==f.call(a)||(t=i(a))&&("function"!=typeof(e=p.call(t,"constructor")&&t.constructor)||y.call(e)!==m))},isEmptyObject:function(a){var t;for(t in a)return!1;return!0},globalEval:function(a,t,e){C(a,{nonce:t&&t.nonce},e)},each:function(a,t){var e,n=0;if($(a))for(e=a.length;n<e&&!1!==t.call(a[n],n,a[n]);n++);else for(n in a)if(!1===t.call(a[n],n,a[n]))break;return a},makeArray:function(a,t){var e=t||[];return null!=a&&($(Object(a))?w.merge(e,"string"==typeof a?[a]:a):u.call(e,a)),e},inArray:function(a,t,e){return null==t?-1:l.call(t,a,e)},merge:function(a,t){for(var e=+t.length,n=0,o=a.length;n<e;n++)a[o++]=t[n];return a.length=o,a},grep:function(a,t,e){for(var n=[],o=0,r=a.length,i=!e;o<r;o++)!t(a[o],o)!==i&&n.push(a[o]);return n},map:function(a,t,e){var n,o,r=0,i=[];if($(a))for(n=a.length;r<n;r++)null!=(o=t(a[r],r,e))&&i.push(o);else for(r in a)null!=(o=t(a[r],r,e))&&i.push(o);return d(i)},guid:1,support:h}),"function"==typeof Symbol&&(w.fn[Symbol.iterator]=r[Symbol.iterator]),w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(a,t){c["[object "+t+"]"]=t.toLowerCase()}));var B=function(a){var t,e,n,o,r,i,s,d,u,l,c,f,p,y,m,h,A,v,g,b="sizzle"+1*new Date,C=a.document,_=0,x=0,w=da(),$=da(),B=da(),k=da(),F=function(a,t){return a===t&&(c=!0),0},T={}.hasOwnProperty,S=[],E=S.pop,q=S.push,j=S.push,D=S.slice,N=function(a,t){for(var e=0,n=a.length;e<n;e++)if(a[e]===t)return e;return-1},O="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\x20\\t\\r\\n\\f]",G="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",L="\\[[\\x20\\t\\r\\n\\f]*("+G+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+G+"))|)"+M+"*\\]",I=":("+G+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+L+")*)|.*)\\)|)",P=new RegExp(M+"+","g"),R=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),z=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),H=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),W=new RegExp(M+"|>"),Q=new RegExp(I),U=new RegExp("^"+G+"$"),Y={ID:new RegExp("^#("+G+")"),CLASS:new RegExp("^\\.("+G+")"),TAG:new RegExp("^("+G+"|[*])"),ATTR:new RegExp("^"+L),PSEUDO:new RegExp("^"+I),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+O+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},X=/HTML$/i,V=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ta=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ea=function(a,t){var e="0x"+a.slice(1)-65536;return t||(e<0?String.fromCharCode(e+65536):String.fromCharCode(e>>10|55296,1023&e|56320))},na=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oa=function(a,t){return t?"\0"===a?"�":a.slice(0,-1)+"\\"+a.charCodeAt(a.length-1).toString(16)+" ":"\\"+a},ra=function(){f()},ia=ba((function(a){return!0===a.disabled&&"fieldset"===a.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{j.apply(S=D.call(C.childNodes),C.childNodes),S[C.childNodes.length].nodeType}catch(a){j={apply:S.length?function(a,t){q.apply(a,D.call(t))}:function(a,t){for(var e=a.length,n=0;a[e++]=t[n++];);a.length=e-1}}}function sa(a,t,n,o){var r,s,u,l,c,y,A,v=t&&t.ownerDocument,C=t?t.nodeType:9;if(n=n||[],"string"!=typeof a||!a||1!==C&&9!==C&&11!==C)return n;if(!o&&(f(t),t=t||p,m)){if(11!==C&&(c=J.exec(a)))if(r=c[1]){if(9===C){if(!(u=t.getElementById(r)))return n;if(u.id===r)return n.push(u),n}else if(v&&(u=v.getElementById(r))&&g(t,u)&&u.id===r)return n.push(u),n}else{if(c[2])return j.apply(n,t.getElementsByTagName(a)),n;if((r=c[3])&&e.getElementsByClassName&&t.getElementsByClassName)return j.apply(n,t.getElementsByClassName(r)),n}if(e.qsa&&!k[a+" "]&&(!h||!h.test(a))&&(1!==C||"object"!==t.nodeName.toLowerCase())){if(A=a,v=t,1===C&&(W.test(a)||H.test(a))){for((v=aa.test(a)&&Aa(t.parentNode)||t)===t&&e.scope||((l=t.getAttribute("id"))?l=l.replace(na,oa):t.setAttribute("id",l=b)),s=(y=i(a)).length;s--;)y[s]=(l?"#"+l:":scope")+" "+ga(y[s]);A=y.join(",")}try{return j.apply(n,v.querySelectorAll(A)),n}catch(t){k(a,!0)}finally{l===b&&t.removeAttribute("id")}}}return d(a.replace(R,"$1"),t,n,o)}function da(){var a=[];return function t(e,o){return a.push(e+" ")>n.cacheLength&&delete t[a.shift()],t[e+" "]=o}}function ua(a){return a[b]=!0,a}function la(a){var t=p.createElement("fieldset");try{return!!a(t)}catch(a){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ca(a,t){for(var e=a.split("|"),o=e.length;o--;)n.attrHandle[e[o]]=t}function fa(a,t){var e=t&&a,n=e&&1===a.nodeType&&1===t.nodeType&&a.sourceIndex-t.sourceIndex;if(n)return n;if(e)for(;e=e.nextSibling;)if(e===t)return-1;return a?1:-1}function pa(a){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===a}}function ya(a){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===a}}function ma(a){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===a:t.disabled===a:t.isDisabled===a||t.isDisabled!==!a&&ia(t)===a:t.disabled===a:"label"in t&&t.disabled===a}}function ha(a){return ua((function(t){return t=+t,ua((function(e,n){for(var o,r=a([],e.length,t),i=r.length;i--;)e[o=r[i]]&&(e[o]=!(n[o]=e[o]))}))}))}function Aa(a){return a&&void 0!==a.getElementsByTagName&&a}for(t in e=sa.support={},r=sa.isXML=function(a){var t=a&&a.namespaceURI,e=a&&(a.ownerDocument||a).documentElement;return!X.test(t||e&&e.nodeName||"HTML")},f=sa.setDocument=function(a){var t,o,i=a?a.ownerDocument||a:C;return i!=p&&9===i.nodeType&&i.documentElement?(y=(p=i).documentElement,m=!r(p),C!=p&&(o=p.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",ra,!1):o.attachEvent&&o.attachEvent("onunload",ra)),e.scope=la((function(a){return y.appendChild(a).appendChild(p.createElement("div")),void 0!==a.querySelectorAll&&!a.querySelectorAll(":scope fieldset div").length})),e.attributes=la((function(a){return a.className="i",!a.getAttribute("className")})),e.getElementsByTagName=la((function(a){return a.appendChild(p.createComment("")),!a.getElementsByTagName("*").length})),e.getElementsByClassName=K.test(p.getElementsByClassName),e.getById=la((function(a){return y.appendChild(a).id=b,!p.getElementsByName||!p.getElementsByName(b).length})),e.getById?(n.filter.ID=function(a){var t=a.replace(ta,ea);return function(a){return a.getAttribute("id")===t}},n.find.ID=function(a,t){if(void 0!==t.getElementById&&m){var e=t.getElementById(a);return e?[e]:[]}}):(n.filter.ID=function(a){var t=a.replace(ta,ea);return function(a){var e=void 0!==a.getAttributeNode&&a.getAttributeNode("id");return e&&e.value===t}},n.find.ID=function(a,t){if(void 0!==t.getElementById&&m){var e,n,o,r=t.getElementById(a);if(r){if((e=r.getAttributeNode("id"))&&e.value===a)return[r];for(o=t.getElementsByName(a),n=0;r=o[n++];)if((e=r.getAttributeNode("id"))&&e.value===a)return[r]}return[]}}),n.find.TAG=e.getElementsByTagName?function(a,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(a):e.qsa?t.querySelectorAll(a):void 0}:function(a,t){var e,n=[],o=0,r=t.getElementsByTagName(a);if("*"===a){for(;e=r[o++];)1===e.nodeType&&n.push(e);return n}return r},n.find.CLASS=e.getElementsByClassName&&function(a,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(a)},A=[],h=[],(e.qsa=K.test(p.querySelectorAll))&&(la((function(a){var t;y.appendChild(a).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&h.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),a.querySelectorAll("[selected]").length||h.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+O+")"),a.querySelectorAll("[id~="+b+"-]").length||h.push("~="),(t=p.createElement("input")).setAttribute("name",""),a.appendChild(t),a.querySelectorAll("[name='']").length||h.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),a.querySelectorAll(":checked").length||h.push(":checked"),a.querySelectorAll("a#"+b+"+*").length||h.push(".#.+[+~]"),a.querySelectorAll("\\\f"),h.push("[\\r\\n\\f]")})),la((function(a){a.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),a.appendChild(t).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&h.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==a.querySelectorAll(":enabled").length&&h.push(":enabled",":disabled"),y.appendChild(a).disabled=!0,2!==a.querySelectorAll(":disabled").length&&h.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),h.push(",.*:")}))),(e.matchesSelector=K.test(v=y.matches||y.webkitMatchesSelector||y.mozMatchesSelector||y.oMatchesSelector||y.msMatchesSelector))&&la((function(a){e.disconnectedMatch=v.call(a,"*"),v.call(a,"[s!='']:x"),A.push("!=",I)})),h=h.length&&new RegExp(h.join("|")),A=A.length&&new RegExp(A.join("|")),t=K.test(y.compareDocumentPosition),g=t||K.test(y.contains)?function(a,t){var e=9===a.nodeType?a.documentElement:a,n=t&&t.parentNode;return a===n||!(!n||1!==n.nodeType||!(e.contains?e.contains(n):a.compareDocumentPosition&&16&a.compareDocumentPosition(n)))}:function(a,t){if(t)for(;t=t.parentNode;)if(t===a)return!0;return!1},F=t?function(a,t){if(a===t)return c=!0,0;var n=!a.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(a.ownerDocument||a)==(t.ownerDocument||t)?a.compareDocumentPosition(t):1)||!e.sortDetached&&t.compareDocumentPosition(a)===n?a==p||a.ownerDocument==C&&g(C,a)?-1:t==p||t.ownerDocument==C&&g(C,t)?1:l?N(l,a)-N(l,t):0:4&n?-1:1)}:function(a,t){if(a===t)return c=!0,0;var e,n=0,o=a.parentNode,r=t.parentNode,i=[a],s=[t];if(!o||!r)return a==p?-1:t==p?1:o?-1:r?1:l?N(l,a)-N(l,t):0;if(o===r)return fa(a,t);for(e=a;e=e.parentNode;)i.unshift(e);for(e=t;e=e.parentNode;)s.unshift(e);for(;i[n]===s[n];)n++;return n?fa(i[n],s[n]):i[n]==C?-1:s[n]==C?1:0},p):p},sa.matches=function(a,t){return sa(a,null,null,t)},sa.matchesSelector=function(a,t){if(f(a),e.matchesSelector&&m&&!k[t+" "]&&(!A||!A.test(t))&&(!h||!h.test(t)))try{var n=v.call(a,t);if(n||e.disconnectedMatch||a.document&&11!==a.document.nodeType)return n}catch(a){k(t,!0)}return sa(t,p,null,[a]).length>0},sa.contains=function(a,t){return(a.ownerDocument||a)!=p&&f(a),g(a,t)},sa.attr=function(a,t){(a.ownerDocument||a)!=p&&f(a);var o=n.attrHandle[t.toLowerCase()],r=o&&T.call(n.attrHandle,t.toLowerCase())?o(a,t,!m):void 0;return void 0!==r?r:e.attributes||!m?a.getAttribute(t):(r=a.getAttributeNode(t))&&r.specified?r.value:null},sa.escape=function(a){return(a+"").replace(na,oa)},sa.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},sa.uniqueSort=function(a){var t,n=[],o=0,r=0;if(c=!e.detectDuplicates,l=!e.sortStable&&a.slice(0),a.sort(F),c){for(;t=a[r++];)t===a[r]&&(o=n.push(r));for(;o--;)a.splice(n[o],1)}return l=null,a},o=sa.getText=function(a){var t,e="",n=0,r=a.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)e+=o(a)}else if(3===r||4===r)return a.nodeValue}else for(;t=a[n++];)e+=o(t);return e},n=sa.selectors={cacheLength:50,createPseudo:ua,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ta,ea),a[3]=(a[3]||a[4]||a[5]||"").replace(ta,ea),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||sa.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&sa.error(a[0]),a},PSEUDO:function(a){var t,e=!a[6]&&a[2];return Y.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":e&&Q.test(e)&&(t=i(e,!0))&&(t=e.indexOf(")",e.length-t)-e.length)&&(a[0]=a[0].slice(0,t),a[2]=e.slice(0,t)),a.slice(0,3))}},filter:{TAG:function(a){var t=a.replace(ta,ea).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===t}},CLASS:function(a){var t=w[a+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+a+"("+M+"|$)"))&&w(a,(function(a){return t.test("string"==typeof a.className&&a.className||void 0!==a.getAttribute&&a.getAttribute("class")||"")}))},ATTR:function(a,t,e){return function(n){var o=sa.attr(n,a);return null==o?"!="===t:!t||(o+="","="===t?o===e:"!="===t?o!==e:"^="===t?e&&0===o.indexOf(e):"*="===t?e&&o.indexOf(e)>-1:"$="===t?e&&o.slice(-e.length)===e:"~="===t?(" "+o.replace(P," ")+" ").indexOf(e)>-1:"|="===t&&(o===e||o.slice(0,e.length+1)===e+"-"))}},CHILD:function(a,t,e,n,o){var r="nth"!==a.slice(0,3),i="last"!==a.slice(-4),s="of-type"===t;return 1===n&&0===o?function(a){return!!a.parentNode}:function(t,e,d){var u,l,c,f,p,y,m=r!==i?"nextSibling":"previousSibling",h=t.parentNode,A=s&&t.nodeName.toLowerCase(),v=!d&&!s,g=!1;if(h){if(r){for(;m;){for(f=t;f=f[m];)if(s?f.nodeName.toLowerCase()===A:1===f.nodeType)return!1;y=m="only"===a&&!y&&"nextSibling"}return!0}if(y=[i?h.firstChild:h.lastChild],i&&v){for(g=(p=(u=(l=(c=(f=h)[b]||(f[b]={}))[f.uniqueID]||(c[f.uniqueID]={}))[a]||[])[0]===_&&u[1])&&u[2],f=p&&h.childNodes[p];f=++p&&f&&f[m]||(g=p=0)||y.pop();)if(1===f.nodeType&&++g&&f===t){l[a]=[_,p,g];break}}else if(v&&(g=p=(u=(l=(c=(f=t)[b]||(f[b]={}))[f.uniqueID]||(c[f.uniqueID]={}))[a]||[])[0]===_&&u[1]),!1===g)for(;(f=++p&&f&&f[m]||(g=p=0)||y.pop())&&((s?f.nodeName.toLowerCase()!==A:1!==f.nodeType)||!++g||(v&&((l=(c=f[b]||(f[b]={}))[f.uniqueID]||(c[f.uniqueID]={}))[a]=[_,g]),f!==t)););return(g-=o)===n||g%n==0&&g/n>=0}}},PSEUDO:function(a,t){var e,o=n.pseudos[a]||n.setFilters[a.toLowerCase()]||sa.error("unsupported pseudo: "+a);return o[b]?o(t):o.length>1?(e=[a,a,"",t],n.setFilters.hasOwnProperty(a.toLowerCase())?ua((function(a,e){for(var n,r=o(a,t),i=r.length;i--;)a[n=N(a,r[i])]=!(e[n]=r[i])})):function(a){return o(a,0,e)}):o}},pseudos:{not:ua((function(a){var t=[],e=[],n=s(a.replace(R,"$1"));return n[b]?ua((function(a,t,e,o){for(var r,i=n(a,null,o,[]),s=a.length;s--;)(r=i[s])&&(a[s]=!(t[s]=r))})):function(a,o,r){return t[0]=a,n(t,null,r,e),t[0]=null,!e.pop()}})),has:ua((function(a){return function(t){return sa(a,t).length>0}})),contains:ua((function(a){return a=a.replace(ta,ea),function(t){return(t.textContent||o(t)).indexOf(a)>-1}})),lang:ua((function(a){return U.test(a||"")||sa.error("unsupported lang: "+a),a=a.replace(ta,ea).toLowerCase(),function(t){var e;do{if(e=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===a||0===e.indexOf(a+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var e=a.location&&a.location.hash;return e&&e.slice(1)===t.id},root:function(a){return a===y},focus:function(a){return a===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:ma(!1),disabled:ma(!0),checked:function(a){var t=a.nodeName.toLowerCase();return"input"===t&&!!a.checked||"option"===t&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,!0===a.selected},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!n.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return V.test(a.nodeName)},button:function(a){var t=a.nodeName.toLowerCase();return"input"===t&&"button"===a.type||"button"===t},text:function(a){var t;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(t=a.getAttribute("type"))||"text"===t.toLowerCase())},first:ha((function(){return[0]})),last:ha((function(a,t){return[t-1]})),eq:ha((function(a,t,e){return[e<0?e+t:e]})),even:ha((function(a,t){for(var e=0;e<t;e+=2)a.push(e);return a})),odd:ha((function(a,t){for(var e=1;e<t;e+=2)a.push(e);return a})),lt:ha((function(a,t,e){for(var n=e<0?e+t:e>t?t:e;--n>=0;)a.push(n);return a})),gt:ha((function(a,t,e){for(var n=e<0?e+t:e;++n<t;)a.push(n);return a}))}},n.pseudos.nth=n.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})n.pseudos[t]=pa(t);for(t in{submit:!0,reset:!0})n.pseudos[t]=ya(t);function va(){}function ga(a){for(var t=0,e=a.length,n="";t<e;t++)n+=a[t].value;return n}function ba(a,t,e){var n=t.dir,o=t.next,r=o||n,i=e&&"parentNode"===r,s=x++;return t.first?function(t,e,o){for(;t=t[n];)if(1===t.nodeType||i)return a(t,e,o);return!1}:function(t,e,d){var u,l,c,f=[_,s];if(d){for(;t=t[n];)if((1===t.nodeType||i)&&a(t,e,d))return!0}else for(;t=t[n];)if(1===t.nodeType||i)if(l=(c=t[b]||(t[b]={}))[t.uniqueID]||(c[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[n]||t;else{if((u=l[r])&&u[0]===_&&u[1]===s)return f[2]=u[2];if(l[r]=f,f[2]=a(t,e,d))return!0}return!1}}function Ca(a){return a.length>1?function(t,e,n){for(var o=a.length;o--;)if(!a[o](t,e,n))return!1;return!0}:a[0]}function _a(a,t,e,n,o){for(var r,i=[],s=0,d=a.length,u=null!=t;s<d;s++)(r=a[s])&&(e&&!e(r,n,o)||(i.push(r),u&&t.push(s)));return i}function xa(a,t,e,n,o,r){return n&&!n[b]&&(n=xa(n)),o&&!o[b]&&(o=xa(o,r)),ua((function(r,i,s,d){var u,l,c,f=[],p=[],y=i.length,m=r||function(a,t,e){for(var n=0,o=t.length;n<o;n++)sa(a,t[n],e);return e}(t||"*",s.nodeType?[s]:s,[]),h=!a||!r&&t?m:_a(m,f,a,s,d),A=e?o||(r?a:y||n)?[]:i:h;if(e&&e(h,A,s,d),n)for(u=_a(A,p),n(u,[],s,d),l=u.length;l--;)(c=u[l])&&(A[p[l]]=!(h[p[l]]=c));if(r){if(o||a){if(o){for(u=[],l=A.length;l--;)(c=A[l])&&u.push(h[l]=c);o(null,A=[],u,d)}for(l=A.length;l--;)(c=A[l])&&(u=o?N(r,c):f[l])>-1&&(r[u]=!(i[u]=c))}}else A=_a(A===i?A.splice(y,A.length):A),o?o(null,i,A,d):j.apply(i,A)}))}function wa(a){for(var t,e,o,r=a.length,i=n.relative[a[0].type],s=i||n.relative[" "],d=i?1:0,l=ba((function(a){return a===t}),s,!0),c=ba((function(a){return N(t,a)>-1}),s,!0),f=[function(a,e,n){var o=!i&&(n||e!==u)||((t=e).nodeType?l(a,e,n):c(a,e,n));return t=null,o}];d<r;d++)if(e=n.relative[a[d].type])f=[ba(Ca(f),e)];else{if((e=n.filter[a[d].type].apply(null,a[d].matches))[b]){for(o=++d;o<r&&!n.relative[a[o].type];o++);return xa(d>1&&Ca(f),d>1&&ga(a.slice(0,d-1).concat({value:" "===a[d-2].type?"*":""})).replace(R,"$1"),e,d<o&&wa(a.slice(d,o)),o<r&&wa(a=a.slice(o)),o<r&&ga(a))}f.push(e)}return Ca(f)}return va.prototype=n.filters=n.pseudos,n.setFilters=new va,i=sa.tokenize=function(a,t){var e,o,r,i,s,d,u,l=$[a+" "];if(l)return t?0:l.slice(0);for(s=a,d=[],u=n.preFilter;s;){for(i in e&&!(o=z.exec(s))||(o&&(s=s.slice(o[0].length)||s),d.push(r=[])),e=!1,(o=H.exec(s))&&(e=o.shift(),r.push({value:e,type:o[0].replace(R," ")}),s=s.slice(e.length)),n.filter)!(o=Y[i].exec(s))||u[i]&&!(o=u[i](o))||(e=o.shift(),r.push({value:e,type:i,matches:o}),s=s.slice(e.length));if(!e)break}return t?s.length:s?sa.error(a):$(a,d).slice(0)},s=sa.compile=function(a,t){var e,o=[],r=[],s=B[a+" "];if(!s){for(t||(t=i(a)),e=t.length;e--;)(s=wa(t[e]))[b]?o.push(s):r.push(s);s=B(a,function(a,t){var e=t.length>0,o=a.length>0,r=function(r,i,s,d,l){var c,y,h,A=0,v="0",g=r&&[],b=[],C=u,x=r||o&&n.find.TAG("*",l),w=_+=null==C?1:Math.random()||.1,$=x.length;for(l&&(u=i==p||i||l);v!==$&&null!=(c=x[v]);v++){if(o&&c){for(y=0,i||c.ownerDocument==p||(f(c),s=!m);h=a[y++];)if(h(c,i||p,s)){d.push(c);break}l&&(_=w)}e&&((c=!h&&c)&&A--,r&&g.push(c))}if(A+=v,e&&v!==A){for(y=0;h=t[y++];)h(g,b,i,s);if(r){if(A>0)for(;v--;)g[v]||b[v]||(b[v]=E.call(d));b=_a(b)}j.apply(d,b),l&&!r&&b.length>0&&A+t.length>1&&sa.uniqueSort(d)}return l&&(_=w,u=C),g};return e?ua(r):r}(r,o)),s.selector=a}return s},d=sa.select=function(a,t,e,o){var r,d,u,l,c,f="function"==typeof a&&a,p=!o&&i(a=f.selector||a);if(e=e||[],1===p.length){if((d=p[0]=p[0].slice(0)).length>2&&"ID"===(u=d[0]).type&&9===t.nodeType&&m&&n.relative[d[1].type]){if(!(t=(n.find.ID(u.matches[0].replace(ta,ea),t)||[])[0]))return e;f&&(t=t.parentNode),a=a.slice(d.shift().value.length)}for(r=Y.needsContext.test(a)?0:d.length;r--&&(u=d[r],!n.relative[l=u.type]);)if((c=n.find[l])&&(o=c(u.matches[0].replace(ta,ea),aa.test(d[0].type)&&Aa(t.parentNode)||t))){if(d.splice(r,1),!(a=o.length&&ga(d)))return j.apply(e,o),e;break}}return(f||s(a,p))(o,t,!m,e,!t||aa.test(a)&&Aa(t.parentNode)||t),e},e.sortStable=b.split("").sort(F).join("")===b,e.detectDuplicates=!!c,f(),e.sortDetached=la((function(a){return 1&a.compareDocumentPosition(p.createElement("fieldset"))})),la((function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")}))||ca("type|href|height|width",(function(a,t,e){if(!e)return a.getAttribute(t,"type"===t.toLowerCase()?1:2)})),e.attributes&&la((function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")}))||ca("value",(function(a,t,e){if(!e&&"input"===a.nodeName.toLowerCase())return a.defaultValue})),la((function(a){return null==a.getAttribute("disabled")}))||ca(O,(function(a,t,e){var n;if(!e)return!0===a[t]?t.toLowerCase():(n=a.getAttributeNode(t))&&n.specified?n.value:null})),sa}(n);w.find=B,w.expr=B.selectors,w.expr[":"]=w.expr.pseudos,w.uniqueSort=w.unique=B.uniqueSort,w.text=B.getText,w.isXMLDoc=B.isXML,w.contains=B.contains,w.escapeSelector=B.escape;var k=function(a,t,e){for(var n=[],o=void 0!==e;(a=a[t])&&9!==a.nodeType;)if(1===a.nodeType){if(o&&w(a).is(e))break;n.push(a)}return n},F=function(a,t){for(var e=[];a;a=a.nextSibling)1===a.nodeType&&a!==t&&e.push(a);return e},T=w.expr.match.needsContext;function S(a,t){return a.nodeName&&a.nodeName.toLowerCase()===t.toLowerCase()}var E=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function q(a,t,e){return A(t)?w.grep(a,(function(a,n){return!!t.call(a,n,a)!==e})):t.nodeType?w.grep(a,(function(a){return a===t!==e})):"string"!=typeof t?w.grep(a,(function(a){return l.call(t,a)>-1!==e})):w.filter(t,a,e)}w.filter=function(a,t,e){var n=t[0];return e&&(a=":not("+a+")"),1===t.length&&1===n.nodeType?w.find.matchesSelector(n,a)?[n]:[]:w.find.matches(a,w.grep(t,(function(a){return 1===a.nodeType})))},w.fn.extend({find:function(a){var t,e,n=this.length,o=this;if("string"!=typeof a)return this.pushStack(w(a).filter((function(){for(t=0;t<n;t++)if(w.contains(o[t],this))return!0})));for(e=this.pushStack([]),t=0;t<n;t++)w.find(a,o[t],e);return n>1?w.uniqueSort(e):e},filter:function(a){return this.pushStack(q(this,a||[],!1))},not:function(a){return this.pushStack(q(this,a||[],!0))},is:function(a){return!!q(this,"string"==typeof a&&T.test(a)?w(a):a||[],!1).length}});var j,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(w.fn.init=function(a,t,e){var n,o;if(!a)return this;if(e=e||j,"string"==typeof a){if(!(n="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:D.exec(a))||!n[1]&&t)return!t||t.jquery?(t||e).find(a):this.constructor(t).find(a);if(n[1]){if(t=t instanceof w?t[0]:t,w.merge(this,w.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:g,!0)),E.test(n[1])&&w.isPlainObject(t))for(n in t)A(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return(o=g.getElementById(n[2]))&&(this[0]=o,this.length=1),this}return a.nodeType?(this[0]=a,this.length=1,this):A(a)?void 0!==e.ready?e.ready(a):a(w):w.makeArray(a,this)}).prototype=w.fn,j=w(g);var N=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function M(a,t){for(;(a=a[t])&&1!==a.nodeType;);return a}w.fn.extend({has:function(a){var t=w(a,this),e=t.length;return this.filter((function(){for(var a=0;a<e;a++)if(w.contains(this,t[a]))return!0}))},closest:function(a,t){var e,n=0,o=this.length,r=[],i="string"!=typeof a&&w(a);if(!T.test(a))for(;n<o;n++)for(e=this[n];e&&e!==t;e=e.parentNode)if(e.nodeType<11&&(i?i.index(e)>-1:1===e.nodeType&&w.find.matchesSelector(e,a))){r.push(e);break}return this.pushStack(r.length>1?w.uniqueSort(r):r)},index:function(a){return a?"string"==typeof a?l.call(w(a),this[0]):l.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,t){return this.pushStack(w.uniqueSort(w.merge(this.get(),w(a,t))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}}),w.each({parent:function(a){var t=a.parentNode;return t&&11!==t.nodeType?t:null},parents:function(a){return k(a,"parentNode")},parentsUntil:function(a,t,e){return k(a,"parentNode",e)},next:function(a){return M(a,"nextSibling")},prev:function(a){return M(a,"previousSibling")},nextAll:function(a){return k(a,"nextSibling")},prevAll:function(a){return k(a,"previousSibling")},nextUntil:function(a,t,e){return k(a,"nextSibling",e)},prevUntil:function(a,t,e){return k(a,"previousSibling",e)},siblings:function(a){return F((a.parentNode||{}).firstChild,a)},children:function(a){return F(a.firstChild)},contents:function(a){return null!=a.contentDocument&&i(a.contentDocument)?a.contentDocument:(S(a,"template")&&(a=a.content||a),w.merge([],a.childNodes))}},(function(a,t){w.fn[a]=function(e,n){var o=w.map(this,t,e);return"Until"!==a.slice(-5)&&(n=e),n&&"string"==typeof n&&(o=w.filter(n,o)),this.length>1&&(O[a]||w.uniqueSort(o),N.test(a)&&o.reverse()),this.pushStack(o)}}));var G=/[^\x20\t\r\n\f]+/g;function L(a){return a}function I(a){throw a}function P(a,t,e,n){var o;try{a&&A(o=a.promise)?o.call(a).done(t).fail(e):a&&A(o=a.then)?o.call(a,t,e):t.apply(void 0,[a].slice(n))}catch(a){e.apply(void 0,[a])}}w.Callbacks=function(a){a="string"==typeof a?function(a){var t={};return w.each(a.match(G)||[],(function(a,e){t[e]=!0})),t}(a):w.extend({},a);var t,e,n,o,r=[],i=[],s=-1,d=function(){for(o=o||a.once,n=t=!0;i.length;s=-1)for(e=i.shift();++s<r.length;)!1===r[s].apply(e[0],e[1])&&a.stopOnFalse&&(s=r.length,e=!1);a.memory||(e=!1),t=!1,o&&(r=e?[]:"")},u={add:function(){return r&&(e&&!t&&(s=r.length-1,i.push(e)),function t(e){w.each(e,(function(e,n){A(n)?a.unique&&u.has(n)||r.push(n):n&&n.length&&"string"!==_(n)&&t(n)}))}(arguments),e&&!t&&d()),this},remove:function(){return w.each(arguments,(function(a,t){for(var e;(e=w.inArray(t,r,e))>-1;)r.splice(e,1),e<=s&&s--})),this},has:function(a){return a?w.inArray(a,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=i=[],r=e="",this},disabled:function(){return!r},lock:function(){return o=i=[],e||t||(r=e=""),this},locked:function(){return!!o},fireWith:function(a,e){return o||(e=[a,(e=e||[]).slice?e.slice():e],i.push(e),t||d()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!n}};return u},w.extend({Deferred:function(a){var t=[["notify","progress",w.Callbacks("memory"),w.Callbacks("memory"),2],["resolve","done",w.Callbacks("once memory"),w.Callbacks("once memory"),0,"resolved"],["reject","fail",w.Callbacks("once memory"),w.Callbacks("once memory"),1,"rejected"]],e="pending",o={state:function(){return e},always:function(){return r.done(arguments).fail(arguments),this},catch:function(a){return o.then(null,a)},pipe:function(){var a=arguments;return w.Deferred((function(e){w.each(t,(function(t,n){var o=A(a[n[4]])&&a[n[4]];r[n[1]]((function(){var a=o&&o.apply(this,arguments);a&&A(a.promise)?a.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[n[0]+"With"](this,o?[a]:arguments)}))})),a=null})).promise()},then:function(a,e,o){var r=0;function i(a,t,e,o){return function(){var s=this,d=arguments,u=function(){var n,u;if(!(a<r)){if((n=e.apply(s,d))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,A(u)?o?u.call(n,i(r,t,L,o),i(r,t,I,o)):(r++,u.call(n,i(r,t,L,o),i(r,t,I,o),i(r,t,L,t.notifyWith))):(e!==L&&(s=void 0,d=[n]),(o||t.resolveWith)(s,d))}},l=o?u:function(){try{u()}catch(n){w.Deferred.exceptionHook&&w.Deferred.exceptionHook(n,l.stackTrace),a+1>=r&&(e!==I&&(s=void 0,d=[n]),t.rejectWith(s,d))}};a?l():(w.Deferred.getStackHook&&(l.stackTrace=w.Deferred.getStackHook()),n.setTimeout(l))}}return w.Deferred((function(n){t[0][3].add(i(0,n,A(o)?o:L,n.notifyWith)),t[1][3].add(i(0,n,A(a)?a:L)),t[2][3].add(i(0,n,A(e)?e:I))})).promise()},promise:function(a){return null!=a?w.extend(a,o):o}},r={};return w.each(t,(function(a,n){var i=n[2],s=n[5];o[n[1]]=i.add,s&&i.add((function(){e=s}),t[3-a][2].disable,t[3-a][3].disable,t[0][2].lock,t[0][3].lock),i.add(n[3].fire),r[n[0]]=function(){return r[n[0]+"With"](this===r?void 0:this,arguments),this},r[n[0]+"With"]=i.fireWith})),o.promise(r),a&&a.call(r,r),r},when:function(a){var t=arguments.length,e=t,n=Array(e),o=s.call(arguments),r=w.Deferred(),i=function(a){return function(e){n[a]=this,o[a]=arguments.length>1?s.call(arguments):e,--t||r.resolveWith(n,o)}};if(t<=1&&(P(a,r.done(i(e)).resolve,r.reject,!t),"pending"===r.state()||A(o[e]&&o[e].then)))return r.then();for(;e--;)P(o[e],i(e),r.reject);return r.promise()}});var R=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;w.Deferred.exceptionHook=function(a,t){n.console&&n.console.warn&&a&&R.test(a.name)&&n.console.warn("jQuery.Deferred exception: "+a.message,a.stack,t)},w.readyException=function(a){n.setTimeout((function(){throw a}))};var z=w.Deferred();function H(){g.removeEventListener("DOMContentLoaded",H),n.removeEventListener("load",H),w.ready()}w.fn.ready=function(a){return z.then(a).catch((function(a){w.readyException(a)})),this},w.extend({isReady:!1,readyWait:1,ready:function(a){(!0===a?--w.readyWait:w.isReady)||(w.isReady=!0,!0!==a&&--w.readyWait>0||z.resolveWith(g,[w]))}}),w.ready.then=z.then,"complete"===g.readyState||"loading"!==g.readyState&&!g.documentElement.doScroll?n.setTimeout(w.ready):(g.addEventListener("DOMContentLoaded",H),n.addEventListener("load",H));var W=function(a,t,e,n,o,r,i){var s=0,d=a.length,u=null==e;if("object"===_(e))for(s in o=!0,e)W(a,t,s,e[s],!0,r,i);else if(void 0!==n&&(o=!0,A(n)||(i=!0),u&&(i?(t.call(a,n),t=null):(u=t,t=function(a,t,e){return u.call(w(a),e)})),t))for(;s<d;s++)t(a[s],e,i?n:n.call(a[s],s,t(a[s],e)));return o?a:u?t.call(a):d?t(a[0],e):r},Q=/^-ms-/,U=/-([a-z])/g;function Y(a,t){return t.toUpperCase()}function X(a){return a.replace(Q,"ms-").replace(U,Y)}var V=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function Z(){this.expando=w.expando+Z.uid++}Z.uid=1,Z.prototype={cache:function(a){var t=a[this.expando];return t||(t={},V(a)&&(a.nodeType?a[this.expando]=t:Object.defineProperty(a,this.expando,{value:t,configurable:!0}))),t},set:function(a,t,e){var n,o=this.cache(a);if("string"==typeof t)o[X(t)]=e;else for(n in t)o[X(n)]=t[n];return o},get:function(a,t){return void 0===t?this.cache(a):a[this.expando]&&a[this.expando][X(t)]},access:function(a,t,e){return void 0===t||t&&"string"==typeof t&&void 0===e?this.get(a,t):(this.set(a,t,e),void 0!==e?e:t)},remove:function(a,t){var e,n=a[this.expando];if(void 0!==n){if(void 0!==t){e=(t=Array.isArray(t)?t.map(X):(t=X(t))in n?[t]:t.match(G)||[]).length;for(;e--;)delete n[t[e]]}(void 0===t||w.isEmptyObject(n))&&(a.nodeType?a[this.expando]=void 0:delete a[this.expando])}},hasData:function(a){var t=a[this.expando];return void 0!==t&&!w.isEmptyObject(t)}};var K=new Z,J=new Z,aa=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ta=/[A-Z]/g;function ea(a,t,e){var n;if(void 0===e&&1===a.nodeType)if(n="data-"+t.replace(ta,"-$&").toLowerCase(),"string"==typeof(e=a.getAttribute(n))){try{e=function(a){return"true"===a||"false"!==a&&("null"===a?null:a===+a+""?+a:aa.test(a)?JSON.parse(a):a)}(e)}catch(a){}J.set(a,t,e)}else e=void 0;return e}w.extend({hasData:function(a){return J.hasData(a)||K.hasData(a)},data:function(a,t,e){return J.access(a,t,e)},removeData:function(a,t){J.remove(a,t)},_data:function(a,t,e){return K.access(a,t,e)},_removeData:function(a,t){K.remove(a,t)}}),w.fn.extend({data:function(a,t){var e,n,o,r=this[0],i=r&&r.attributes;if(void 0===a){if(this.length&&(o=J.get(r),1===r.nodeType&&!K.get(r,"hasDataAttrs"))){for(e=i.length;e--;)i[e]&&0===(n=i[e].name).indexOf("data-")&&(n=X(n.slice(5)),ea(r,n,o[n]));K.set(r,"hasDataAttrs",!0)}return o}return"object"==typeof a?this.each((function(){J.set(this,a)})):W(this,(function(t){var e;if(r&&void 0===t)return void 0!==(e=J.get(r,a))||void 0!==(e=ea(r,a))?e:void 0;this.each((function(){J.set(this,a,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(a){return this.each((function(){J.remove(this,a)}))}}),w.extend({queue:function(a,t,e){var n;if(a)return t=(t||"fx")+"queue",n=K.get(a,t),e&&(!n||Array.isArray(e)?n=K.access(a,t,w.makeArray(e)):n.push(e)),n||[]},dequeue:function(a,t){t=t||"fx";var e=w.queue(a,t),n=e.length,o=e.shift(),r=w._queueHooks(a,t);"inprogress"===o&&(o=e.shift(),n--),o&&("fx"===t&&e.unshift("inprogress"),delete r.stop,o.call(a,(function(){w.dequeue(a,t)}),r)),!n&&r&&r.empty.fire()},_queueHooks:function(a,t){var e=t+"queueHooks";return K.get(a,e)||K.access(a,e,{empty:w.Callbacks("once memory").add((function(){K.remove(a,[t+"queue",e])}))})}}),w.fn.extend({queue:function(a,t){var e=2;return"string"!=typeof a&&(t=a,a="fx",e--),arguments.length<e?w.queue(this[0],a):void 0===t?this:this.each((function(){var e=w.queue(this,a,t);w._queueHooks(this,a),"fx"===a&&"inprogress"!==e[0]&&w.dequeue(this,a)}))},dequeue:function(a){return this.each((function(){w.dequeue(this,a)}))},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,t){var e,n=1,o=w.Deferred(),r=this,i=this.length,s=function(){--n||o.resolveWith(r,[r])};for("string"!=typeof a&&(t=a,a=void 0),a=a||"fx";i--;)(e=K.get(r[i],a+"queueHooks"))&&e.empty&&(n++,e.empty.add(s));return s(),o.promise(t)}});var na=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oa=new RegExp("^(?:([+-])=|)("+na+")([a-z%]*)$","i"),ra=["Top","Right","Bottom","Left"],ia=g.documentElement,sa=function(a){return w.contains(a.ownerDocument,a)},da={composed:!0};ia.getRootNode&&(sa=function(a){return w.contains(a.ownerDocument,a)||a.getRootNode(da)===a.ownerDocument});var ua=function(a,t){return"none"===(a=t||a).style.display||""===a.style.display&&sa(a)&&"none"===w.css(a,"display")};function la(a,t,e,n){var o,r,i=20,s=n?function(){return n.cur()}:function(){return w.css(a,t,"")},d=s(),u=e&&e[3]||(w.cssNumber[t]?"":"px"),l=a.nodeType&&(w.cssNumber[t]||"px"!==u&&+d)&&oa.exec(w.css(a,t));if(l&&l[3]!==u){for(d/=2,u=u||l[3],l=+d||1;i--;)w.style(a,t,l+u),(1-r)*(1-(r=s()/d||.5))<=0&&(i=0),l/=r;l*=2,w.style(a,t,l+u),e=e||[]}return e&&(l=+l||+d||0,o=e[1]?l+(e[1]+1)*e[2]:+e[2],n&&(n.unit=u,n.start=l,n.end=o)),o}var ca={};function fa(a){var t,e=a.ownerDocument,n=a.nodeName,o=ca[n];return o||(t=e.body.appendChild(e.createElement(n)),o=w.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),ca[n]=o,o)}function pa(a,t){for(var e,n,o=[],r=0,i=a.length;r<i;r++)(n=a[r]).style&&(e=n.style.display,t?("none"===e&&(o[r]=K.get(n,"display")||null,o[r]||(n.style.display="")),""===n.style.display&&ua(n)&&(o[r]=fa(n))):"none"!==e&&(o[r]="none",K.set(n,"display",e)));for(r=0;r<i;r++)null!=o[r]&&(a[r].style.display=o[r]);return a}w.fn.extend({show:function(){return pa(this,!0)},hide:function(){return pa(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each((function(){ua(this)?w(this).show():w(this).hide()}))}});var ya,ma,ha=/^(?:checkbox|radio)$/i,Aa=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,va=/^$|^module$|\/(?:java|ecma)script/i;ya=g.createDocumentFragment().appendChild(g.createElement("div")),(ma=g.createElement("input")).setAttribute("type","radio"),ma.setAttribute("checked","checked"),ma.setAttribute("name","t"),ya.appendChild(ma),h.checkClone=ya.cloneNode(!0).cloneNode(!0).lastChild.checked,ya.innerHTML="<textarea>x</textarea>",h.noCloneChecked=!!ya.cloneNode(!0).lastChild.defaultValue,ya.innerHTML="<option></option>",h.option=!!ya.lastChild;var ga={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ba(a,t){var e;return e=void 0!==a.getElementsByTagName?a.getElementsByTagName(t||"*"):void 0!==a.querySelectorAll?a.querySelectorAll(t||"*"):[],void 0===t||t&&S(a,t)?w.merge([a],e):e}function Ca(a,t){for(var e=0,n=a.length;e<n;e++)K.set(a[e],"globalEval",!t||K.get(t[e],"globalEval"))}ga.tbody=ga.tfoot=ga.colgroup=ga.caption=ga.thead,ga.th=ga.td,h.option||(ga.optgroup=ga.option=[1,"<select multiple='multiple'>","</select>"]);var _a=/<|&#?\w+;/;function xa(a,t,e,n,o){for(var r,i,s,d,u,l,c=t.createDocumentFragment(),f=[],p=0,y=a.length;p<y;p++)if((r=a[p])||0===r)if("object"===_(r))w.merge(f,r.nodeType?[r]:r);else if(_a.test(r)){for(i=i||c.appendChild(t.createElement("div")),s=(Aa.exec(r)||["",""])[1].toLowerCase(),d=ga[s]||ga._default,i.innerHTML=d[1]+w.htmlPrefilter(r)+d[2],l=d[0];l--;)i=i.lastChild;w.merge(f,i.childNodes),(i=c.firstChild).textContent=""}else f.push(t.createTextNode(r));for(c.textContent="",p=0;r=f[p++];)if(n&&w.inArray(r,n)>-1)o&&o.push(r);else if(u=sa(r),i=ba(c.appendChild(r),"script"),u&&Ca(i),e)for(l=0;r=i[l++];)va.test(r.type||"")&&e.push(r);return c}var wa=/^([^.]*)(?:\.(.+)|)/;function $a(){return!0}function Ba(){return!1}function ka(a,t){return a===function(){try{return g.activeElement}catch(a){}}()==("focus"===t)}function Fa(a,t,e,n,o,r){var i,s;if("object"==typeof t){for(s in"string"!=typeof e&&(n=n||e,e=void 0),t)Fa(a,s,e,n,t[s],r);return a}if(null==n&&null==o?(o=e,n=e=void 0):null==o&&("string"==typeof e?(o=n,n=void 0):(o=n,n=e,e=void 0)),!1===o)o=Ba;else if(!o)return a;return 1===r&&(i=o,o=function(a){return w().off(a),i.apply(this,arguments)},o.guid=i.guid||(i.guid=w.guid++)),a.each((function(){w.event.add(this,t,o,n,e)}))}function Ta(a,t,e){e?(K.set(a,t,!1),w.event.add(a,t,{namespace:!1,handler:function(a){var n,o,r=K.get(this,t);if(1&a.isTrigger&&this[t]){if(r.length)(w.event.special[t]||{}).delegateType&&a.stopPropagation();else if(r=s.call(arguments),K.set(this,t,r),n=e(this,t),this[t](),r!==(o=K.get(this,t))||n?K.set(this,t,!1):o={},r!==o)return a.stopImmediatePropagation(),a.preventDefault(),o&&o.value}else r.length&&(K.set(this,t,{value:w.event.trigger(w.extend(r[0],w.Event.prototype),r.slice(1),this)}),a.stopImmediatePropagation())}})):void 0===K.get(a,t)&&w.event.add(a,t,$a)}w.event={global:{},add:function(a,t,e,n,o){var r,i,s,d,u,l,c,f,p,y,m,h=K.get(a);if(V(a))for(e.handler&&(e=(r=e).handler,o=r.selector),o&&w.find.matchesSelector(ia,o),e.guid||(e.guid=w.guid++),(d=h.events)||(d=h.events=Object.create(null)),(i=h.handle)||(i=h.handle=function(t){return void 0!==w&&w.event.triggered!==t.type?w.event.dispatch.apply(a,arguments):void 0}),u=(t=(t||"").match(G)||[""]).length;u--;)p=m=(s=wa.exec(t[u])||[])[1],y=(s[2]||"").split(".").sort(),p&&(c=w.event.special[p]||{},p=(o?c.delegateType:c.bindType)||p,c=w.event.special[p]||{},l=w.extend({type:p,origType:m,data:n,handler:e,guid:e.guid,selector:o,needsContext:o&&w.expr.match.needsContext.test(o),namespace:y.join(".")},r),(f=d[p])||((f=d[p]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(a,n,y,i)||a.addEventListener&&a.addEventListener(p,i)),c.add&&(c.add.call(a,l),l.handler.guid||(l.handler.guid=e.guid)),o?f.splice(f.delegateCount++,0,l):f.push(l),w.event.global[p]=!0)},remove:function(a,t,e,n,o){var r,i,s,d,u,l,c,f,p,y,m,h=K.hasData(a)&&K.get(a);if(h&&(d=h.events)){for(u=(t=(t||"").match(G)||[""]).length;u--;)if(p=m=(s=wa.exec(t[u])||[])[1],y=(s[2]||"").split(".").sort(),p){for(c=w.event.special[p]||{},f=d[p=(n?c.delegateType:c.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+y.join("\\.(?:.*\\.|)")+"(\\.|$)"),i=r=f.length;r--;)l=f[r],!o&&m!==l.origType||e&&e.guid!==l.guid||s&&!s.test(l.namespace)||n&&n!==l.selector&&("**"!==n||!l.selector)||(f.splice(r,1),l.selector&&f.delegateCount--,c.remove&&c.remove.call(a,l));i&&!f.length&&(c.teardown&&!1!==c.teardown.call(a,y,h.handle)||w.removeEvent(a,p,h.handle),delete d[p])}else for(p in d)w.event.remove(a,p+t[u],e,n,!0);w.isEmptyObject(d)&&K.remove(a,"handle events")}},dispatch:function(a){var t,e,n,o,r,i,s=new Array(arguments.length),d=w.event.fix(a),u=(K.get(this,"events")||Object.create(null))[d.type]||[],l=w.event.special[d.type]||{};for(s[0]=d,t=1;t<arguments.length;t++)s[t]=arguments[t];if(d.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,d)){for(i=w.event.handlers.call(this,d,u),t=0;(o=i[t++])&&!d.isPropagationStopped();)for(d.currentTarget=o.elem,e=0;(r=o.handlers[e++])&&!d.isImmediatePropagationStopped();)d.rnamespace&&!1!==r.namespace&&!d.rnamespace.test(r.namespace)||(d.handleObj=r,d.data=r.data,void 0!==(n=((w.event.special[r.origType]||{}).handle||r.handler).apply(o.elem,s))&&!1===(d.result=n)&&(d.preventDefault(),d.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,d),d.result}},handlers:function(a,t){var e,n,o,r,i,s=[],d=t.delegateCount,u=a.target;if(d&&u.nodeType&&!("click"===a.type&&a.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==a.type||!0!==u.disabled)){for(r=[],i={},e=0;e<d;e++)void 0===i[o=(n=t[e]).selector+" "]&&(i[o]=n.needsContext?w(o,this).index(u)>-1:w.find(o,this,null,[u]).length),i[o]&&r.push(n);r.length&&s.push({elem:u,handlers:r})}return u=this,d<t.length&&s.push({elem:u,handlers:t.slice(d)}),s},addProp:function(a,t){Object.defineProperty(w.Event.prototype,a,{enumerable:!0,configurable:!0,get:A(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[a]},set:function(t){Object.defineProperty(this,a,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(a){return a[w.expando]?a:new w.Event(a)},special:{load:{noBubble:!0},click:{setup:function(a){var t=this||a;return ha.test(t.type)&&t.click&&S(t,"input")&&Ta(t,"click",$a),!1},trigger:function(a){var t=this||a;return ha.test(t.type)&&t.click&&S(t,"input")&&Ta(t,"click"),!0},_default:function(a){var t=a.target;return ha.test(t.type)&&t.click&&S(t,"input")&&K.get(t,"click")||S(t,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}}},w.removeEvent=function(a,t,e){a.removeEventListener&&a.removeEventListener(t,e)},w.Event=function(a,t){if(!(this instanceof w.Event))return new w.Event(a,t);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&!1===a.returnValue?$a:Ba,this.target=a.target&&3===a.target.nodeType?a.target.parentNode:a.target,this.currentTarget=a.currentTarget,this.relatedTarget=a.relatedTarget):this.type=a,t&&w.extend(this,t),this.timeStamp=a&&a.timeStamp||Date.now(),this[w.expando]=!0},w.Event.prototype={constructor:w.Event,isDefaultPrevented:Ba,isPropagationStopped:Ba,isImmediatePropagationStopped:Ba,isSimulated:!1,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=$a,a&&!this.isSimulated&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=$a,a&&!this.isSimulated&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=$a,a&&!this.isSimulated&&a.stopImmediatePropagation(),this.stopPropagation()}},w.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},w.event.addProp),w.each({focus:"focusin",blur:"focusout"},(function(a,t){w.event.special[a]={setup:function(){return Ta(this,a,ka),!1},trigger:function(){return Ta(this,a),!0},_default:function(){return!0},delegateType:t}})),w.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(a,t){w.event.special[a]={delegateType:t,bindType:t,handle:function(a){var e,n=this,o=a.relatedTarget,r=a.handleObj;return o&&(o===n||w.contains(n,o))||(a.type=r.origType,e=r.handler.apply(this,arguments),a.type=t),e}}})),w.fn.extend({on:function(a,t,e,n){return Fa(this,a,t,e,n)},one:function(a,t,e,n){return Fa(this,a,t,e,n,1)},off:function(a,t,e){var n,o;if(a&&a.preventDefault&&a.handleObj)return n=a.handleObj,w(a.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof a){for(o in a)this.off(o,t,a[o]);return this}return!1!==t&&"function"!=typeof t||(e=t,t=void 0),!1===e&&(e=Ba),this.each((function(){w.event.remove(this,a,e,t)}))}});var Sa=/<script|<style|<link/i,Ea=/checked\s*(?:[^=]|=\s*.checked.)/i,qa=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function ja(a,t){return S(a,"table")&&S(11!==t.nodeType?t:t.firstChild,"tr")&&w(a).children("tbody")[0]||a}function Da(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function Na(a){return"true/"===(a.type||"").slice(0,5)?a.type=a.type.slice(5):a.removeAttribute("type"),a}function Oa(a,t){var e,n,o,r,i,s;if(1===t.nodeType){if(K.hasData(a)&&(s=K.get(a).events))for(o in K.remove(t,"handle events"),s)for(e=0,n=s[o].length;e<n;e++)w.event.add(t,o,s[o][e]);J.hasData(a)&&(r=J.access(a),i=w.extend({},r),J.set(t,i))}}function Ma(a,t){var e=t.nodeName.toLowerCase();"input"===e&&ha.test(a.type)?t.checked=a.checked:"input"!==e&&"textarea"!==e||(t.defaultValue=a.defaultValue)}function Ga(a,t,e,n){t=d(t);var o,r,i,s,u,l,c=0,f=a.length,p=f-1,y=t[0],m=A(y);if(m||f>1&&"string"==typeof y&&!h.checkClone&&Ea.test(y))return a.each((function(o){var r=a.eq(o);m&&(t[0]=y.call(this,o,r.html())),Ga(r,t,e,n)}));if(f&&(r=(o=xa(t,a[0].ownerDocument,!1,a,n)).firstChild,1===o.childNodes.length&&(o=r),r||n)){for(s=(i=w.map(ba(o,"script"),Da)).length;c<f;c++)u=o,c!==p&&(u=w.clone(u,!0,!0),s&&w.merge(i,ba(u,"script"))),e.call(a[c],u,c);if(s)for(l=i[i.length-1].ownerDocument,w.map(i,Na),c=0;c<s;c++)u=i[c],va.test(u.type||"")&&!K.access(u,"globalEval")&&w.contains(l,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?w._evalUrl&&!u.noModule&&w._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},l):C(u.textContent.replace(qa,""),u,l))}return a}function La(a,t,e){for(var n,o=t?w.filter(t,a):a,r=0;null!=(n=o[r]);r++)e||1!==n.nodeType||w.cleanData(ba(n)),n.parentNode&&(e&&sa(n)&&Ca(ba(n,"script")),n.parentNode.removeChild(n));return a}w.extend({htmlPrefilter:function(a){return a},clone:function(a,t,e){var n,o,r,i,s=a.cloneNode(!0),d=sa(a);if(!(h.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||w.isXMLDoc(a)))for(i=ba(s),n=0,o=(r=ba(a)).length;n<o;n++)Ma(r[n],i[n]);if(t)if(e)for(r=r||ba(a),i=i||ba(s),n=0,o=r.length;n<o;n++)Oa(r[n],i[n]);else Oa(a,s);return(i=ba(s,"script")).length>0&&Ca(i,!d&&ba(a,"script")),s},cleanData:function(a){for(var t,e,n,o=w.event.special,r=0;void 0!==(e=a[r]);r++)if(V(e)){if(t=e[K.expando]){if(t.events)for(n in t.events)o[n]?w.event.remove(e,n):w.removeEvent(e,n,t.handle);e[K.expando]=void 0}e[J.expando]&&(e[J.expando]=void 0)}}}),w.fn.extend({detach:function(a){return La(this,a,!0)},remove:function(a){return La(this,a)},text:function(a){return W(this,(function(a){return void 0===a?w.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=a)}))}),null,a,arguments.length)},append:function(){return Ga(this,arguments,(function(a){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||ja(this,a).appendChild(a)}))},prepend:function(){return Ga(this,arguments,(function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=ja(this,a);t.insertBefore(a,t.firstChild)}}))},before:function(){return Ga(this,arguments,(function(a){this.parentNode&&this.parentNode.insertBefore(a,this)}))},after:function(){return Ga(this,arguments,(function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)}))},empty:function(){for(var a,t=0;null!=(a=this[t]);t++)1===a.nodeType&&(w.cleanData(ba(a,!1)),a.textContent="");return this},clone:function(a,t){return a=null!=a&&a,t=null==t?a:t,this.map((function(){return w.clone(this,a,t)}))},html:function(a){return W(this,(function(a){var t=this[0]||{},e=0,n=this.length;if(void 0===a&&1===t.nodeType)return t.innerHTML;if("string"==typeof a&&!Sa.test(a)&&!ga[(Aa.exec(a)||["",""])[1].toLowerCase()]){a=w.htmlPrefilter(a);try{for(;e<n;e++)1===(t=this[e]||{}).nodeType&&(w.cleanData(ba(t,!1)),t.innerHTML=a);t=0}catch(a){}}t&&this.empty().append(a)}),null,a,arguments.length)},replaceWith:function(){var a=[];return Ga(this,arguments,(function(t){var e=this.parentNode;w.inArray(this,a)<0&&(w.cleanData(ba(this)),e&&e.replaceChild(t,this))}),a)}}),w.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(a,t){w.fn[a]=function(a){for(var e,n=[],o=w(a),r=o.length-1,i=0;i<=r;i++)e=i===r?this:this.clone(!0),w(o[i])[t](e),u.apply(n,e.get());return this.pushStack(n)}}));var Ia=new RegExp("^("+na+")(?!px)[a-z%]+$","i"),Pa=function(a){var t=a.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(a)},Ra=function(a,t,e){var n,o,r={};for(o in t)r[o]=a.style[o],a.style[o]=t[o];for(o in n=e.call(a),t)a.style[o]=r[o];return n},za=new RegExp(ra.join("|"),"i");function Ha(a,t,e){var n,o,r,i,s=a.style;return(e=e||Pa(a))&&(""!==(i=e.getPropertyValue(t)||e[t])||sa(a)||(i=w.style(a,t)),!h.pixelBoxStyles()&&Ia.test(i)&&za.test(t)&&(n=s.width,o=s.minWidth,r=s.maxWidth,s.minWidth=s.maxWidth=s.width=i,i=e.width,s.width=n,s.minWidth=o,s.maxWidth=r)),void 0!==i?i+"":i}function Wa(a,t){return{get:function(){if(!a())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function a(){if(l){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ia.appendChild(u).appendChild(l);var a=n.getComputedStyle(l);e="1%"!==a.top,d=12===t(a.marginLeft),l.style.right="60%",i=36===t(a.right),o=36===t(a.width),l.style.position="absolute",r=12===t(l.offsetWidth/3),ia.removeChild(u),l=null}}function t(a){return Math.round(parseFloat(a))}var e,o,r,i,s,d,u=g.createElement("div"),l=g.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===l.style.backgroundClip,w.extend(h,{boxSizingReliable:function(){return a(),o},pixelBoxStyles:function(){return a(),i},pixelPosition:function(){return a(),e},reliableMarginLeft:function(){return a(),d},scrollboxSize:function(){return a(),r},reliableTrDimensions:function(){var a,t,e,o;return null==s&&(a=g.createElement("table"),t=g.createElement("tr"),e=g.createElement("div"),a.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",e.style.height="9px",e.style.display="block",ia.appendChild(a).appendChild(t).appendChild(e),o=n.getComputedStyle(t),s=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===t.offsetHeight,ia.removeChild(a)),s}}))}();var Qa=["Webkit","Moz","ms"],Ua=g.createElement("div").style,Ya={};function Xa(a){return w.cssProps[a]||Ya[a]||(a in Ua?a:Ya[a]=function(a){for(var t=a[0].toUpperCase()+a.slice(1),e=Qa.length;e--;)if((a=Qa[e]+t)in Ua)return a}(a)||a)}var Va=/^(none|table(?!-c[ea]).+)/,Za=/^--/,Ka={position:"absolute",visibility:"hidden",display:"block"},Ja={letterSpacing:"0",fontWeight:"400"};function at(a,t,e){var n=oa.exec(t);return n?Math.max(0,n[2]-(e||0))+(n[3]||"px"):t}function tt(a,t,e,n,o,r){var i="width"===t?1:0,s=0,d=0;if(e===(n?"border":"content"))return 0;for(;i<4;i+=2)"margin"===e&&(d+=w.css(a,e+ra[i],!0,o)),n?("content"===e&&(d-=w.css(a,"padding"+ra[i],!0,o)),"margin"!==e&&(d-=w.css(a,"border"+ra[i]+"Width",!0,o))):(d+=w.css(a,"padding"+ra[i],!0,o),"padding"!==e?d+=w.css(a,"border"+ra[i]+"Width",!0,o):s+=w.css(a,"border"+ra[i]+"Width",!0,o));return!n&&r>=0&&(d+=Math.max(0,Math.ceil(a["offset"+t[0].toUpperCase()+t.slice(1)]-r-d-s-.5))||0),d}function et(a,t,e){var n=Pa(a),o=(!h.boxSizingReliable()||e)&&"border-box"===w.css(a,"boxSizing",!1,n),r=o,i=Ha(a,t,n),s="offset"+t[0].toUpperCase()+t.slice(1);if(Ia.test(i)){if(!e)return i;i="auto"}return(!h.boxSizingReliable()&&o||!h.reliableTrDimensions()&&S(a,"tr")||"auto"===i||!parseFloat(i)&&"inline"===w.css(a,"display",!1,n))&&a.getClientRects().length&&(o="border-box"===w.css(a,"boxSizing",!1,n),(r=s in a)&&(i=a[s])),(i=parseFloat(i)||0)+tt(a,t,e||(o?"border":"content"),r,n,i)+"px"}function nt(a,t,e,n,o){return new nt.prototype.init(a,t,e,n,o)}w.extend({cssHooks:{opacity:{get:function(a,t){if(t){var e=Ha(a,"opacity");return""===e?"1":e}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(a,t,e,n){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var o,r,i,s=X(t),d=Za.test(t),u=a.style;if(d||(t=Xa(s)),i=w.cssHooks[t]||w.cssHooks[s],void 0===e)return i&&"get"in i&&void 0!==(o=i.get(a,!1,n))?o:u[t];"string"==(r=typeof e)&&(o=oa.exec(e))&&o[1]&&(e=la(a,t,o),r="number"),null!=e&&e==e&&("number"!==r||d||(e+=o&&o[3]||(w.cssNumber[s]?"":"px")),h.clearCloneStyle||""!==e||0!==t.indexOf("background")||(u[t]="inherit"),i&&"set"in i&&void 0===(e=i.set(a,e,n))||(d?u.setProperty(t,e):u[t]=e))}},css:function(a,t,e,n){var o,r,i,s=X(t);return Za.test(t)||(t=Xa(s)),(i=w.cssHooks[t]||w.cssHooks[s])&&"get"in i&&(o=i.get(a,!0,e)),void 0===o&&(o=Ha(a,t,n)),"normal"===o&&t in Ja&&(o=Ja[t]),""===e||e?(r=parseFloat(o),!0===e||isFinite(r)?r||0:o):o}}),w.each(["height","width"],(function(a,t){w.cssHooks[t]={get:function(a,e,n){if(e)return!Va.test(w.css(a,"display"))||a.getClientRects().length&&a.getBoundingClientRect().width?et(a,t,n):Ra(a,Ka,(function(){return et(a,t,n)}))},set:function(a,e,n){var o,r=Pa(a),i=!h.scrollboxSize()&&"absolute"===r.position,s=(i||n)&&"border-box"===w.css(a,"boxSizing",!1,r),d=n?tt(a,t,n,s,r):0;return s&&i&&(d-=Math.ceil(a["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(r[t])-tt(a,t,"border",!1,r)-.5)),d&&(o=oa.exec(e))&&"px"!==(o[3]||"px")&&(a.style[t]=e,e=w.css(a,t)),at(0,e,d)}}})),w.cssHooks.marginLeft=Wa(h.reliableMarginLeft,(function(a,t){if(t)return(parseFloat(Ha(a,"marginLeft"))||a.getBoundingClientRect().left-Ra(a,{marginLeft:0},(function(){return a.getBoundingClientRect().left})))+"px"})),w.each({margin:"",padding:"",border:"Width"},(function(a,t){w.cssHooks[a+t]={expand:function(e){for(var n=0,o={},r="string"==typeof e?e.split(" "):[e];n<4;n++)o[a+ra[n]+t]=r[n]||r[n-2]||r[0];return o}},"margin"!==a&&(w.cssHooks[a+t].set=at)})),w.fn.extend({css:function(a,t){return W(this,(function(a,t,e){var n,o,r={},i=0;if(Array.isArray(t)){for(n=Pa(a),o=t.length;i<o;i++)r[t[i]]=w.css(a,t[i],!1,n);return r}return void 0!==e?w.style(a,t,e):w.css(a,t)}),a,t,arguments.length>1)}}),w.Tween=nt,nt.prototype={constructor:nt,init:function(a,t,e,n,o,r){this.elem=a,this.prop=e,this.easing=o||w.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=r||(w.cssNumber[e]?"":"px")},cur:function(){var a=nt.propHooks[this.prop];return a&&a.get?a.get(this):nt.propHooks._default.get(this)},run:function(a){var t,e=nt.propHooks[this.prop];return this.options.duration?this.pos=t=w.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=t=a,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),e&&e.set?e.set(this):nt.propHooks._default.set(this),this}},nt.prototype.init.prototype=nt.prototype,nt.propHooks={_default:{get:function(a){var t;return 1!==a.elem.nodeType||null!=a.elem[a.prop]&&null==a.elem.style[a.prop]?a.elem[a.prop]:(t=w.css(a.elem,a.prop,""))&&"auto"!==t?t:0},set:function(a){w.fx.step[a.prop]?w.fx.step[a.prop](a):1!==a.elem.nodeType||!w.cssHooks[a.prop]&&null==a.elem.style[Xa(a.prop)]?a.elem[a.prop]=a.now:w.style(a.elem,a.prop,a.now+a.unit)}}},nt.propHooks.scrollTop=nt.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},w.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2},_default:"swing"},w.fx=nt.prototype.init,w.fx.step={};var ot,rt,it=/^(?:toggle|show|hide)$/,st=/queueHooks$/;function dt(){rt&&(!1===g.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(dt):n.setTimeout(dt,w.fx.interval),w.fx.tick())}function ut(){return n.setTimeout((function(){ot=void 0})),ot=Date.now()}function lt(a,t){var e,n=0,o={height:a};for(t=t?1:0;n<4;n+=2-t)o["margin"+(e=ra[n])]=o["padding"+e]=a;return t&&(o.opacity=o.width=a),o}function ct(a,t,e){for(var n,o=(ft.tweeners[t]||[]).concat(ft.tweeners["*"]),r=0,i=o.length;r<i;r++)if(n=o[r].call(e,t,a))return n}function ft(a,t,e){var n,o,r=0,i=ft.prefilters.length,s=w.Deferred().always((function(){delete d.elem})),d=function(){if(o)return!1;for(var t=ot||ut(),e=Math.max(0,u.startTime+u.duration-t),n=1-(e/u.duration||0),r=0,i=u.tweens.length;r<i;r++)u.tweens[r].run(n);return s.notifyWith(a,[u,n,e]),n<1&&i?e:(i||s.notifyWith(a,[u,1,0]),s.resolveWith(a,[u]),!1)},u=s.promise({elem:a,props:w.extend({},t),opts:w.extend(!0,{specialEasing:{},easing:w.easing._default},e),originalProperties:t,originalOptions:e,startTime:ot||ut(),duration:e.duration,tweens:[],createTween:function(t,e){var n=w.Tween(a,u.opts,t,e,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(n),n},stop:function(t){var e=0,n=t?u.tweens.length:0;if(o)return this;for(o=!0;e<n;e++)u.tweens[e].run(1);return t?(s.notifyWith(a,[u,1,0]),s.resolveWith(a,[u,t])):s.rejectWith(a,[u,t]),this}}),l=u.props;for(function(a,t){var e,n,o,r,i;for(e in a)if(o=t[n=X(e)],r=a[e],Array.isArray(r)&&(o=r[1],r=a[e]=r[0]),e!==n&&(a[n]=r,delete a[e]),(i=w.cssHooks[n])&&"expand"in i)for(e in r=i.expand(r),delete a[n],r)e in a||(a[e]=r[e],t[e]=o);else t[n]=o}(l,u.opts.specialEasing);r<i;r++)if(n=ft.prefilters[r].call(u,a,l,u.opts))return A(n.stop)&&(w._queueHooks(u.elem,u.opts.queue).stop=n.stop.bind(n)),n;return w.map(l,ct,u),A(u.opts.start)&&u.opts.start.call(a,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),w.fx.timer(w.extend(d,{elem:a,anim:u,queue:u.opts.queue})),u}w.Animation=w.extend(ft,{tweeners:{"*":[function(a,t){var e=this.createTween(a,t);return la(e.elem,a,oa.exec(t),e),e}]},tweener:function(a,t){A(a)?(t=a,a=["*"]):a=a.match(G);for(var e,n=0,o=a.length;n<o;n++)e=a[n],ft.tweeners[e]=ft.tweeners[e]||[],ft.tweeners[e].unshift(t)},prefilters:[function(a,t,e){var n,o,r,i,s,d,u,l,c="width"in t||"height"in t,f=this,p={},y=a.style,m=a.nodeType&&ua(a),h=K.get(a,"fxshow");for(n in e.queue||(null==(i=w._queueHooks(a,"fx")).unqueued&&(i.unqueued=0,s=i.empty.fire,i.empty.fire=function(){i.unqueued||s()}),i.unqueued++,f.always((function(){f.always((function(){i.unqueued--,w.queue(a,"fx").length||i.empty.fire()}))}))),t)if(o=t[n],it.test(o)){if(delete t[n],r=r||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!h||void 0===h[n])continue;m=!0}p[n]=h&&h[n]||w.style(a,n)}if((d=!w.isEmptyObject(t))||!w.isEmptyObject(p))for(n in c&&1===a.nodeType&&(e.overflow=[y.overflow,y.overflowX,y.overflowY],null==(u=h&&h.display)&&(u=K.get(a,"display")),"none"===(l=w.css(a,"display"))&&(u?l=u:(pa([a],!0),u=a.style.display||u,l=w.css(a,"display"),pa([a]))),("inline"===l||"inline-block"===l&&null!=u)&&"none"===w.css(a,"float")&&(d||(f.done((function(){y.display=u})),null==u&&(l=y.display,u="none"===l?"":l)),y.display="inline-block")),e.overflow&&(y.overflow="hidden",f.always((function(){y.overflow=e.overflow[0],y.overflowX=e.overflow[1],y.overflowY=e.overflow[2]}))),d=!1,p)d||(h?"hidden"in h&&(m=h.hidden):h=K.access(a,"fxshow",{display:u}),r&&(h.hidden=!m),m&&pa([a],!0),f.done((function(){for(n in m||pa([a]),K.remove(a,"fxshow"),p)w.style(a,n,p[n])}))),d=ct(m?h[n]:0,n,f),n in h||(h[n]=d.start,m&&(d.end=d.start,d.start=0))}],prefilter:function(a,t){t?ft.prefilters.unshift(a):ft.prefilters.push(a)}}),w.speed=function(a,t,e){var n=a&&"object"==typeof a?w.extend({},a):{complete:e||!e&&t||A(a)&&a,duration:a,easing:e&&t||t&&!A(t)&&t};return w.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in w.fx.speeds?n.duration=w.fx.speeds[n.duration]:n.duration=w.fx.speeds._default),null!=n.queue&&!0!==n.queue||(n.queue="fx"),n.old=n.complete,n.complete=function(){A(n.old)&&n.old.call(this),n.queue&&w.dequeue(this,n.queue)},n},w.fn.extend({fadeTo:function(a,t,e,n){return this.filter(ua).css("opacity",0).show().end().animate({opacity:t},a,e,n)},animate:function(a,t,e,n){var o=w.isEmptyObject(a),r=w.speed(t,e,n),i=function(){var t=ft(this,w.extend({},a),r);(o||K.get(this,"finish"))&&t.stop(!0)};return i.finish=i,o||!1===r.queue?this.each(i):this.queue(r.queue,i)},stop:function(a,t,e){var n=function(a){var t=a.stop;delete a.stop,t(e)};return"string"!=typeof a&&(e=t,t=a,a=void 0),t&&this.queue(a||"fx",[]),this.each((function(){var t=!0,o=null!=a&&a+"queueHooks",r=w.timers,i=K.get(this);if(o)i[o]&&i[o].stop&&n(i[o]);else for(o in i)i[o]&&i[o].stop&&st.test(o)&&n(i[o]);for(o=r.length;o--;)r[o].elem!==this||null!=a&&r[o].queue!==a||(r[o].anim.stop(e),t=!1,r.splice(o,1));!t&&e||w.dequeue(this,a)}))},finish:function(a){return!1!==a&&(a=a||"fx"),this.each((function(){var t,e=K.get(this),n=e[a+"queue"],o=e[a+"queueHooks"],r=w.timers,i=n?n.length:0;for(e.finish=!0,w.queue(this,a,[]),o&&o.stop&&o.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===a&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<i;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete e.finish}))}}),w.each(["toggle","show","hide"],(function(a,t){var e=w.fn[t];w.fn[t]=function(a,n,o){return null==a||"boolean"==typeof a?e.apply(this,arguments):this.animate(lt(t,!0),a,n,o)}})),w.each({slideDown:lt("show"),slideUp:lt("hide"),slideToggle:lt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(a,t){w.fn[a]=function(a,e,n){return this.animate(t,a,e,n)}})),w.timers=[],w.fx.tick=function(){var a,t=0,e=w.timers;for(ot=Date.now();t<e.length;t++)(a=e[t])()||e[t]!==a||e.splice(t--,1);e.length||w.fx.stop(),ot=void 0},w.fx.timer=function(a){w.timers.push(a),w.fx.start()},w.fx.interval=13,w.fx.start=function(){rt||(rt=!0,dt())},w.fx.stop=function(){rt=null},w.fx.speeds={slow:600,fast:200,_default:400},w.fn.delay=function(a,t){return a=w.fx&&w.fx.speeds[a]||a,t=t||"fx",this.queue(t,(function(t,e){var o=n.setTimeout(t,a);e.stop=function(){n.clearTimeout(o)}}))},function(){var a=g.createElement("input"),t=g.createElement("select").appendChild(g.createElement("option"));a.type="checkbox",h.checkOn=""!==a.value,h.optSelected=t.selected,(a=g.createElement("input")).value="t",a.type="radio",h.radioValue="t"===a.value}();var pt,yt=w.expr.attrHandle;w.fn.extend({attr:function(a,t){return W(this,w.attr,a,t,arguments.length>1)},removeAttr:function(a){return this.each((function(){w.removeAttr(this,a)}))}}),w.extend({attr:function(a,t,e){var n,o,r=a.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===a.getAttribute?w.prop(a,t,e):(1===r&&w.isXMLDoc(a)||(o=w.attrHooks[t.toLowerCase()]||(w.expr.match.bool.test(t)?pt:void 0)),void 0!==e?null===e?void w.removeAttr(a,t):o&&"set"in o&&void 0!==(n=o.set(a,e,t))?n:(a.setAttribute(t,e+""),e):o&&"get"in o&&null!==(n=o.get(a,t))?n:null==(n=w.find.attr(a,t))?void 0:n)},attrHooks:{type:{set:function(a,t){if(!h.radioValue&&"radio"===t&&S(a,"input")){var e=a.value;return a.setAttribute("type",t),e&&(a.value=e),t}}}},removeAttr:function(a,t){var e,n=0,o=t&&t.match(G);if(o&&1===a.nodeType)for(;e=o[n++];)a.removeAttribute(e)}}),pt={set:function(a,t,e){return!1===t?w.removeAttr(a,e):a.setAttribute(e,e),e}},w.each(w.expr.match.bool.source.match(/\w+/g),(function(a,t){var e=yt[t]||w.find.attr;yt[t]=function(a,t,n){var o,r,i=t.toLowerCase();return n||(r=yt[i],yt[i]=o,o=null!=e(a,t,n)?i:null,yt[i]=r),o}}));var mt=/^(?:input|select|textarea|button)$/i,ht=/^(?:a|area)$/i;function At(a){return(a.match(G)||[]).join(" ")}function vt(a){return a.getAttribute&&a.getAttribute("class")||""}function gt(a){return Array.isArray(a)?a:"string"==typeof a&&a.match(G)||[]}w.fn.extend({prop:function(a,t){return W(this,w.prop,a,t,arguments.length>1)},removeProp:function(a){return this.each((function(){delete this[w.propFix[a]||a]}))}}),w.extend({prop:function(a,t,e){var n,o,r=a.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&w.isXMLDoc(a)||(t=w.propFix[t]||t,o=w.propHooks[t]),void 0!==e?o&&"set"in o&&void 0!==(n=o.set(a,e,t))?n:a[t]=e:o&&"get"in o&&null!==(n=o.get(a,t))?n:a[t]},propHooks:{tabIndex:{get:function(a){var t=w.find.attr(a,"tabindex");return t?parseInt(t,10):mt.test(a.nodeName)||ht.test(a.nodeName)&&a.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),h.optSelected||(w.propHooks.selected={get:function(a){var t=a.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(a){var t=a.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),w.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){w.propFix[this.toLowerCase()]=this})),w.fn.extend({addClass:function(a){var t,e,n,o,r,i,s,d=0;if(A(a))return this.each((function(t){w(this).addClass(a.call(this,t,vt(this)))}));if((t=gt(a)).length)for(;e=this[d++];)if(o=vt(e),n=1===e.nodeType&&" "+At(o)+" "){for(i=0;r=t[i++];)n.indexOf(" "+r+" ")<0&&(n+=r+" ");o!==(s=At(n))&&e.setAttribute("class",s)}return this},removeClass:function(a){var t,e,n,o,r,i,s,d=0;if(A(a))return this.each((function(t){w(this).removeClass(a.call(this,t,vt(this)))}));if(!arguments.length)return this.attr("class","");if((t=gt(a)).length)for(;e=this[d++];)if(o=vt(e),n=1===e.nodeType&&" "+At(o)+" "){for(i=0;r=t[i++];)for(;n.indexOf(" "+r+" ")>-1;)n=n.replace(" "+r+" "," ");o!==(s=At(n))&&e.setAttribute("class",s)}return this},toggleClass:function(a,t){var e=typeof a,n="string"===e||Array.isArray(a);return"boolean"==typeof t&&n?t?this.addClass(a):this.removeClass(a):A(a)?this.each((function(e){w(this).toggleClass(a.call(this,e,vt(this),t),t)})):this.each((function(){var t,o,r,i;if(n)for(o=0,r=w(this),i=gt(a);t=i[o++];)r.hasClass(t)?r.removeClass(t):r.addClass(t);else void 0!==a&&"boolean"!==e||((t=vt(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===a?"":K.get(this,"__className__")||""))}))},hasClass:function(a){var t,e,n=0;for(t=" "+a+" ";e=this[n++];)if(1===e.nodeType&&(" "+At(vt(e))+" ").indexOf(t)>-1)return!0;return!1}});var bt=/\r/g;w.fn.extend({val:function(a){var t,e,n,o=this[0];return arguments.length?(n=A(a),this.each((function(e){var o;1===this.nodeType&&(null==(o=n?a.call(this,e,w(this).val()):a)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=w.map(o,(function(a){return null==a?"":a+""}))),(t=w.valHooks[this.type]||w.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=w.valHooks[o.type]||w.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(e=t.get(o,"value"))?e:"string"==typeof(e=o.value)?e.replace(bt,""):null==e?"":e:void 0}}),w.extend({valHooks:{option:{get:function(a){var t=w.find.attr(a,"value");return null!=t?t:At(w.text(a))}},select:{get:function(a){var t,e,n,o=a.options,r=a.selectedIndex,i="select-one"===a.type,s=i?null:[],d=i?r+1:o.length;for(n=r<0?d:i?r:0;n<d;n++)if(((e=o[n]).selected||n===r)&&!e.disabled&&(!e.parentNode.disabled||!S(e.parentNode,"optgroup"))){if(t=w(e).val(),i)return t;s.push(t)}return s},set:function(a,t){for(var e,n,o=a.options,r=w.makeArray(t),i=o.length;i--;)((n=o[i]).selected=w.inArray(w.valHooks.option.get(n),r)>-1)&&(e=!0);return e||(a.selectedIndex=-1),r}}}}),w.each(["radio","checkbox"],(function(){w.valHooks[this]={set:function(a,t){if(Array.isArray(t))return a.checked=w.inArray(w(a).val(),t)>-1}},h.checkOn||(w.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})})),h.focusin="onfocusin"in n;var Ct=/^(?:focusinfocus|focusoutblur)$/,_t=function(a){a.stopPropagation()};w.extend(w.event,{trigger:function(a,t,e,o){var r,i,s,d,u,l,c,f,y=[e||g],m=p.call(a,"type")?a.type:a,h=p.call(a,"namespace")?a.namespace.split("."):[];if(i=f=s=e=e||g,3!==e.nodeType&&8!==e.nodeType&&!Ct.test(m+w.event.triggered)&&(m.indexOf(".")>-1&&(h=m.split("."),m=h.shift(),h.sort()),u=m.indexOf(":")<0&&"on"+m,(a=a[w.expando]?a:new w.Event(m,"object"==typeof a&&a)).isTrigger=o?2:3,a.namespace=h.join("."),a.rnamespace=a.namespace?new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,a.result=void 0,a.target||(a.target=e),t=null==t?[a]:w.makeArray(t,[a]),c=w.event.special[m]||{},o||!c.trigger||!1!==c.trigger.apply(e,t))){if(!o&&!c.noBubble&&!v(e)){for(d=c.delegateType||m,Ct.test(d+m)||(i=i.parentNode);i;i=i.parentNode)y.push(i),s=i;s===(e.ownerDocument||g)&&y.push(s.defaultView||s.parentWindow||n)}for(r=0;(i=y[r++])&&!a.isPropagationStopped();)f=i,a.type=r>1?d:c.bindType||m,(l=(K.get(i,"events")||Object.create(null))[a.type]&&K.get(i,"handle"))&&l.apply(i,t),(l=u&&i[u])&&l.apply&&V(i)&&(a.result=l.apply(i,t),!1===a.result&&a.preventDefault());return a.type=m,o||a.isDefaultPrevented()||c._default&&!1!==c._default.apply(y.pop(),t)||!V(e)||u&&A(e[m])&&!v(e)&&((s=e[u])&&(e[u]=null),w.event.triggered=m,a.isPropagationStopped()&&f.addEventListener(m,_t),e[m](),a.isPropagationStopped()&&f.removeEventListener(m,_t),w.event.triggered=void 0,s&&(e[u]=s)),a.result}},simulate:function(a,t,e){var n=w.extend(new w.Event,e,{type:a,isSimulated:!0});w.event.trigger(n,null,t)}}),w.fn.extend({trigger:function(a,t){return this.each((function(){w.event.trigger(a,t,this)}))},triggerHandler:function(a,t){var e=this[0];if(e)return w.event.trigger(a,t,e,!0)}}),h.focusin||w.each({focus:"focusin",blur:"focusout"},(function(a,t){var e=function(a){w.event.simulate(t,a.target,w.event.fix(a))};w.event.special[t]={setup:function(){var n=this.ownerDocument||this.document||this,o=K.access(n,t);o||n.addEventListener(a,e,!0),K.access(n,t,(o||0)+1)},teardown:function(){var n=this.ownerDocument||this.document||this,o=K.access(n,t)-1;o?K.access(n,t,o):(n.removeEventListener(a,e,!0),K.remove(n,t))}}}));var xt=n.location,wt={guid:Date.now()},$t=/\?/;w.parseXML=function(a){var t,e;if(!a||"string"!=typeof a)return null;try{t=(new n.DOMParser).parseFromString(a,"text/xml")}catch(a){}return e=t&&t.getElementsByTagName("parsererror")[0],t&&!e||w.error("Invalid XML: "+(e?w.map(e.childNodes,(function(a){return a.textContent})).join("\n"):a)),t};var Bt=/\[\]$/,kt=/\r?\n/g,Ft=/^(?:submit|button|image|reset|file)$/i,Tt=/^(?:input|select|textarea|keygen)/i;function St(a,t,e,n){var o;if(Array.isArray(t))w.each(t,(function(t,o){e||Bt.test(a)?n(a,o):St(a+"["+("object"==typeof o&&null!=o?t:"")+"]",o,e,n)}));else if(e||"object"!==_(t))n(a,t);else for(o in t)St(a+"["+o+"]",t[o],e,n)}w.param=function(a,t){var e,n=[],o=function(a,t){var e=A(t)?t():t;n[n.length]=encodeURIComponent(a)+"="+encodeURIComponent(null==e?"":e)};if(null==a)return"";if(Array.isArray(a)||a.jquery&&!w.isPlainObject(a))w.each(a,(function(){o(this.name,this.value)}));else for(e in a)St(e,a[e],t,o);return n.join("&")},w.fn.extend({serialize:function(){return w.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var a=w.prop(this,"elements");return a?w.makeArray(a):this})).filter((function(){var a=this.type;return this.name&&!w(this).is(":disabled")&&Tt.test(this.nodeName)&&!Ft.test(a)&&(this.checked||!ha.test(a))})).map((function(a,t){var e=w(this).val();return null==e?null:Array.isArray(e)?w.map(e,(function(a){return{name:t.name,value:a.replace(kt,"\r\n")}})):{name:t.name,value:e.replace(kt,"\r\n")}})).get()}});var Et=/%20/g,qt=/#.*$/,jt=/([?&])_=[^&]*/,Dt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Nt=/^(?:GET|HEAD)$/,Ot=/^\/\//,Mt={},Gt={},Lt="*/".concat("*"),It=g.createElement("a");function Pt(a){return function(t,e){"string"!=typeof t&&(e=t,t="*");var n,o=0,r=t.toLowerCase().match(G)||[];if(A(e))for(;n=r[o++];)"+"===n[0]?(n=n.slice(1)||"*",(a[n]=a[n]||[]).unshift(e)):(a[n]=a[n]||[]).push(e)}}function Rt(a,t,e,n){var o={},r=a===Gt;function i(s){var d;return o[s]=!0,w.each(a[s]||[],(function(a,s){var u=s(t,e,n);return"string"!=typeof u||r||o[u]?r?!(d=u):void 0:(t.dataTypes.unshift(u),i(u),!1)})),d}return i(t.dataTypes[0])||!o["*"]&&i("*")}function zt(a,t){var e,n,o=w.ajaxSettings.flatOptions||{};for(e in t)void 0!==t[e]&&((o[e]?a:n||(n={}))[e]=t[e]);return n&&w.extend(!0,a,n),a}It.href=xt.href,w.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:xt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(xt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Lt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":w.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,t){return t?zt(zt(a,w.ajaxSettings),t):zt(w.ajaxSettings,a)},ajaxPrefilter:Pt(Mt),ajaxTransport:Pt(Gt),ajax:function(a,t){"object"==typeof a&&(t=a,a=void 0),t=t||{};var e,o,r,i,s,d,u,l,c,f,p=w.ajaxSetup({},t),y=p.context||p,m=p.context&&(y.nodeType||y.jquery)?w(y):w.event,h=w.Deferred(),A=w.Callbacks("once memory"),v=p.statusCode||{},b={},C={},_="canceled",x={readyState:0,getResponseHeader:function(a){var t;if(u){if(!i)for(i={};t=Dt.exec(r);)i[t[1].toLowerCase()+" "]=(i[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=i[a.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?r:null},setRequestHeader:function(a,t){return null==u&&(a=C[a.toLowerCase()]=C[a.toLowerCase()]||a,b[a]=t),this},overrideMimeType:function(a){return null==u&&(p.mimeType=a),this},statusCode:function(a){var t;if(a)if(u)x.always(a[x.status]);else for(t in a)v[t]=[v[t],a[t]];return this},abort:function(a){var t=a||_;return e&&e.abort(t),$(0,t),this}};if(h.promise(x),p.url=((a||p.url||xt.href)+"").replace(Ot,xt.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(G)||[""],null==p.crossDomain){d=g.createElement("a");try{d.href=p.url,d.href=d.href,p.crossDomain=It.protocol+"//"+It.host!=d.protocol+"//"+d.host}catch(a){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=w.param(p.data,p.traditional)),Rt(Mt,p,t,x),u)return x;for(c in(l=w.event&&p.global)&&0==w.active++&&w.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Nt.test(p.type),o=p.url.replace(qt,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Et,"+")):(f=p.url.slice(o.length),p.data&&(p.processData||"string"==typeof p.data)&&(o+=($t.test(o)?"&":"?")+p.data,delete p.data),!1===p.cache&&(o=o.replace(jt,"$1"),f=($t.test(o)?"&":"?")+"_="+wt.guid+++f),p.url=o+f),p.ifModified&&(w.lastModified[o]&&x.setRequestHeader("If-Modified-Since",w.lastModified[o]),w.etag[o]&&x.setRequestHeader("If-None-Match",w.etag[o])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&x.setRequestHeader("Content-Type",p.contentType),x.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Lt+"; q=0.01":""):p.accepts["*"]),p.headers)x.setRequestHeader(c,p.headers[c]);if(p.beforeSend&&(!1===p.beforeSend.call(y,x,p)||u))return x.abort();if(_="abort",A.add(p.complete),x.done(p.success),x.fail(p.error),e=Rt(Gt,p,t,x)){if(x.readyState=1,l&&m.trigger("ajaxSend",[x,p]),u)return x;p.async&&p.timeout>0&&(s=n.setTimeout((function(){x.abort("timeout")}),p.timeout));try{u=!1,e.send(b,$)}catch(a){if(u)throw a;$(-1,a)}}else $(-1,"No Transport");function $(a,t,i,d){var c,f,g,b,C,_=t;u||(u=!0,s&&n.clearTimeout(s),e=void 0,r=d||"",x.readyState=a>0?4:0,c=a>=200&&a<300||304===a,i&&(b=function(a,t,e){for(var n,o,r,i,s=a.contents,d=a.dataTypes;"*"===d[0];)d.shift(),void 0===n&&(n=a.mimeType||t.getResponseHeader("Content-Type"));if(n)for(o in s)if(s[o]&&s[o].test(n)){d.unshift(o);break}if(d[0]in e)r=d[0];else{for(o in e){if(!d[0]||a.converters[o+" "+d[0]]){r=o;break}i||(i=o)}r=r||i}if(r)return r!==d[0]&&d.unshift(r),e[r]}(p,x,i)),!c&&w.inArray("script",p.dataTypes)>-1&&w.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),b=function(a,t,e,n){var o,r,i,s,d,u={},l=a.dataTypes.slice();if(l[1])for(i in a.converters)u[i.toLowerCase()]=a.converters[i];for(r=l.shift();r;)if(a.responseFields[r]&&(e[a.responseFields[r]]=t),!d&&n&&a.dataFilter&&(t=a.dataFilter(t,a.dataType)),d=r,r=l.shift())if("*"===r)r=d;else if("*"!==d&&d!==r){if(!(i=u[d+" "+r]||u["* "+r]))for(o in u)if((s=o.split(" "))[1]===r&&(i=u[d+" "+s[0]]||u["* "+s[0]])){!0===i?i=u[o]:!0!==u[o]&&(r=s[0],l.unshift(s[1]));break}if(!0!==i)if(i&&a.throws)t=i(t);else try{t=i(t)}catch(a){return{state:"parsererror",error:i?a:"No conversion from "+d+" to "+r}}}return{state:"success",data:t}}(p,b,x,c),c?(p.ifModified&&((C=x.getResponseHeader("Last-Modified"))&&(w.lastModified[o]=C),(C=x.getResponseHeader("etag"))&&(w.etag[o]=C)),204===a||"HEAD"===p.type?_="nocontent":304===a?_="notmodified":(_=b.state,f=b.data,c=!(g=b.error))):(g=_,!a&&_||(_="error",a<0&&(a=0))),x.status=a,x.statusText=(t||_)+"",c?h.resolveWith(y,[f,_,x]):h.rejectWith(y,[x,_,g]),x.statusCode(v),v=void 0,l&&m.trigger(c?"ajaxSuccess":"ajaxError",[x,p,c?f:g]),A.fireWith(y,[x,_]),l&&(m.trigger("ajaxComplete",[x,p]),--w.active||w.event.trigger("ajaxStop")))}return x},getJSON:function(a,t,e){return w.get(a,t,e,"json")},getScript:function(a,t){return w.get(a,void 0,t,"script")}}),w.each(["get","post"],(function(a,t){w[t]=function(a,e,n,o){return A(e)&&(o=o||n,n=e,e=void 0),w.ajax(w.extend({url:a,type:t,dataType:o,data:e,success:n},w.isPlainObject(a)&&a))}})),w.ajaxPrefilter((function(a){var t;for(t in a.headers)"content-type"===t.toLowerCase()&&(a.contentType=a.headers[t]||"")})),w._evalUrl=function(a,t,e){return w.ajax({url:a,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(a){w.globalEval(a,t,e)}})},w.fn.extend({wrapAll:function(a){var t;return this[0]&&(A(a)&&(a=a.call(this[0])),t=w(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var a=this;a.firstElementChild;)a=a.firstElementChild;return a})).append(this)),this},wrapInner:function(a){return A(a)?this.each((function(t){w(this).wrapInner(a.call(this,t))})):this.each((function(){var t=w(this),e=t.contents();e.length?e.wrapAll(a):t.append(a)}))},wrap:function(a){var t=A(a);return this.each((function(e){w(this).wrapAll(t?a.call(this,e):a)}))},unwrap:function(a){return this.parent(a).not("body").each((function(){w(this).replaceWith(this.childNodes)})),this}}),w.expr.pseudos.hidden=function(a){return!w.expr.pseudos.visible(a)},w.expr.pseudos.visible=function(a){return!!(a.offsetWidth||a.offsetHeight||a.getClientRects().length)},w.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(a){}};var Ht={0:200,1223:204},Wt=w.ajaxSettings.xhr();h.cors=!!Wt&&"withCredentials"in Wt,h.ajax=Wt=!!Wt,w.ajaxTransport((function(a){var t,e;if(h.cors||Wt&&!a.crossDomain)return{send:function(o,r){var i,s=a.xhr();if(s.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(i in a.xhrFields)s[i]=a.xhrFields[i];for(i in a.mimeType&&s.overrideMimeType&&s.overrideMimeType(a.mimeType),a.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)s.setRequestHeader(i,o[i]);t=function(a){return function(){t&&(t=e=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===a?s.abort():"error"===a?"number"!=typeof s.status?r(0,"error"):r(s.status,s.statusText):r(Ht[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),e=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=e:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&e()}))},t=t("abort");try{s.send(a.hasContent&&a.data||null)}catch(a){if(t)throw a}},abort:function(){t&&t()}}})),w.ajaxPrefilter((function(a){a.crossDomain&&(a.contents.script=!1)})),w.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(a){return w.globalEval(a),a}}}),w.ajaxPrefilter("script",(function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")})),w.ajaxTransport("script",(function(a){var t,e;if(a.crossDomain||a.scriptAttrs)return{send:function(n,o){t=w("<script>").attr(a.scriptAttrs||{}).prop({charset:a.scriptCharset,src:a.url}).on("load error",e=function(a){t.remove(),e=null,a&&o("error"===a.type?404:200,a.type)}),g.head.appendChild(t[0])},abort:function(){e&&e()}}}));var Qt,Ut=[],Yt=/(=)\?(?=&|$)|\?\?/;w.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Ut.pop()||w.expando+"_"+wt.guid++;return this[a]=!0,a}}),w.ajaxPrefilter("json jsonp",(function(a,t,e){var o,r,i,s=!1!==a.jsonp&&(Yt.test(a.url)?"url":"string"==typeof a.data&&0===(a.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(a.data)&&"data");if(s||"jsonp"===a.dataTypes[0])return o=a.jsonpCallback=A(a.jsonpCallback)?a.jsonpCallback():a.jsonpCallback,s?a[s]=a[s].replace(Yt,"$1"+o):!1!==a.jsonp&&(a.url+=($t.test(a.url)?"&":"?")+a.jsonp+"="+o),a.converters["script json"]=function(){return i||w.error(o+" was not called"),i[0]},a.dataTypes[0]="json",r=n[o],n[o]=function(){i=arguments},e.always((function(){void 0===r?w(n).removeProp(o):n[o]=r,a[o]&&(a.jsonpCallback=t.jsonpCallback,Ut.push(o)),i&&A(r)&&r(i[0]),i=r=void 0})),"script"})),h.createHTMLDocument=((Qt=g.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Qt.childNodes.length),w.parseHTML=function(a,t,e){return"string"!=typeof a?[]:("boolean"==typeof t&&(e=t,t=!1),t||(h.createHTMLDocument?((n=(t=g.implementation.createHTMLDocument("")).createElement("base")).href=g.location.href,t.head.appendChild(n)):t=g),r=!e&&[],(o=E.exec(a))?[t.createElement(o[1])]:(o=xa([a],t,r),r&&r.length&&w(r).remove(),w.merge([],o.childNodes)));var n,o,r},w.fn.load=function(a,t,e){var n,o,r,i=this,s=a.indexOf(" ");return s>-1&&(n=At(a.slice(s)),a=a.slice(0,s)),A(t)?(e=t,t=void 0):t&&"object"==typeof t&&(o="POST"),i.length>0&&w.ajax({url:a,type:o||"GET",dataType:"html",data:t}).done((function(a){r=arguments,i.html(n?w("<div>").append(w.parseHTML(a)).find(n):a)})).always(e&&function(a,t){i.each((function(){e.apply(this,r||[a.responseText,t,a])}))}),this},w.expr.pseudos.animated=function(a){return w.grep(w.timers,(function(t){return a===t.elem})).length},w.offset={setOffset:function(a,t,e){var n,o,r,i,s,d,u=w.css(a,"position"),l=w(a),c={};"static"===u&&(a.style.position="relative"),s=l.offset(),r=w.css(a,"top"),d=w.css(a,"left"),("absolute"===u||"fixed"===u)&&(r+d).indexOf("auto")>-1?(i=(n=l.position()).top,o=n.left):(i=parseFloat(r)||0,o=parseFloat(d)||0),A(t)&&(t=t.call(a,e,w.extend({},s))),null!=t.top&&(c.top=t.top-s.top+i),null!=t.left&&(c.left=t.left-s.left+o),"using"in t?t.using.call(a,c):l.css(c)}},w.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each((function(t){w.offset.setOffset(this,a,t)}));var t,e,n=this[0];return n?n.getClientRects().length?(t=n.getBoundingClientRect(),e=n.ownerDocument.defaultView,{top:t.top+e.pageYOffset,left:t.left+e.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var a,t,e,n=this[0],o={top:0,left:0};if("fixed"===w.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),e=n.ownerDocument,a=n.offsetParent||e.documentElement;a&&(a===e.body||a===e.documentElement)&&"static"===w.css(a,"position");)a=a.parentNode;a&&a!==n&&1===a.nodeType&&((o=w(a).offset()).top+=w.css(a,"borderTopWidth",!0),o.left+=w.css(a,"borderLeftWidth",!0))}return{top:t.top-o.top-w.css(n,"marginTop",!0),left:t.left-o.left-w.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var a=this.offsetParent;a&&"static"===w.css(a,"position");)a=a.offsetParent;return a||ia}))}}),w.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(a,t){var e="pageYOffset"===t;w.fn[a]=function(n){return W(this,(function(a,n,o){var r;if(v(a)?r=a:9===a.nodeType&&(r=a.defaultView),void 0===o)return r?r[t]:a[n];r?r.scrollTo(e?r.pageXOffset:o,e?o:r.pageYOffset):a[n]=o}),a,n,arguments.length)}})),w.each(["top","left"],(function(a,t){w.cssHooks[t]=Wa(h.pixelPosition,(function(a,e){if(e)return e=Ha(a,t),Ia.test(e)?w(a).position()[t]+"px":e}))})),w.each({Height:"height",Width:"width"},(function(a,t){w.each({padding:"inner"+a,content:t,"":"outer"+a},(function(e,n){w.fn[n]=function(o,r){var i=arguments.length&&(e||"boolean"!=typeof o),s=e||(!0===o||!0===r?"margin":"border");return W(this,(function(t,e,o){var r;return v(t)?0===n.indexOf("outer")?t["inner"+a]:t.document.documentElement["client"+a]:9===t.nodeType?(r=t.documentElement,Math.max(t.body["scroll"+a],r["scroll"+a],t.body["offset"+a],r["offset"+a],r["client"+a])):void 0===o?w.css(t,e,s):w.style(t,e,o,s)}),t,i?o:void 0,i)}}))})),w.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(a,t){w.fn[t]=function(a){return this.on(t,a)}})),w.fn.extend({bind:function(a,t,e){return this.on(a,null,t,e)},unbind:function(a,t){return this.off(a,null,t)},delegate:function(a,t,e,n){return this.on(t,a,e,n)},undelegate:function(a,t,e){return 1===arguments.length?this.off(a,"**"):this.off(t,a||"**",e)},hover:function(a,t){return this.mouseenter(a).mouseleave(t||a)}}),w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(a,t){w.fn[t]=function(a,e){return arguments.length>0?this.on(t,null,a,e):this.trigger(t)}}));var Xt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;w.proxy=function(a,t){var e,n,o;if("string"==typeof t&&(e=a[t],t=a,a=e),A(a))return n=s.call(arguments,2),o=function(){return a.apply(t||this,n.concat(s.call(arguments)))},o.guid=a.guid=a.guid||w.guid++,o},w.holdReady=function(a){a?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=S,w.isFunction=A,w.isWindow=v,w.camelCase=X,w.type=_,w.now=Date.now,w.isNumeric=function(a){var t=w.type(a);return("number"===t||"string"===t)&&!isNaN(a-parseFloat(a))},w.trim=function(a){return null==a?"":(a+"").replace(Xt,"")},void 0===(e=function(){return w}.apply(t,[]))||(a.exports=e);var Vt=n.jQuery,Zt=n.$;return w.noConflict=function(a){return n.$===w&&(n.$=Zt),a&&n.jQuery===w&&(n.jQuery=Vt),w},void 0===o&&(n.jQuery=n.$=w),w}))},379:a=>{"use strict";var t=[];function e(a){for(var e=-1,n=0;n<t.length;n++)if(t[n].identifier===a){e=n;break}return e}function n(a,n){for(var r={},i=[],s=0;s<a.length;s++){var d=a[s],u=n.base?d[0]+n.base:d[0],l=r[u]||0,c="".concat(u," ").concat(l);r[u]=l+1;var f=e(c),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==f)t[f].references++,t[f].updater(p);else{var y=o(p,n);n.byIndex=s,t.splice(s,0,{identifier:c,updater:y,references:1})}i.push(c)}return i}function o(a,t){var e=t.domAPI(t);return e.update(a),function(t){if(t){if(t.css===a.css&&t.media===a.media&&t.sourceMap===a.sourceMap&&t.supports===a.supports&&t.layer===a.layer)return;e.update(a=t)}else e.remove()}}a.exports=function(a,o){var r=n(a=a||[],o=o||{});return function(a){a=a||[];for(var i=0;i<r.length;i++){var s=e(r[i]);t[s].references--}for(var d=n(a,o),u=0;u<r.length;u++){var l=e(r[u]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}r=d}}},569:a=>{"use strict";var t={};a.exports=function(a,e){var n=function(a){if(void 0===t[a]){var e=document.querySelector(a);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(a){e=null}t[a]=e}return t[a]}(a);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(e)}},216:a=>{"use strict";a.exports=function(a){var t=document.createElement("style");return a.setAttributes(t,a.attributes),a.insert(t,a.options),t}},565:(a,t,e)=>{"use strict";a.exports=function(a){var t=e.nc;t&&a.setAttribute("nonce",t)}},795:a=>{"use strict";a.exports=function(a){var t=a.insertStyleElement(a);return{update:function(e){!function(a,t,e){var n="";e.supports&&(n+="@supports (".concat(e.supports,") {")),e.media&&(n+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(n+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),n+=e.css,o&&(n+="}"),e.media&&(n+="}"),e.supports&&(n+="}");var r=e.sourceMap;r&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),t.styleTagTransform(n,a,t.options)}(t,a,e)},remove:function(){!function(a){if(null===a.parentNode)return!1;a.parentNode.removeChild(a)}(t)}}}},589:a=>{"use strict";a.exports=function(a,t){if(t.styleSheet)t.styleSheet.cssText=a;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(a))}}},612:(a,t,e)=>{var n=e(60);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[a.id,n,""]]),n.locals&&(a.exports=n.locals),(0,e(346).Z)("6e1c316c",n,!1,{})},719:(a,t,e)=>{var n=e(178);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[a.id,n,""]]),n.locals&&(a.exports=n.locals),(0,e(346).Z)("be1f92d6",n,!1,{})},211:(a,t,e)=>{var n=e(31);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[a.id,n,""]]),n.locals&&(a.exports=n.locals),(0,e(346).Z)("54cab9e5",n,!1,{})},229:(a,t,e)=>{var n=e(318);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[a.id,n,""]]),n.locals&&(a.exports=n.locals),(0,e(346).Z)("061f8d19",n,!1,{})},9:(a,t,e)=>{var n=e(989);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[a.id,n,""]]),n.locals&&(a.exports=n.locals),(0,e(346).Z)("227e61da",n,!1,{})},497:(a,t,e)=>{var n=e(420);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[a.id,n,""]]),n.locals&&(a.exports=n.locals),(0,e(346).Z)("4f1383a9",n,!1,{})},598:(a,t,e)=>{var n=e(888);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[a.id,n,""]]),n.locals&&(a.exports=n.locals),(0,e(346).Z)("3962fe6e",n,!1,{})},655:(a,t,e)=>{var n=e(952);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[a.id,n,""]]),n.locals&&(a.exports=n.locals),(0,e(346).Z)("42732f1d",n,!1,{})},369:(a,t,e)=>{var n=e(547);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[a.id,n,""]]),n.locals&&(a.exports=n.locals),(0,e(346).Z)("10c327c4",n,!1,{})},834:(a,t,e)=>{var n=e(638);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[a.id,n,""]]),n.locals&&(a.exports=n.locals),(0,e(346).Z)("42ab20f6",n,!1,{})},628:(a,t,e)=>{var n=e(917);n.__esModule&&(n=n.default),"string"==typeof n&&(n=[[a.id,n,""]]),n.locals&&(a.exports=n.locals),(0,e(346).Z)("cc55827c",n,!1,{})},346:(a,t,e)=>{"use strict";function n(a,t){for(var e=[],n={},o=0;o<t.length;o++){var r=t[o],i=r[0],s={id:a+":"+o,css:r[1],media:r[2],sourceMap:r[3]};n[i]?n[i].parts.push(s):e.push(n[i]={id:i,parts:[s]})}return e}e.d(t,{Z:()=>y});var o="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!o)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var r={},i=o&&(document.head||document.getElementsByTagName("head")[0]),s=null,d=0,u=!1,l=function(){},c=null,f="data-vue-ssr-id",p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function y(a,t,e,o){u=e,c=o||{};var i=n(a,t);return m(i),function(t){for(var e=[],o=0;o<i.length;o++){var s=i[o];(d=r[s.id]).refs--,e.push(d)}for(t?m(i=n(a,t)):i=[],o=0;o<e.length;o++){var d;if(0===(d=e[o]).refs){for(var u=0;u<d.parts.length;u++)d.parts[u]();delete r[d.id]}}}}function m(a){for(var t=0;t<a.length;t++){var e=a[t],n=r[e.id];if(n){n.refs++;for(var o=0;o<n.parts.length;o++)n.parts[o](e.parts[o]);for(;o<e.parts.length;o++)n.parts.push(A(e.parts[o]));n.parts.length>e.parts.length&&(n.parts.length=e.parts.length)}else{var i=[];for(o=0;o<e.parts.length;o++)i.push(A(e.parts[o]));r[e.id]={id:e.id,refs:1,parts:i}}}}function h(){var a=document.createElement("style");return a.type="text/css",i.appendChild(a),a}function A(a){var t,e,n=document.querySelector("style["+f+'~="'+a.id+'"]');if(n){if(u)return l;n.parentNode.removeChild(n)}if(p){var o=d++;n=s||(s=h()),t=b.bind(null,n,o,!1),e=b.bind(null,n,o,!0)}else n=h(),t=C.bind(null,n),e=function(){n.parentNode.removeChild(n)};return t(a),function(n){if(n){if(n.css===a.css&&n.media===a.media&&n.sourceMap===a.sourceMap)return;t(a=n)}else e()}}var v,g=(v=[],function(a,t){return v[a]=t,v.filter(Boolean).join("\n")});function b(a,t,e,n){var o=e?"":n.css;if(a.styleSheet)a.styleSheet.cssText=g(t,o);else{var r=document.createTextNode(o),i=a.childNodes;i[t]&&a.removeChild(i[t]),i.length?a.insertBefore(r,i[t]):a.appendChild(r)}}function C(a,t){var e=t.css,n=t.media,o=t.sourceMap;if(n&&a.setAttribute("media",n),c.ssrId&&a.setAttribute(f,t.id),o&&(e+="\n/*# sourceURL="+o.sources[0]+" */",e+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),a.styleSheet)a.styleSheet.cssText=e;else{for(;a.firstChild;)a.removeChild(a.firstChild);a.appendChild(document.createTextNode(e))}}},160:(a,t,e)=>{var n={"./Code_New_Roman_Nerd_Font_Complete_Mono.otf":712,"./Code_New_Roman_Nerd_Font_Complete_Mono.ttf":636,"./JetBrains Mono Regular Nerd Font Complete Mono Windows Compatible.ttf":0,"./Mike.jpg":551,"./Nooby.jpg":614};function o(a){var t=r(a);return e(t)}function r(a){if(!e.o(n,a)){var t=new Error("Cannot find module '"+a+"'");throw t.code="MODULE_NOT_FOUND",t}return n[a]}o.keys=function(){return Object.keys(n)},o.resolve=r,a.exports=o,o.id=160},712:(a,t,e)=>{"use strict";a.exports=e.p+"a467b2d4e0c883f2345e.otf"},636:(a,t,e)=>{"use strict";a.exports=e.p+"60aec10540677705f55e.ttf"},0:(a,t,e)=>{"use strict";a.exports=e.p+"40671e637846a99dc70c.ttf"},551:(a,t,e)=>{"use strict";a.exports=e.p+"51923d105040cecff01b.jpg"},614:(a,t,e)=>{"use strict";a.exports=e.p+"9768a5c92b1c8bd71b19.jpg"}},t={};function e(n){var o=t[n];if(void 0!==o)return o.exports;var r=t[n]={id:n,exports:{}};return a[n].call(r.exports,r,r.exports,e),r.exports}e.m=a,e.n=a=>{var t=a&&a.__esModule?()=>a.default:()=>a;return e.d(t,{a:t}),t},e.d=(a,t)=>{for(var n in t)e.o(t,n)&&!e.o(a,n)&&Object.defineProperty(a,n,{enumerable:!0,get:t[n]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(a){if("object"==typeof window)return window}}(),e.o=(a,t)=>Object.prototype.hasOwnProperty.call(a,t),e.r=a=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(a,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(a,"__esModule",{value:!0})},(()=>{var a;e.g.importScripts&&(a=e.g.location+"");var t=e.g.document;if(!a&&t&&(t.currentScript&&(a=t.currentScript.src),!a)){var n=t.getElementsByTagName("script");n.length&&(a=n[n.length-1].src)}if(!a)throw new Error("Automatic publicPath is not supported in this browser");a=a.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=a})(),e.b=document.baseURI||self.location.href,(()=>{"use strict";var a=Object.freeze({});function t(a){return null==a}function n(a){return null!=a}function o(a){return!0===a}function r(a){return"string"==typeof a||"number"==typeof a||"symbol"==typeof a||"boolean"==typeof a}function i(a){return null!==a&&"object"==typeof a}var s=Object.prototype.toString;function d(a){return"[object Object]"===s.call(a)}function u(a){var t=parseFloat(String(a));return t>=0&&Math.floor(t)===t&&isFinite(a)}function l(a){return n(a)&&"function"==typeof a.then&&"function"==typeof a.catch}function c(a){return null==a?"":Array.isArray(a)||d(a)&&a.toString===s?JSON.stringify(a,null,2):String(a)}function f(a){var t=parseFloat(a);return isNaN(t)?a:t}function p(a,t){for(var e=Object.create(null),n=a.split(","),o=0;o<n.length;o++)e[n[o]]=!0;return t?function(a){return e[a.toLowerCase()]}:function(a){return e[a]}}p("slot,component",!0);var y=p("key,ref,slot,slot-scope,is");function m(a,t){if(a.length){var e=a.indexOf(t);if(e>-1)return a.splice(e,1)}}var h=Object.prototype.hasOwnProperty;function A(a,t){return h.call(a,t)}function v(a){var t=Object.create(null);return function(e){return t[e]||(t[e]=a(e))}}var g=/-(\w)/g,b=v((function(a){return a.replace(g,(function(a,t){return t?t.toUpperCase():""}))})),C=v((function(a){return a.charAt(0).toUpperCase()+a.slice(1)})),_=/\B([A-Z])/g,x=v((function(a){return a.replace(_,"-$1").toLowerCase()})),w=Function.prototype.bind?function(a,t){return a.bind(t)}:function(a,t){function e(e){var n=arguments.length;return n?n>1?a.apply(t,arguments):a.call(t,e):a.call(t)}return e._length=a.length,e};function $(a,t){t=t||0;for(var e=a.length-t,n=new Array(e);e--;)n[e]=a[e+t];return n}function B(a,t){for(var e in t)a[e]=t[e];return a}function k(a){for(var t={},e=0;e<a.length;e++)a[e]&&B(t,a[e]);return t}function F(a,t,e){}var T=function(a,t,e){return!1},S=function(a){return a};function E(a,t){if(a===t)return!0;var e=i(a),n=i(t);if(!e||!n)return!e&&!n&&String(a)===String(t);try{var o=Array.isArray(a),r=Array.isArray(t);if(o&&r)return a.length===t.length&&a.every((function(a,e){return E(a,t[e])}));if(a instanceof Date&&t instanceof Date)return a.getTime()===t.getTime();if(o||r)return!1;var s=Object.keys(a),d=Object.keys(t);return s.length===d.length&&s.every((function(e){return E(a[e],t[e])}))}catch(a){return!1}}function q(a,t){for(var e=0;e<a.length;e++)if(E(a[e],t))return e;return-1}function j(a){var t=!1;return function(){t||(t=!0,a.apply(this,arguments))}}var D="data-server-rendered",N=["component","directive","filter"],O=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],M={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:T,isReservedAttr:T,isUnknownElement:T,getTagNamespace:F,parsePlatformTagName:S,mustUseProp:T,async:!0,_lifecycleHooks:O};function G(a,t,e,n){Object.defineProperty(a,t,{value:e,enumerable:!!n,writable:!0,configurable:!0})}var L,I=new RegExp("[^"+/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/.source+".$_\\d]"),P="__proto__"in{},R="undefined"!=typeof window,z="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,H=z&&WXEnvironment.platform.toLowerCase(),W=R&&window.navigator.userAgent.toLowerCase(),Q=W&&/msie|trident/.test(W),U=W&&W.indexOf("msie 9.0")>0,Y=W&&W.indexOf("edge/")>0,X=(W&&W.indexOf("android"),W&&/iphone|ipad|ipod|ios/.test(W)||"ios"===H),V=(W&&/chrome\/\d+/.test(W),W&&/phantomjs/.test(W),W&&W.match(/firefox\/(\d+)/)),Z={}.watch,K=!1;if(R)try{var J={};Object.defineProperty(J,"passive",{get:function(){K=!0}}),window.addEventListener("test-passive",null,J)}catch(a){}var aa=function(){return void 0===L&&(L=!R&&!z&&void 0!==e.g&&e.g.process&&"server"===e.g.process.env.VUE_ENV),L},ta=R&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ea(a){return"function"==typeof a&&/native code/.test(a.toString())}var na,oa="undefined"!=typeof Symbol&&ea(Symbol)&&"undefined"!=typeof Reflect&&ea(Reflect.ownKeys);na="undefined"!=typeof Set&&ea(Set)?Set:function(){function a(){this.set=Object.create(null)}return a.prototype.has=function(a){return!0===this.set[a]},a.prototype.add=function(a){this.set[a]=!0},a.prototype.clear=function(){this.set=Object.create(null)},a}();var ra=F,ia=0,sa=function(){this.id=ia++,this.subs=[]};sa.prototype.addSub=function(a){this.subs.push(a)},sa.prototype.removeSub=function(a){m(this.subs,a)},sa.prototype.depend=function(){sa.target&&sa.target.addDep(this)},sa.prototype.notify=function(){for(var a=this.subs.slice(),t=0,e=a.length;t<e;t++)a[t].update()},sa.target=null;var da=[];function ua(a){da.push(a),sa.target=a}function la(){da.pop(),sa.target=da[da.length-1]}var ca=function(a,t,e,n,o,r,i,s){this.tag=a,this.data=t,this.children=e,this.text=n,this.elm=o,this.ns=void 0,this.context=r,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=i,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},fa={child:{configurable:!0}};fa.child.get=function(){return this.componentInstance},Object.defineProperties(ca.prototype,fa);var pa=function(a){void 0===a&&(a="");var t=new ca;return t.text=a,t.isComment=!0,t};function ya(a){return new ca(void 0,void 0,void 0,String(a))}function ma(a){var t=new ca(a.tag,a.data,a.children&&a.children.slice(),a.text,a.elm,a.context,a.componentOptions,a.asyncFactory);return t.ns=a.ns,t.isStatic=a.isStatic,t.key=a.key,t.isComment=a.isComment,t.fnContext=a.fnContext,t.fnOptions=a.fnOptions,t.fnScopeId=a.fnScopeId,t.asyncMeta=a.asyncMeta,t.isCloned=!0,t}var ha=Array.prototype,Aa=Object.create(ha);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(a){var t=ha[a];G(Aa,a,(function(){for(var e=[],n=arguments.length;n--;)e[n]=arguments[n];var o,r=t.apply(this,e),i=this.__ob__;switch(a){case"push":case"unshift":o=e;break;case"splice":o=e.slice(2)}return o&&i.observeArray(o),i.dep.notify(),r}))}));var va=Object.getOwnPropertyNames(Aa),ga=!0;function ba(a){ga=a}var Ca=function(a){this.value=a,this.dep=new sa,this.vmCount=0,G(a,"__ob__",this),Array.isArray(a)?(P?function(a,t){a.__proto__=t}(a,Aa):function(a,t,e){for(var n=0,o=e.length;n<o;n++){var r=e[n];G(a,r,t[r])}}(a,Aa,va),this.observeArray(a)):this.walk(a)};function _a(a,t){var e;if(i(a)&&!(a instanceof ca))return A(a,"__ob__")&&a.__ob__ instanceof Ca?e=a.__ob__:ga&&!aa()&&(Array.isArray(a)||d(a))&&Object.isExtensible(a)&&!a._isVue&&(e=new Ca(a)),t&&e&&e.vmCount++,e}function xa(a,t,e,n,o){var r=new sa,i=Object.getOwnPropertyDescriptor(a,t);if(!i||!1!==i.configurable){var s=i&&i.get,d=i&&i.set;s&&!d||2!==arguments.length||(e=a[t]);var u=!o&&_a(e);Object.defineProperty(a,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(a):e;return sa.target&&(r.depend(),u&&(u.dep.depend(),Array.isArray(t)&&Ba(t))),t},set:function(t){var n=s?s.call(a):e;t===n||t!=t&&n!=n||s&&!d||(d?d.call(a,t):e=t,u=!o&&_a(t),r.notify())}})}}function wa(a,t,e){if(Array.isArray(a)&&u(t))return a.length=Math.max(a.length,t),a.splice(t,1,e),e;if(t in a&&!(t in Object.prototype))return a[t]=e,e;var n=a.__ob__;return a._isVue||n&&n.vmCount?e:n?(xa(n.value,t,e),n.dep.notify(),e):(a[t]=e,e)}function $a(a,t){if(Array.isArray(a)&&u(t))a.splice(t,1);else{var e=a.__ob__;a._isVue||e&&e.vmCount||A(a,t)&&(delete a[t],e&&e.dep.notify())}}function Ba(a){for(var t=void 0,e=0,n=a.length;e<n;e++)(t=a[e])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&Ba(t)}Ca.prototype.walk=function(a){for(var t=Object.keys(a),e=0;e<t.length;e++)xa(a,t[e])},Ca.prototype.observeArray=function(a){for(var t=0,e=a.length;t<e;t++)_a(a[t])};var ka=M.optionMergeStrategies;function Fa(a,t){if(!t)return a;for(var e,n,o,r=oa?Reflect.ownKeys(t):Object.keys(t),i=0;i<r.length;i++)"__ob__"!==(e=r[i])&&(n=a[e],o=t[e],A(a,e)?n!==o&&d(n)&&d(o)&&Fa(n,o):wa(a,e,o));return a}function Ta(a,t,e){return e?function(){var n="function"==typeof t?t.call(e,e):t,o="function"==typeof a?a.call(e,e):a;return n?Fa(n,o):o}:t?a?function(){return Fa("function"==typeof t?t.call(this,this):t,"function"==typeof a?a.call(this,this):a)}:t:a}function Sa(a,t){var e=t?a?a.concat(t):Array.isArray(t)?t:[t]:a;return e?function(a){for(var t=[],e=0;e<a.length;e++)-1===t.indexOf(a[e])&&t.push(a[e]);return t}(e):e}function Ea(a,t,e,n){var o=Object.create(a||null);return t?B(o,t):o}ka.data=function(a,t,e){return e?Ta(a,t,e):t&&"function"!=typeof t?a:Ta(a,t)},O.forEach((function(a){ka[a]=Sa})),N.forEach((function(a){ka[a+"s"]=Ea})),ka.watch=function(a,t,e,n){if(a===Z&&(a=void 0),t===Z&&(t=void 0),!t)return Object.create(a||null);if(!a)return t;var o={};for(var r in B(o,a),t){var i=o[r],s=t[r];i&&!Array.isArray(i)&&(i=[i]),o[r]=i?i.concat(s):Array.isArray(s)?s:[s]}return o},ka.props=ka.methods=ka.inject=ka.computed=function(a,t,e,n){if(!a)return t;var o=Object.create(null);return B(o,a),t&&B(o,t),o},ka.provide=Ta;var qa=function(a,t){return void 0===t?a:t};function ja(a,t,e){if("function"==typeof t&&(t=t.options),function(a,t){var e=a.props;if(e){var n,o,r={};if(Array.isArray(e))for(n=e.length;n--;)"string"==typeof(o=e[n])&&(r[b(o)]={type:null});else if(d(e))for(var i in e)o=e[i],r[b(i)]=d(o)?o:{type:o};a.props=r}}(t),function(a,t){var e=a.inject;if(e){var n=a.inject={};if(Array.isArray(e))for(var o=0;o<e.length;o++)n[e[o]]={from:e[o]};else if(d(e))for(var r in e){var i=e[r];n[r]=d(i)?B({from:r},i):{from:i}}}}(t),function(a){var t=a.directives;if(t)for(var e in t){var n=t[e];"function"==typeof n&&(t[e]={bind:n,update:n})}}(t),!t._base&&(t.extends&&(a=ja(a,t.extends,e)),t.mixins))for(var n=0,o=t.mixins.length;n<o;n++)a=ja(a,t.mixins[n],e);var r,i={};for(r in a)s(r);for(r in t)A(a,r)||s(r);function s(n){var o=ka[n]||qa;i[n]=o(a[n],t[n],e,n)}return i}function Da(a,t,e,n){if("string"==typeof e){var o=a[t];if(A(o,e))return o[e];var r=b(e);if(A(o,r))return o[r];var i=C(r);return A(o,i)?o[i]:o[e]||o[r]||o[i]}}function Na(a,t,e,n){var o=t[a],r=!A(e,a),i=e[a],s=La(Boolean,o.type);if(s>-1)if(r&&!A(o,"default"))i=!1;else if(""===i||i===x(a)){var d=La(String,o.type);(d<0||s<d)&&(i=!0)}if(void 0===i){i=function(a,t,e){if(A(t,"default")){var n=t.default;return a&&a.$options.propsData&&void 0===a.$options.propsData[e]&&void 0!==a._props[e]?a._props[e]:"function"==typeof n&&"Function"!==Ma(t.type)?n.call(a):n}}(n,o,a);var u=ga;ba(!0),_a(i),ba(u)}return i}var Oa=/^\s*function (\w+)/;function Ma(a){var t=a&&a.toString().match(Oa);return t?t[1]:""}function Ga(a,t){return Ma(a)===Ma(t)}function La(a,t){if(!Array.isArray(t))return Ga(t,a)?0:-1;for(var e=0,n=t.length;e<n;e++)if(Ga(t[e],a))return e;return-1}function Ia(a,t,e){ua();try{if(t)for(var n=t;n=n.$parent;){var o=n.$options.errorCaptured;if(o)for(var r=0;r<o.length;r++)try{if(!1===o[r].call(n,a,t,e))return}catch(a){Ra(a,n,"errorCaptured hook")}}Ra(a,t,e)}finally{la()}}function Pa(a,t,e,n,o){var r;try{(r=e?a.apply(t,e):a.call(t))&&!r._isVue&&l(r)&&!r._handled&&(r.catch((function(a){return Ia(a,n,o+" (Promise/async)")})),r._handled=!0)}catch(a){Ia(a,n,o)}return r}function Ra(a,t,e){if(M.errorHandler)try{return M.errorHandler.call(null,a,t,e)}catch(t){t!==a&&za(t)}za(a)}function za(a,t,e){if(!R&&!z||"undefined"==typeof console)throw a;console.error(a)}var Ha,Wa=!1,Qa=[],Ua=!1;function Ya(){Ua=!1;var a=Qa.slice(0);Qa.length=0;for(var t=0;t<a.length;t++)a[t]()}if("undefined"!=typeof Promise&&ea(Promise)){var Xa=Promise.resolve();Ha=function(){Xa.then(Ya),X&&setTimeout(F)},Wa=!0}else if(Q||"undefined"==typeof MutationObserver||!ea(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Ha="undefined"!=typeof setImmediate&&ea(setImmediate)?function(){setImmediate(Ya)}:function(){setTimeout(Ya,0)};else{var Va=1,Za=new MutationObserver(Ya),Ka=document.createTextNode(String(Va));Za.observe(Ka,{characterData:!0}),Ha=function(){Va=(Va+1)%2,Ka.data=String(Va)},Wa=!0}function Ja(a,t){var e;if(Qa.push((function(){if(a)try{a.call(t)}catch(a){Ia(a,t,"nextTick")}else e&&e(t)})),Ua||(Ua=!0,Ha()),!a&&"undefined"!=typeof Promise)return new Promise((function(a){e=a}))}var at=new na;function tt(a){et(a,at),at.clear()}function et(a,t){var e,n,o=Array.isArray(a);if(!(!o&&!i(a)||Object.isFrozen(a)||a instanceof ca)){if(a.__ob__){var r=a.__ob__.dep.id;if(t.has(r))return;t.add(r)}if(o)for(e=a.length;e--;)et(a[e],t);else for(e=(n=Object.keys(a)).length;e--;)et(a[n[e]],t)}}var nt=v((function(a){var t="&"===a.charAt(0),e="~"===(a=t?a.slice(1):a).charAt(0),n="!"===(a=e?a.slice(1):a).charAt(0);return{name:a=n?a.slice(1):a,once:e,capture:n,passive:t}}));function ot(a,t){function e(){var a=arguments,n=e.fns;if(!Array.isArray(n))return Pa(n,null,arguments,t,"v-on handler");for(var o=n.slice(),r=0;r<o.length;r++)Pa(o[r],null,a,t,"v-on handler")}return e.fns=a,e}function rt(a,e,n,r,i,s){var d,u,l,c;for(d in a)u=a[d],l=e[d],c=nt(d),t(u)||(t(l)?(t(u.fns)&&(u=a[d]=ot(u,s)),o(c.once)&&(u=a[d]=i(c.name,u,c.capture)),n(c.name,u,c.capture,c.passive,c.params)):u!==l&&(l.fns=u,a[d]=l));for(d in e)t(a[d])&&r((c=nt(d)).name,e[d],c.capture)}function it(a,e,r){var i;a instanceof ca&&(a=a.data.hook||(a.data.hook={}));var s=a[e];function d(){r.apply(this,arguments),m(i.fns,d)}t(s)?i=ot([d]):n(s.fns)&&o(s.merged)?(i=s).fns.push(d):i=ot([s,d]),i.merged=!0,a[e]=i}function st(a,t,e,o,r){if(n(t)){if(A(t,e))return a[e]=t[e],r||delete t[e],!0;if(A(t,o))return a[e]=t[o],r||delete t[o],!0}return!1}function dt(a){return r(a)?[ya(a)]:Array.isArray(a)?lt(a):void 0}function ut(a){return n(a)&&n(a.text)&&!1===a.isComment}function lt(a,e){var i,s,d,u,l=[];for(i=0;i<a.length;i++)t(s=a[i])||"boolean"==typeof s||(u=l[d=l.length-1],Array.isArray(s)?s.length>0&&(ut((s=lt(s,(e||"")+"_"+i))[0])&&ut(u)&&(l[d]=ya(u.text+s[0].text),s.shift()),l.push.apply(l,s)):r(s)?ut(u)?l[d]=ya(u.text+s):""!==s&&l.push(ya(s)):ut(s)&&ut(u)?l[d]=ya(u.text+s.text):(o(a._isVList)&&n(s.tag)&&t(s.key)&&n(e)&&(s.key="__vlist"+e+"_"+i+"__"),l.push(s)));return l}function ct(a,t){if(a){for(var e=Object.create(null),n=oa?Reflect.ownKeys(a):Object.keys(a),o=0;o<n.length;o++){var r=n[o];if("__ob__"!==r){for(var i=a[r].from,s=t;s;){if(s._provided&&A(s._provided,i)){e[r]=s._provided[i];break}s=s.$parent}if(!s&&"default"in a[r]){var d=a[r].default;e[r]="function"==typeof d?d.call(t):d}}}return e}}function ft(a,t){if(!a||!a.length)return{};for(var e={},n=0,o=a.length;n<o;n++){var r=a[n],i=r.data;if(i&&i.attrs&&i.attrs.slot&&delete i.attrs.slot,r.context!==t&&r.fnContext!==t||!i||null==i.slot)(e.default||(e.default=[])).push(r);else{var s=i.slot,d=e[s]||(e[s]=[]);"template"===r.tag?d.push.apply(d,r.children||[]):d.push(r)}}for(var u in e)e[u].every(pt)&&delete e[u];return e}function pt(a){return a.isComment&&!a.asyncFactory||" "===a.text}function yt(a){return a.isComment&&a.asyncFactory}function mt(t,e,n){var o,r=Object.keys(e).length>0,i=t?!!t.$stable:!r,s=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(i&&n&&n!==a&&s===n.$key&&!r&&!n.$hasNormal)return n;for(var d in o={},t)t[d]&&"$"!==d[0]&&(o[d]=ht(e,d,t[d]))}else o={};for(var u in e)u in o||(o[u]=At(e,u));return t&&Object.isExtensible(t)&&(t._normalized=o),G(o,"$stable",i),G(o,"$key",s),G(o,"$hasNormal",r),o}function ht(a,t,e){var n=function(){var a=arguments.length?e.apply(null,arguments):e({}),t=(a=a&&"object"==typeof a&&!Array.isArray(a)?[a]:dt(a))&&a[0];return a&&(!t||1===a.length&&t.isComment&&!yt(t))?void 0:a};return e.proxy&&Object.defineProperty(a,t,{get:n,enumerable:!0,configurable:!0}),n}function At(a,t){return function(){return a[t]}}function vt(a,t){var e,o,r,s,d;if(Array.isArray(a)||"string"==typeof a)for(e=new Array(a.length),o=0,r=a.length;o<r;o++)e[o]=t(a[o],o);else if("number"==typeof a)for(e=new Array(a),o=0;o<a;o++)e[o]=t(o+1,o);else if(i(a))if(oa&&a[Symbol.iterator]){e=[];for(var u=a[Symbol.iterator](),l=u.next();!l.done;)e.push(t(l.value,e.length)),l=u.next()}else for(s=Object.keys(a),e=new Array(s.length),o=0,r=s.length;o<r;o++)d=s[o],e[o]=t(a[d],d,o);return n(e)||(e=[]),e._isVList=!0,e}function gt(a,t,e,n){var o,r=this.$scopedSlots[a];r?(e=e||{},n&&(e=B(B({},n),e)),o=r(e)||("function"==typeof t?t():t)):o=this.$slots[a]||("function"==typeof t?t():t);var i=e&&e.slot;return i?this.$createElement("template",{slot:i},o):o}function bt(a){return Da(this.$options,"filters",a)||S}function Ct(a,t){return Array.isArray(a)?-1===a.indexOf(t):a!==t}function _t(a,t,e,n,o){var r=M.keyCodes[t]||e;return o&&n&&!M.keyCodes[t]?Ct(o,n):r?Ct(r,a):n?x(n)!==t:void 0===a}function xt(a,t,e,n,o){if(e&&i(e)){var r;Array.isArray(e)&&(e=k(e));var s=function(i){if("class"===i||"style"===i||y(i))r=a;else{var s=a.attrs&&a.attrs.type;r=n||M.mustUseProp(t,s,i)?a.domProps||(a.domProps={}):a.attrs||(a.attrs={})}var d=b(i),u=x(i);d in r||u in r||(r[i]=e[i],o&&((a.on||(a.on={}))["update:"+i]=function(a){e[i]=a}))};for(var d in e)s(d)}return a}function wt(a,t){var e=this._staticTrees||(this._staticTrees=[]),n=e[a];return n&&!t||Bt(n=e[a]=this.$options.staticRenderFns[a].call(this._renderProxy,null,this),"__static__"+a,!1),n}function $t(a,t,e){return Bt(a,"__once__"+t+(e?"_"+e:""),!0),a}function Bt(a,t,e){if(Array.isArray(a))for(var n=0;n<a.length;n++)a[n]&&"string"!=typeof a[n]&&kt(a[n],t+"_"+n,e);else kt(a,t,e)}function kt(a,t,e){a.isStatic=!0,a.key=t,a.isOnce=e}function Ft(a,t){if(t&&d(t)){var e=a.on=a.on?B({},a.on):{};for(var n in t){var o=e[n],r=t[n];e[n]=o?[].concat(o,r):r}}return a}function Tt(a,t,e,n){t=t||{$stable:!e};for(var o=0;o<a.length;o++){var r=a[o];Array.isArray(r)?Tt(r,t,e):r&&(r.proxy&&(r.fn.proxy=!0),t[r.key]=r.fn)}return n&&(t.$key=n),t}function St(a,t){for(var e=0;e<t.length;e+=2){var n=t[e];"string"==typeof n&&n&&(a[t[e]]=t[e+1])}return a}function Et(a,t){return"string"==typeof a?t+a:a}function qt(a){a._o=$t,a._n=f,a._s=c,a._l=vt,a._t=gt,a._q=E,a._i=q,a._m=wt,a._f=bt,a._k=_t,a._b=xt,a._v=ya,a._e=pa,a._u=Tt,a._g=Ft,a._d=St,a._p=Et}function jt(t,e,n,r,i){var s,d=this,u=i.options;A(r,"_uid")?(s=Object.create(r))._original=r:(s=r,r=r._original);var l=o(u._compiled),c=!l;this.data=t,this.props=e,this.children=n,this.parent=r,this.listeners=t.on||a,this.injections=ct(u.inject,r),this.slots=function(){return d.$slots||mt(t.scopedSlots,d.$slots=ft(n,r)),d.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return mt(t.scopedSlots,this.slots())}}),l&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=mt(t.scopedSlots,this.$slots)),u._scopeId?this._c=function(a,t,e,n){var o=It(s,a,t,e,n,c);return o&&!Array.isArray(o)&&(o.fnScopeId=u._scopeId,o.fnContext=r),o}:this._c=function(a,t,e,n){return It(s,a,t,e,n,c)}}function Dt(a,t,e,n,o){var r=ma(a);return r.fnContext=e,r.fnOptions=n,t.slot&&((r.data||(r.data={})).slot=t.slot),r}function Nt(a,t){for(var e in t)a[b(e)]=t[e]}qt(jt.prototype);var Ot={init:function(a,t){if(a.componentInstance&&!a.componentInstance._isDestroyed&&a.data.keepAlive){var e=a;Ot.prepatch(e,e)}else{var o=a.componentInstance=function(a,t){var e={_isComponent:!0,_parentVnode:a,parent:t},o=a.data.inlineTemplate;return n(o)&&(e.render=o.render,e.staticRenderFns=o.staticRenderFns),new a.componentOptions.Ctor(e)}(a,Vt);o.$mount(t?a.elm:void 0,t)}},prepatch:function(t,e){var n=e.componentOptions;!function(t,e,n,o,r){var i=o.data.scopedSlots,s=t.$scopedSlots,d=!!(i&&!i.$stable||s!==a&&!s.$stable||i&&t.$scopedSlots.$key!==i.$key||!i&&t.$scopedSlots.$key),u=!!(r||t.$options._renderChildren||d);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=r,t.$attrs=o.data.attrs||a,t.$listeners=n||a,e&&t.$options.props){ba(!1);for(var l=t._props,c=t.$options._propKeys||[],f=0;f<c.length;f++){var p=c[f],y=t.$options.props;l[p]=Na(p,y,e,t)}ba(!0),t.$options.propsData=e}n=n||a;var m=t.$options._parentListeners;t.$options._parentListeners=n,Xt(t,n,m),u&&(t.$slots=ft(r,o.context),t.$forceUpdate())}(e.componentInstance=t.componentInstance,n.propsData,n.listeners,e,n.children)},insert:function(a){var t,e=a.context,n=a.componentInstance;n._isMounted||(n._isMounted=!0,te(n,"mounted")),a.data.keepAlive&&(e._isMounted?((t=n)._inactive=!1,ne.push(t)):Jt(n,!0))},destroy:function(a){var t=a.componentInstance;t._isDestroyed||(a.data.keepAlive?ae(t,!0):t.$destroy())}},Mt=Object.keys(Ot);function Gt(e,r,s,d,u){if(!t(e)){var c=s.$options._base;if(i(e)&&(e=c.extend(e)),"function"==typeof e){var f;if(t(e.cid)&&(e=function(a,e){if(o(a.error)&&n(a.errorComp))return a.errorComp;if(n(a.resolved))return a.resolved;var r=zt;if(r&&n(a.owners)&&-1===a.owners.indexOf(r)&&a.owners.push(r),o(a.loading)&&n(a.loadingComp))return a.loadingComp;if(r&&!n(a.owners)){var s=a.owners=[r],d=!0,u=null,c=null;r.$on("hook:destroyed",(function(){return m(s,r)}));var f=function(a){for(var t=0,e=s.length;t<e;t++)s[t].$forceUpdate();a&&(s.length=0,null!==u&&(clearTimeout(u),u=null),null!==c&&(clearTimeout(c),c=null))},p=j((function(t){a.resolved=Ht(t,e),d?s.length=0:f(!0)})),y=j((function(t){n(a.errorComp)&&(a.error=!0,f(!0))})),h=a(p,y);return i(h)&&(l(h)?t(a.resolved)&&h.then(p,y):l(h.component)&&(h.component.then(p,y),n(h.error)&&(a.errorComp=Ht(h.error,e)),n(h.loading)&&(a.loadingComp=Ht(h.loading,e),0===h.delay?a.loading=!0:u=setTimeout((function(){u=null,t(a.resolved)&&t(a.error)&&(a.loading=!0,f(!1))}),h.delay||200)),n(h.timeout)&&(c=setTimeout((function(){c=null,t(a.resolved)&&y(null)}),h.timeout)))),d=!1,a.loading?a.loadingComp:a.resolved}}(f=e,c),void 0===e))return function(a,t,e,n,o){var r=pa();return r.asyncFactory=a,r.asyncMeta={data:t,context:e,children:n,tag:o},r}(f,r,s,d,u);r=r||{},_e(e),n(r.model)&&function(a,t){var e=a.model&&a.model.prop||"value",o=a.model&&a.model.event||"input";(t.attrs||(t.attrs={}))[e]=t.model.value;var r=t.on||(t.on={}),i=r[o],s=t.model.callback;n(i)?(Array.isArray(i)?-1===i.indexOf(s):i!==s)&&(r[o]=[s].concat(i)):r[o]=s}(e.options,r);var p=function(a,e,o){var r=e.options.props;if(!t(r)){var i={},s=a.attrs,d=a.props;if(n(s)||n(d))for(var u in r){var l=x(u);st(i,d,u,l,!0)||st(i,s,u,l,!1)}return i}}(r,e);if(o(e.options.functional))return function(t,e,o,r,i){var s=t.options,d={},u=s.props;if(n(u))for(var l in u)d[l]=Na(l,u,e||a);else n(o.attrs)&&Nt(d,o.attrs),n(o.props)&&Nt(d,o.props);var c=new jt(o,d,i,r,t),f=s.render.call(null,c._c,c);if(f instanceof ca)return Dt(f,o,c.parent,s);if(Array.isArray(f)){for(var p=dt(f)||[],y=new Array(p.length),m=0;m<p.length;m++)y[m]=Dt(p[m],o,c.parent,s);return y}}(e,p,r,s,d);var y=r.on;if(r.on=r.nativeOn,o(e.options.abstract)){var h=r.slot;r={},h&&(r.slot=h)}!function(a){for(var t=a.hook||(a.hook={}),e=0;e<Mt.length;e++){var n=Mt[e],o=t[n],r=Ot[n];o===r||o&&o._merged||(t[n]=o?Lt(r,o):r)}}(r);var A=e.options.name||u;return new ca("vue-component-"+e.cid+(A?"-"+A:""),r,void 0,void 0,void 0,s,{Ctor:e,propsData:p,listeners:y,tag:u,children:d},f)}}}function Lt(a,t){var e=function(e,n){a(e,n),t(e,n)};return e._merged=!0,e}function It(a,t,e,s,d,u){return(Array.isArray(e)||r(e))&&(d=s,s=e,e=void 0),o(u)&&(d=2),function(a,t,e,o,r){if(n(e)&&n(e.__ob__))return pa();if(n(e)&&n(e.is)&&(t=e.is),!t)return pa();var s,d,u;(Array.isArray(o)&&"function"==typeof o[0]&&((e=e||{}).scopedSlots={default:o[0]},o.length=0),2===r?o=dt(o):1===r&&(o=function(a){for(var t=0;t<a.length;t++)if(Array.isArray(a[t]))return Array.prototype.concat.apply([],a);return a}(o)),"string"==typeof t)?(d=a.$vnode&&a.$vnode.ns||M.getTagNamespace(t),s=M.isReservedTag(t)?new ca(M.parsePlatformTagName(t),e,o,void 0,void 0,a):e&&e.pre||!n(u=Da(a.$options,"components",t))?new ca(t,e,o,void 0,void 0,a):Gt(u,e,a,o,t)):s=Gt(t,e,a,o);return Array.isArray(s)?s:n(s)?(n(d)&&Pt(s,d),n(e)&&function(a){i(a.style)&&tt(a.style),i(a.class)&&tt(a.class)}(e),s):pa()}(a,t,e,s,d)}function Pt(a,e,r){if(a.ns=e,"foreignObject"===a.tag&&(e=void 0,r=!0),n(a.children))for(var i=0,s=a.children.length;i<s;i++){var d=a.children[i];n(d.tag)&&(t(d.ns)||o(r)&&"svg"!==d.tag)&&Pt(d,e,r)}}var Rt,zt=null;function Ht(a,t){return(a.__esModule||oa&&"Module"===a[Symbol.toStringTag])&&(a=a.default),i(a)?t.extend(a):a}function Wt(a){if(Array.isArray(a))for(var t=0;t<a.length;t++){var e=a[t];if(n(e)&&(n(e.componentOptions)||yt(e)))return e}}function Qt(a,t){Rt.$on(a,t)}function Ut(a,t){Rt.$off(a,t)}function Yt(a,t){var e=Rt;return function n(){var o=t.apply(null,arguments);null!==o&&e.$off(a,n)}}function Xt(a,t,e){Rt=a,rt(t,e||{},Qt,Ut,Yt,a),Rt=void 0}var Vt=null;function Zt(a){var t=Vt;return Vt=a,function(){Vt=t}}function Kt(a){for(;a&&(a=a.$parent);)if(a._inactive)return!0;return!1}function Jt(a,t){if(t){if(a._directInactive=!1,Kt(a))return}else if(a._directInactive)return;if(a._inactive||null===a._inactive){a._inactive=!1;for(var e=0;e<a.$children.length;e++)Jt(a.$children[e]);te(a,"activated")}}function ae(a,t){if(!(t&&(a._directInactive=!0,Kt(a))||a._inactive)){a._inactive=!0;for(var e=0;e<a.$children.length;e++)ae(a.$children[e]);te(a,"deactivated")}}function te(a,t){ua();var e=a.$options[t],n=t+" hook";if(e)for(var o=0,r=e.length;o<r;o++)Pa(e[o],a,null,a,n);a._hasHookEvent&&a.$emit("hook:"+t),la()}var ee=[],ne=[],oe={},re=!1,ie=!1,se=0,de=0,ue=Date.now;if(R&&!Q){var le=window.performance;le&&"function"==typeof le.now&&ue()>document.createEvent("Event").timeStamp&&(ue=function(){return le.now()})}function ce(){var a,t;for(de=ue(),ie=!0,ee.sort((function(a,t){return a.id-t.id})),se=0;se<ee.length;se++)(a=ee[se]).before&&a.before(),t=a.id,oe[t]=null,a.run();var e=ne.slice(),n=ee.slice();se=ee.length=ne.length=0,oe={},re=ie=!1,function(a){for(var t=0;t<a.length;t++)a[t]._inactive=!0,Jt(a[t],!0)}(e),function(a){for(var t=a.length;t--;){var e=a[t],n=e.vm;n._watcher===e&&n._isMounted&&!n._isDestroyed&&te(n,"updated")}}(n),ta&&M.devtools&&ta.emit("flush")}var fe=0,pe=function(a,t,e,n,o){this.vm=a,o&&(a._watcher=this),a._watchers.push(this),n?(this.deep=!!n.deep,this.user=!!n.user,this.lazy=!!n.lazy,this.sync=!!n.sync,this.before=n.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=e,this.id=++fe,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new na,this.newDepIds=new na,this.expression="","function"==typeof t?this.getter=t:(this.getter=function(a){if(!I.test(a)){var t=a.split(".");return function(a){for(var e=0;e<t.length;e++){if(!a)return;a=a[t[e]]}return a}}}(t),this.getter||(this.getter=F)),this.value=this.lazy?void 0:this.get()};pe.prototype.get=function(){var a;ua(this);var t=this.vm;try{a=this.getter.call(t,t)}catch(a){if(!this.user)throw a;Ia(a,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&tt(a),la(),this.cleanupDeps()}return a},pe.prototype.addDep=function(a){var t=a.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(a),this.depIds.has(t)||a.addSub(this))},pe.prototype.cleanupDeps=function(){for(var a=this.deps.length;a--;){var t=this.deps[a];this.newDepIds.has(t.id)||t.removeSub(this)}var e=this.depIds;this.depIds=this.newDepIds,this.newDepIds=e,this.newDepIds.clear(),e=this.deps,this.deps=this.newDeps,this.newDeps=e,this.newDeps.length=0},pe.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(a){var t=a.id;if(null==oe[t]){if(oe[t]=!0,ie){for(var e=ee.length-1;e>se&&ee[e].id>a.id;)e--;ee.splice(e+1,0,a)}else ee.push(a);re||(re=!0,Ja(ce))}}(this)},pe.prototype.run=function(){if(this.active){var a=this.get();if(a!==this.value||i(a)||this.deep){var t=this.value;if(this.value=a,this.user){var e='callback for watcher "'+this.expression+'"';Pa(this.cb,this.vm,[a,t],this.vm,e)}else this.cb.call(this.vm,a,t)}}},pe.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},pe.prototype.depend=function(){for(var a=this.deps.length;a--;)this.deps[a].depend()},pe.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||m(this.vm._watchers,this);for(var a=this.deps.length;a--;)this.deps[a].removeSub(this);this.active=!1}};var ye={enumerable:!0,configurable:!0,get:F,set:F};function me(a,t,e){ye.get=function(){return this[t][e]},ye.set=function(a){this[t][e]=a},Object.defineProperty(a,e,ye)}var he={lazy:!0};function Ae(a,t,e){var n=!aa();"function"==typeof e?(ye.get=n?ve(t):ge(e),ye.set=F):(ye.get=e.get?n&&!1!==e.cache?ve(t):ge(e.get):F,ye.set=e.set||F),Object.defineProperty(a,t,ye)}function ve(a){return function(){var t=this._computedWatchers&&this._computedWatchers[a];if(t)return t.dirty&&t.evaluate(),sa.target&&t.depend(),t.value}}function ge(a){return function(){return a.call(this,this)}}function be(a,t,e,n){return d(e)&&(n=e,e=e.handler),"string"==typeof e&&(e=a[e]),a.$watch(t,e,n)}var Ce=0;function _e(a){var t=a.options;if(a.super){var e=_e(a.super);if(e!==a.superOptions){a.superOptions=e;var n=function(a){var t,e=a.options,n=a.sealedOptions;for(var o in e)e[o]!==n[o]&&(t||(t={}),t[o]=e[o]);return t}(a);n&&B(a.extendOptions,n),(t=a.options=ja(e,a.extendOptions)).name&&(t.components[t.name]=a)}}return t}function xe(a){this._init(a)}function we(a){return a&&(a.Ctor.options.name||a.tag)}function $e(a,t){return Array.isArray(a)?a.indexOf(t)>-1:"string"==typeof a?a.split(",").indexOf(t)>-1:(e=a,!("[object RegExp]"!==s.call(e))&&a.test(t));var e}function Be(a,t){var e=a.cache,n=a.keys,o=a._vnode;for(var r in e){var i=e[r];if(i){var s=i.name;s&&!t(s)&&ke(e,r,n,o)}}}function ke(a,t,e,n){var o=a[t];!o||n&&o.tag===n.tag||o.componentInstance.$destroy(),a[t]=null,m(e,t)}!function(t){t.prototype._init=function(t){var e=this;e._uid=Ce++,e._isVue=!0,t&&t._isComponent?function(a,t){var e=a.$options=Object.create(a.constructor.options),n=t._parentVnode;e.parent=t.parent,e._parentVnode=n;var o=n.componentOptions;e.propsData=o.propsData,e._parentListeners=o.listeners,e._renderChildren=o.children,e._componentTag=o.tag,t.render&&(e.render=t.render,e.staticRenderFns=t.staticRenderFns)}(e,t):e.$options=ja(_e(e.constructor),t||{},e),e._renderProxy=e,e._self=e,function(a){var t=a.$options,e=t.parent;if(e&&!t.abstract){for(;e.$options.abstract&&e.$parent;)e=e.$parent;e.$children.push(a)}a.$parent=e,a.$root=e?e.$root:a,a.$children=[],a.$refs={},a._watcher=null,a._inactive=null,a._directInactive=!1,a._isMounted=!1,a._isDestroyed=!1,a._isBeingDestroyed=!1}(e),function(a){a._events=Object.create(null),a._hasHookEvent=!1;var t=a.$options._parentListeners;t&&Xt(a,t)}(e),function(t){t._vnode=null,t._staticTrees=null;var e=t.$options,n=t.$vnode=e._parentVnode,o=n&&n.context;t.$slots=ft(e._renderChildren,o),t.$scopedSlots=a,t._c=function(a,e,n,o){return It(t,a,e,n,o,!1)},t.$createElement=function(a,e,n,o){return It(t,a,e,n,o,!0)};var r=n&&n.data;xa(t,"$attrs",r&&r.attrs||a,null,!0),xa(t,"$listeners",e._parentListeners||a,null,!0)}(e),te(e,"beforeCreate"),function(a){var t=ct(a.$options.inject,a);t&&(ba(!1),Object.keys(t).forEach((function(e){xa(a,e,t[e])})),ba(!0))}(e),function(a){a._watchers=[];var t=a.$options;t.props&&function(a,t){var e=a.$options.propsData||{},n=a._props={},o=a.$options._propKeys=[];a.$parent&&ba(!1);var r=function(r){o.push(r);var i=Na(r,t,e,a);xa(n,r,i),r in a||me(a,"_props",r)};for(var i in t)r(i);ba(!0)}(a,t.props),t.methods&&function(a,t){for(var e in a.$options.props,t)a[e]="function"!=typeof t[e]?F:w(t[e],a)}(a,t.methods),t.data?function(a){var t=a.$options.data;d(t=a._data="function"==typeof t?function(a,t){ua();try{return a.call(t,t)}catch(a){return Ia(a,t,"data()"),{}}finally{la()}}(t,a):t||{})||(t={});for(var e,n=Object.keys(t),o=a.$options.props,r=(a.$options.methods,n.length);r--;){var i=n[r];o&&A(o,i)||(e=void 0,36===(e=(i+"").charCodeAt(0))||95===e)||me(a,"_data",i)}_a(t,!0)}(a):_a(a._data={},!0),t.computed&&function(a,t){var e=a._computedWatchers=Object.create(null),n=aa();for(var o in t){var r=t[o],i="function"==typeof r?r:r.get;n||(e[o]=new pe(a,i||F,F,he)),o in a||Ae(a,o,r)}}(a,t.computed),t.watch&&t.watch!==Z&&function(a,t){for(var e in t){var n=t[e];if(Array.isArray(n))for(var o=0;o<n.length;o++)be(a,e,n[o]);else be(a,e,n)}}(a,t.watch)}(e),function(a){var t=a.$options.provide;t&&(a._provided="function"==typeof t?t.call(a):t)}(e),te(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(xe),function(a){Object.defineProperty(a.prototype,"$data",{get:function(){return this._data}}),Object.defineProperty(a.prototype,"$props",{get:function(){return this._props}}),a.prototype.$set=wa,a.prototype.$delete=$a,a.prototype.$watch=function(a,t,e){var n=this;if(d(t))return be(n,a,t,e);(e=e||{}).user=!0;var o=new pe(n,a,t,e);if(e.immediate){var r='callback for immediate watcher "'+o.expression+'"';ua(),Pa(t,n,[o.value],n,r),la()}return function(){o.teardown()}}}(xe),function(a){var t=/^hook:/;a.prototype.$on=function(a,e){var n=this;if(Array.isArray(a))for(var o=0,r=a.length;o<r;o++)n.$on(a[o],e);else(n._events[a]||(n._events[a]=[])).push(e),t.test(a)&&(n._hasHookEvent=!0);return n},a.prototype.$once=function(a,t){var e=this;function n(){e.$off(a,n),t.apply(e,arguments)}return n.fn=t,e.$on(a,n),e},a.prototype.$off=function(a,t){var e=this;if(!arguments.length)return e._events=Object.create(null),e;if(Array.isArray(a)){for(var n=0,o=a.length;n<o;n++)e.$off(a[n],t);return e}var r,i=e._events[a];if(!i)return e;if(!t)return e._events[a]=null,e;for(var s=i.length;s--;)if((r=i[s])===t||r.fn===t){i.splice(s,1);break}return e},a.prototype.$emit=function(a){var t=this,e=t._events[a];if(e){e=e.length>1?$(e):e;for(var n=$(arguments,1),o='event handler for "'+a+'"',r=0,i=e.length;r<i;r++)Pa(e[r],t,n,t,o)}return t}}(xe),function(a){a.prototype._update=function(a,t){var e=this,n=e.$el,o=e._vnode,r=Zt(e);e._vnode=a,e.$el=o?e.__patch__(o,a):e.__patch__(e.$el,a,t,!1),r(),n&&(n.__vue__=null),e.$el&&(e.$el.__vue__=e),e.$vnode&&e.$parent&&e.$vnode===e.$parent._vnode&&(e.$parent.$el=e.$el)},a.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},a.prototype.$destroy=function(){var a=this;if(!a._isBeingDestroyed){te(a,"beforeDestroy"),a._isBeingDestroyed=!0;var t=a.$parent;!t||t._isBeingDestroyed||a.$options.abstract||m(t.$children,a),a._watcher&&a._watcher.teardown();for(var e=a._watchers.length;e--;)a._watchers[e].teardown();a._data.__ob__&&a._data.__ob__.vmCount--,a._isDestroyed=!0,a.__patch__(a._vnode,null),te(a,"destroyed"),a.$off(),a.$el&&(a.$el.__vue__=null),a.$vnode&&(a.$vnode.parent=null)}}}(xe),function(a){qt(a.prototype),a.prototype.$nextTick=function(a){return Ja(a,this)},a.prototype._render=function(){var a,t=this,e=t.$options,n=e.render,o=e._parentVnode;o&&(t.$scopedSlots=mt(o.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=o;try{zt=t,a=n.call(t._renderProxy,t.$createElement)}catch(e){Ia(e,t,"render"),a=t._vnode}finally{zt=null}return Array.isArray(a)&&1===a.length&&(a=a[0]),a instanceof ca||(a=pa()),a.parent=o,a}}(xe);var Fe=[String,RegExp,Array],Te={name:"keep-alive",abstract:!0,props:{include:Fe,exclude:Fe,max:[String,Number]},methods:{cacheVNode:function(){var a=this,t=a.cache,e=a.keys,n=a.vnodeToCache,o=a.keyToCache;if(n){var r=n.tag,i=n.componentInstance,s=n.componentOptions;t[o]={name:we(s),tag:r,componentInstance:i},e.push(o),this.max&&e.length>parseInt(this.max)&&ke(t,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var a in this.cache)ke(this.cache,a,this.keys)},mounted:function(){var a=this;this.cacheVNode(),this.$watch("include",(function(t){Be(a,(function(a){return $e(t,a)}))})),this.$watch("exclude",(function(t){Be(a,(function(a){return!$e(t,a)}))}))},updated:function(){this.cacheVNode()},render:function(){var a=this.$slots.default,t=Wt(a),e=t&&t.componentOptions;if(e){var n=we(e),o=this.include,r=this.exclude;if(o&&(!n||!$e(o,n))||r&&n&&$e(r,n))return t;var i=this.cache,s=this.keys,d=null==t.key?e.Ctor.cid+(e.tag?"::"+e.tag:""):t.key;i[d]?(t.componentInstance=i[d].componentInstance,m(s,d),s.push(d)):(this.vnodeToCache=t,this.keyToCache=d),t.data.keepAlive=!0}return t||a&&a[0]}},Se={KeepAlive:Te};!function(a){var t={get:function(){return M}};Object.defineProperty(a,"config",t),a.util={warn:ra,extend:B,mergeOptions:ja,defineReactive:xa},a.set=wa,a.delete=$a,a.nextTick=Ja,a.observable=function(a){return _a(a),a},a.options=Object.create(null),N.forEach((function(t){a.options[t+"s"]=Object.create(null)})),a.options._base=a,B(a.options.components,Se),function(a){a.use=function(a){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(a)>-1)return this;var e=$(arguments,1);return e.unshift(this),"function"==typeof a.install?a.install.apply(a,e):"function"==typeof a&&a.apply(null,e),t.push(a),this}}(a),function(a){a.mixin=function(a){return this.options=ja(this.options,a),this}}(a),function(a){a.cid=0;var t=1;a.extend=function(a){a=a||{};var e=this,n=e.cid,o=a._Ctor||(a._Ctor={});if(o[n])return o[n];var r=a.name||e.options.name,i=function(a){this._init(a)};return(i.prototype=Object.create(e.prototype)).constructor=i,i.cid=t++,i.options=ja(e.options,a),i.super=e,i.options.props&&function(a){var t=a.options.props;for(var e in t)me(a.prototype,"_props",e)}(i),i.options.computed&&function(a){var t=a.options.computed;for(var e in t)Ae(a.prototype,e,t[e])}(i),i.extend=e.extend,i.mixin=e.mixin,i.use=e.use,N.forEach((function(a){i[a]=e[a]})),r&&(i.options.components[r]=i),i.superOptions=e.options,i.extendOptions=a,i.sealedOptions=B({},i.options),o[n]=i,i}}(a),function(a){N.forEach((function(t){a[t]=function(a,e){return e?("component"===t&&d(e)&&(e.name=e.name||a,e=this.options._base.extend(e)),"directive"===t&&"function"==typeof e&&(e={bind:e,update:e}),this.options[t+"s"][a]=e,e):this.options[t+"s"][a]}}))}(a)}(xe),Object.defineProperty(xe.prototype,"$isServer",{get:aa}),Object.defineProperty(xe.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(xe,"FunctionalRenderContext",{value:jt}),xe.version="2.6.14";var Ee=p("style,class"),qe=p("input,textarea,option,select,progress"),je=p("contenteditable,draggable,spellcheck"),De=p("events,caret,typing,plaintext-only"),Ne=p("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),Oe="http://www.w3.org/1999/xlink",Me=function(a){return":"===a.charAt(5)&&"xlink"===a.slice(0,5)},Ge=function(a){return Me(a)?a.slice(6,a.length):""},Le=function(a){return null==a||!1===a};function Ie(a,t){return{staticClass:Pe(a.staticClass,t.staticClass),class:n(a.class)?[a.class,t.class]:t.class}}function Pe(a,t){return a?t?a+" "+t:a:t||""}function Re(a){return Array.isArray(a)?function(a){for(var t,e="",o=0,r=a.length;o<r;o++)n(t=Re(a[o]))&&""!==t&&(e&&(e+=" "),e+=t);return e}(a):i(a)?function(a){var t="";for(var e in a)a[e]&&(t&&(t+=" "),t+=e);return t}(a):"string"==typeof a?a:""}var ze={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},He=p("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),We=p("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Qe=function(a){return He(a)||We(a)},Ue=Object.create(null),Ye=p("text,number,password,search,email,tel,url"),Xe=Object.freeze({createElement:function(a,t){var e=document.createElement(a);return"select"!==a||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&e.setAttribute("multiple","multiple"),e},createElementNS:function(a,t){return document.createElementNS(ze[a],t)},createTextNode:function(a){return document.createTextNode(a)},createComment:function(a){return document.createComment(a)},insertBefore:function(a,t,e){a.insertBefore(t,e)},removeChild:function(a,t){a.removeChild(t)},appendChild:function(a,t){a.appendChild(t)},parentNode:function(a){return a.parentNode},nextSibling:function(a){return a.nextSibling},tagName:function(a){return a.tagName},setTextContent:function(a,t){a.textContent=t},setStyleScope:function(a,t){a.setAttribute(t,"")}}),Ve={create:function(a,t){Ze(t)},update:function(a,t){a.data.ref!==t.data.ref&&(Ze(a,!0),Ze(t))},destroy:function(a){Ze(a,!0)}};function Ze(a,t){var e=a.data.ref;if(n(e)){var o=a.context,r=a.componentInstance||a.elm,i=o.$refs;t?Array.isArray(i[e])?m(i[e],r):i[e]===r&&(i[e]=void 0):a.data.refInFor?Array.isArray(i[e])?i[e].indexOf(r)<0&&i[e].push(r):i[e]=[r]:i[e]=r}}var Ke=new ca("",{},[]),Je=["create","activate","update","remove","destroy"];function an(a,e){return a.key===e.key&&a.asyncFactory===e.asyncFactory&&(a.tag===e.tag&&a.isComment===e.isComment&&n(a.data)===n(e.data)&&function(a,t){if("input"!==a.tag)return!0;var e,o=n(e=a.data)&&n(e=e.attrs)&&e.type,r=n(e=t.data)&&n(e=e.attrs)&&e.type;return o===r||Ye(o)&&Ye(r)}(a,e)||o(a.isAsyncPlaceholder)&&t(e.asyncFactory.error))}function tn(a,t,e){var o,r,i={};for(o=t;o<=e;++o)n(r=a[o].key)&&(i[r]=o);return i}var en={create:nn,update:nn,destroy:function(a){nn(a,Ke)}};function nn(a,t){(a.data.directives||t.data.directives)&&function(a,t){var e,n,o,r=a===Ke,i=t===Ke,s=rn(a.data.directives,a.context),d=rn(t.data.directives,t.context),u=[],l=[];for(e in d)n=s[e],o=d[e],n?(o.oldValue=n.value,o.oldArg=n.arg,dn(o,"update",t,a),o.def&&o.def.componentUpdated&&l.push(o)):(dn(o,"bind",t,a),o.def&&o.def.inserted&&u.push(o));if(u.length){var c=function(){for(var e=0;e<u.length;e++)dn(u[e],"inserted",t,a)};r?it(t,"insert",c):c()}if(l.length&&it(t,"postpatch",(function(){for(var e=0;e<l.length;e++)dn(l[e],"componentUpdated",t,a)})),!r)for(e in s)d[e]||dn(s[e],"unbind",a,a,i)}(a,t)}var on=Object.create(null);function rn(a,t){var e,n,o=Object.create(null);if(!a)return o;for(e=0;e<a.length;e++)(n=a[e]).modifiers||(n.modifiers=on),o[sn(n)]=n,n.def=Da(t.$options,"directives",n.name);return o}function sn(a){return a.rawName||a.name+"."+Object.keys(a.modifiers||{}).join(".")}function dn(a,t,e,n,o){var r=a.def&&a.def[t];if(r)try{r(e.elm,a,e,n,o)}catch(n){Ia(n,e.context,"directive "+a.name+" "+t+" hook")}}var un=[Ve,en];function ln(a,e){var o=e.componentOptions;if(!(n(o)&&!1===o.Ctor.options.inheritAttrs||t(a.data.attrs)&&t(e.data.attrs))){var r,i,s=e.elm,d=a.data.attrs||{},u=e.data.attrs||{};for(r in n(u.__ob__)&&(u=e.data.attrs=B({},u)),u)i=u[r],d[r]!==i&&cn(s,r,i,e.data.pre);for(r in(Q||Y)&&u.value!==d.value&&cn(s,"value",u.value),d)t(u[r])&&(Me(r)?s.removeAttributeNS(Oe,Ge(r)):je(r)||s.removeAttribute(r))}}function cn(a,t,e,n){n||a.tagName.indexOf("-")>-1?fn(a,t,e):Ne(t)?Le(e)?a.removeAttribute(t):(e="allowfullscreen"===t&&"EMBED"===a.tagName?"true":t,a.setAttribute(t,e)):je(t)?a.setAttribute(t,function(a,t){return Le(t)||"false"===t?"false":"contenteditable"===a&&De(t)?t:"true"}(t,e)):Me(t)?Le(e)?a.removeAttributeNS(Oe,Ge(t)):a.setAttributeNS(Oe,t,e):fn(a,t,e)}function fn(a,t,e){if(Le(e))a.removeAttribute(t);else{if(Q&&!U&&"TEXTAREA"===a.tagName&&"placeholder"===t&&""!==e&&!a.__ieph){var n=function(t){t.stopImmediatePropagation(),a.removeEventListener("input",n)};a.addEventListener("input",n),a.__ieph=!0}a.setAttribute(t,e)}}var pn={create:ln,update:ln};function yn(a,e){var o=e.elm,r=e.data,i=a.data;if(!(t(r.staticClass)&&t(r.class)&&(t(i)||t(i.staticClass)&&t(i.class)))){var s=function(a){for(var t=a.data,e=a,o=a;n(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(t=Ie(o.data,t));for(;n(e=e.parent);)e&&e.data&&(t=Ie(t,e.data));return r=t.staticClass,i=t.class,n(r)||n(i)?Pe(r,Re(i)):"";var r,i}(e),d=o._transitionClasses;n(d)&&(s=Pe(s,Re(d))),s!==o._prevClass&&(o.setAttribute("class",s),o._prevClass=s)}}var mn,hn={create:yn,update:yn};function An(a,t,e){var n=mn;return function o(){var r=t.apply(null,arguments);null!==r&&bn(a,o,e,n)}}var vn=Wa&&!(V&&Number(V[1])<=53);function gn(a,t,e,n){if(vn){var o=de,r=t;t=r._wrapper=function(a){if(a.target===a.currentTarget||a.timeStamp>=o||a.timeStamp<=0||a.target.ownerDocument!==document)return r.apply(this,arguments)}}mn.addEventListener(a,t,K?{capture:e,passive:n}:e)}function bn(a,t,e,n){(n||mn).removeEventListener(a,t._wrapper||t,e)}function Cn(a,e){if(!t(a.data.on)||!t(e.data.on)){var o=e.data.on||{},r=a.data.on||{};mn=e.elm,function(a){if(n(a.__r)){var t=Q?"change":"input";a[t]=[].concat(a.__r,a[t]||[]),delete a.__r}n(a.__c)&&(a.change=[].concat(a.__c,a.change||[]),delete a.__c)}(o),rt(o,r,gn,bn,An,e.context),mn=void 0}}var _n,xn={create:Cn,update:Cn};function wn(a,e){if(!t(a.data.domProps)||!t(e.data.domProps)){var o,r,i=e.elm,s=a.data.domProps||{},d=e.data.domProps||{};for(o in n(d.__ob__)&&(d=e.data.domProps=B({},d)),s)o in d||(i[o]="");for(o in d){if(r=d[o],"textContent"===o||"innerHTML"===o){if(e.children&&(e.children.length=0),r===s[o])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===o&&"PROGRESS"!==i.tagName){i._value=r;var u=t(r)?"":String(r);$n(i,u)&&(i.value=u)}else if("innerHTML"===o&&We(i.tagName)&&t(i.innerHTML)){(_n=_n||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var l=_n.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;l.firstChild;)i.appendChild(l.firstChild)}else if(r!==s[o])try{i[o]=r}catch(a){}}}}function $n(a,t){return!a.composing&&("OPTION"===a.tagName||function(a,t){var e=!0;try{e=document.activeElement!==a}catch(a){}return e&&a.value!==t}(a,t)||function(a,t){var e=a.value,o=a._vModifiers;if(n(o)){if(o.number)return f(e)!==f(t);if(o.trim)return e.trim()!==t.trim()}return e!==t}(a,t))}var Bn={create:wn,update:wn},kn=v((function(a){var t={},e=/:(.+)/;return a.split(/;(?![^(]*\))/g).forEach((function(a){if(a){var n=a.split(e);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}));function Fn(a){var t=Tn(a.style);return a.staticStyle?B(a.staticStyle,t):t}function Tn(a){return Array.isArray(a)?k(a):"string"==typeof a?kn(a):a}var Sn,En=/^--/,qn=/\s*!important$/,jn=function(a,t,e){if(En.test(t))a.style.setProperty(t,e);else if(qn.test(e))a.style.setProperty(x(t),e.replace(qn,""),"important");else{var n=Nn(t);if(Array.isArray(e))for(var o=0,r=e.length;o<r;o++)a.style[n]=e[o];else a.style[n]=e}},Dn=["Webkit","Moz","ms"],Nn=v((function(a){if(Sn=Sn||document.createElement("div").style,"filter"!==(a=b(a))&&a in Sn)return a;for(var t=a.charAt(0).toUpperCase()+a.slice(1),e=0;e<Dn.length;e++){var n=Dn[e]+t;if(n in Sn)return n}}));function On(a,e){var o=e.data,r=a.data;if(!(t(o.staticStyle)&&t(o.style)&&t(r.staticStyle)&&t(r.style))){var i,s,d=e.elm,u=r.staticStyle,l=r.normalizedStyle||r.style||{},c=u||l,f=Tn(e.data.style)||{};e.data.normalizedStyle=n(f.__ob__)?B({},f):f;var p=function(a,t){for(var e,n={},o=a;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(e=Fn(o.data))&&B(n,e);(e=Fn(a.data))&&B(n,e);for(var r=a;r=r.parent;)r.data&&(e=Fn(r.data))&&B(n,e);return n}(e);for(s in c)t(p[s])&&jn(d,s,"");for(s in p)(i=p[s])!==c[s]&&jn(d,s,null==i?"":i)}}var Mn={create:On,update:On},Gn=/\s+/;function Ln(a,t){if(t&&(t=t.trim()))if(a.classList)t.indexOf(" ")>-1?t.split(Gn).forEach((function(t){return a.classList.add(t)})):a.classList.add(t);else{var e=" "+(a.getAttribute("class")||"")+" ";e.indexOf(" "+t+" ")<0&&a.setAttribute("class",(e+t).trim())}}function In(a,t){if(t&&(t=t.trim()))if(a.classList)t.indexOf(" ")>-1?t.split(Gn).forEach((function(t){return a.classList.remove(t)})):a.classList.remove(t),a.classList.length||a.removeAttribute("class");else{for(var e=" "+(a.getAttribute("class")||"")+" ",n=" "+t+" ";e.indexOf(n)>=0;)e=e.replace(n," ");(e=e.trim())?a.setAttribute("class",e):a.removeAttribute("class")}}function Pn(a){if(a){if("object"==typeof a){var t={};return!1!==a.css&&B(t,Rn(a.name||"v")),B(t,a),t}return"string"==typeof a?Rn(a):void 0}}var Rn=v((function(a){return{enterClass:a+"-enter",enterToClass:a+"-enter-to",enterActiveClass:a+"-enter-active",leaveClass:a+"-leave",leaveToClass:a+"-leave-to",leaveActiveClass:a+"-leave-active"}})),zn=R&&!U,Hn="transition",Wn="animation",Qn="transition",Un="transitionend",Yn="animation",Xn="animationend";zn&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Qn="WebkitTransition",Un="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Yn="WebkitAnimation",Xn="webkitAnimationEnd"));var Vn=R?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(a){return a()};function Zn(a){Vn((function(){Vn(a)}))}function Kn(a,t){var e=a._transitionClasses||(a._transitionClasses=[]);e.indexOf(t)<0&&(e.push(t),Ln(a,t))}function Jn(a,t){a._transitionClasses&&m(a._transitionClasses,t),In(a,t)}function ao(a,t,e){var n=eo(a,t),o=n.type,r=n.timeout,i=n.propCount;if(!o)return e();var s=o===Hn?Un:Xn,d=0,u=function(){a.removeEventListener(s,l),e()},l=function(t){t.target===a&&++d>=i&&u()};setTimeout((function(){d<i&&u()}),r+1),a.addEventListener(s,l)}var to=/\b(transform|all)(,|$)/;function eo(a,t){var e,n=window.getComputedStyle(a),o=(n[Qn+"Delay"]||"").split(", "),r=(n[Qn+"Duration"]||"").split(", "),i=no(o,r),s=(n[Yn+"Delay"]||"").split(", "),d=(n[Yn+"Duration"]||"").split(", "),u=no(s,d),l=0,c=0;return t===Hn?i>0&&(e=Hn,l=i,c=r.length):t===Wn?u>0&&(e=Wn,l=u,c=d.length):c=(e=(l=Math.max(i,u))>0?i>u?Hn:Wn:null)?e===Hn?r.length:d.length:0,{type:e,timeout:l,propCount:c,hasTransform:e===Hn&&to.test(n[Qn+"Property"])}}function no(a,t){for(;a.length<t.length;)a=a.concat(a);return Math.max.apply(null,t.map((function(t,e){return oo(t)+oo(a[e])})))}function oo(a){return 1e3*Number(a.slice(0,-1).replace(",","."))}function ro(a,e){var o=a.elm;n(o._leaveCb)&&(o._leaveCb.cancelled=!0,o._leaveCb());var r=Pn(a.data.transition);if(!t(r)&&!n(o._enterCb)&&1===o.nodeType){for(var s=r.css,d=r.type,u=r.enterClass,l=r.enterToClass,c=r.enterActiveClass,p=r.appearClass,y=r.appearToClass,m=r.appearActiveClass,h=r.beforeEnter,A=r.enter,v=r.afterEnter,g=r.enterCancelled,b=r.beforeAppear,C=r.appear,_=r.afterAppear,x=r.appearCancelled,w=r.duration,$=Vt,B=Vt.$vnode;B&&B.parent;)$=B.context,B=B.parent;var k=!$._isMounted||!a.isRootInsert;if(!k||C||""===C){var F=k&&p?p:u,T=k&&m?m:c,S=k&&y?y:l,E=k&&b||h,q=k&&"function"==typeof C?C:A,D=k&&_||v,N=k&&x||g,O=f(i(w)?w.enter:w),M=!1!==s&&!U,G=uo(q),L=o._enterCb=j((function(){M&&(Jn(o,S),Jn(o,T)),L.cancelled?(M&&Jn(o,F),N&&N(o)):D&&D(o),o._enterCb=null}));a.data.show||it(a,"insert",(function(){var t=o.parentNode,e=t&&t._pending&&t._pending[a.key];e&&e.tag===a.tag&&e.elm._leaveCb&&e.elm._leaveCb(),q&&q(o,L)})),E&&E(o),M&&(Kn(o,F),Kn(o,T),Zn((function(){Jn(o,F),L.cancelled||(Kn(o,S),G||(so(O)?setTimeout(L,O):ao(o,d,L)))}))),a.data.show&&(e&&e(),q&&q(o,L)),M||G||L()}}}function io(a,e){var o=a.elm;n(o._enterCb)&&(o._enterCb.cancelled=!0,o._enterCb());var r=Pn(a.data.transition);if(t(r)||1!==o.nodeType)return e();if(!n(o._leaveCb)){var s=r.css,d=r.type,u=r.leaveClass,l=r.leaveToClass,c=r.leaveActiveClass,p=r.beforeLeave,y=r.leave,m=r.afterLeave,h=r.leaveCancelled,A=r.delayLeave,v=r.duration,g=!1!==s&&!U,b=uo(y),C=f(i(v)?v.leave:v),_=o._leaveCb=j((function(){o.parentNode&&o.parentNode._pending&&(o.parentNode._pending[a.key]=null),g&&(Jn(o,l),Jn(o,c)),_.cancelled?(g&&Jn(o,u),h&&h(o)):(e(),m&&m(o)),o._leaveCb=null}));A?A(x):x()}function x(){_.cancelled||(!a.data.show&&o.parentNode&&((o.parentNode._pending||(o.parentNode._pending={}))[a.key]=a),p&&p(o),g&&(Kn(o,u),Kn(o,c),Zn((function(){Jn(o,u),_.cancelled||(Kn(o,l),b||(so(C)?setTimeout(_,C):ao(o,d,_)))}))),y&&y(o,_),g||b||_())}}function so(a){return"number"==typeof a&&!isNaN(a)}function uo(a){if(t(a))return!1;var e=a.fns;return n(e)?uo(Array.isArray(e)?e[0]:e):(a._length||a.length)>1}function lo(a,t){!0!==t.data.show&&ro(t)}var co=function(a){var e,i,s={},d=a.modules,u=a.nodeOps;for(e=0;e<Je.length;++e)for(s[Je[e]]=[],i=0;i<d.length;++i)n(d[i][Je[e]])&&s[Je[e]].push(d[i][Je[e]]);function l(a){var t=u.parentNode(a);n(t)&&u.removeChild(t,a)}function c(a,t,e,r,i,d,l){if(n(a.elm)&&n(d)&&(a=d[l]=ma(a)),a.isRootInsert=!i,!function(a,t,e,r){var i=a.data;if(n(i)){var d=n(a.componentInstance)&&i.keepAlive;if(n(i=i.hook)&&n(i=i.init)&&i(a,!1),n(a.componentInstance))return f(a,t),y(e,a.elm,r),o(d)&&function(a,t,e,o){for(var r,i=a;i.componentInstance;)if(n(r=(i=i.componentInstance._vnode).data)&&n(r=r.transition)){for(r=0;r<s.activate.length;++r)s.activate[r](Ke,i);t.push(i);break}y(e,a.elm,o)}(a,t,e,r),!0}}(a,t,e,r)){var c=a.data,p=a.children,h=a.tag;n(h)?(a.elm=a.ns?u.createElementNS(a.ns,h):u.createElement(h,a),v(a),m(a,p,t),n(c)&&A(a,t),y(e,a.elm,r)):o(a.isComment)?(a.elm=u.createComment(a.text),y(e,a.elm,r)):(a.elm=u.createTextNode(a.text),y(e,a.elm,r))}}function f(a,t){n(a.data.pendingInsert)&&(t.push.apply(t,a.data.pendingInsert),a.data.pendingInsert=null),a.elm=a.componentInstance.$el,h(a)?(A(a,t),v(a)):(Ze(a),t.push(a))}function y(a,t,e){n(a)&&(n(e)?u.parentNode(e)===a&&u.insertBefore(a,t,e):u.appendChild(a,t))}function m(a,t,e){if(Array.isArray(t))for(var n=0;n<t.length;++n)c(t[n],e,a.elm,null,!0,t,n);else r(a.text)&&u.appendChild(a.elm,u.createTextNode(String(a.text)))}function h(a){for(;a.componentInstance;)a=a.componentInstance._vnode;return n(a.tag)}function A(a,t){for(var o=0;o<s.create.length;++o)s.create[o](Ke,a);n(e=a.data.hook)&&(n(e.create)&&e.create(Ke,a),n(e.insert)&&t.push(a))}function v(a){var t;if(n(t=a.fnScopeId))u.setStyleScope(a.elm,t);else for(var e=a;e;)n(t=e.context)&&n(t=t.$options._scopeId)&&u.setStyleScope(a.elm,t),e=e.parent;n(t=Vt)&&t!==a.context&&t!==a.fnContext&&n(t=t.$options._scopeId)&&u.setStyleScope(a.elm,t)}function g(a,t,e,n,o,r){for(;n<=o;++n)c(e[n],r,a,t,!1,e,n)}function b(a){var t,e,o=a.data;if(n(o))for(n(t=o.hook)&&n(t=t.destroy)&&t(a),t=0;t<s.destroy.length;++t)s.destroy[t](a);if(n(t=a.children))for(e=0;e<a.children.length;++e)b(a.children[e])}function C(a,t,e){for(;t<=e;++t){var o=a[t];n(o)&&(n(o.tag)?(_(o),b(o)):l(o.elm))}}function _(a,t){if(n(t)||n(a.data)){var e,o=s.remove.length+1;for(n(t)?t.listeners+=o:t=function(a,t){function e(){0==--e.listeners&&l(a)}return e.listeners=t,e}(a.elm,o),n(e=a.componentInstance)&&n(e=e._vnode)&&n(e.data)&&_(e,t),e=0;e<s.remove.length;++e)s.remove[e](a,t);n(e=a.data.hook)&&n(e=e.remove)?e(a,t):t()}else l(a.elm)}function x(a,t,e,o){for(var r=e;r<o;r++){var i=t[r];if(n(i)&&an(a,i))return r}}function w(a,e,r,i,d,l){if(a!==e){n(e.elm)&&n(i)&&(e=i[d]=ma(e));var f=e.elm=a.elm;if(o(a.isAsyncPlaceholder))n(e.asyncFactory.resolved)?k(a.elm,e,r):e.isAsyncPlaceholder=!0;else if(o(e.isStatic)&&o(a.isStatic)&&e.key===a.key&&(o(e.isCloned)||o(e.isOnce)))e.componentInstance=a.componentInstance;else{var p,y=e.data;n(y)&&n(p=y.hook)&&n(p=p.prepatch)&&p(a,e);var m=a.children,A=e.children;if(n(y)&&h(e)){for(p=0;p<s.update.length;++p)s.update[p](a,e);n(p=y.hook)&&n(p=p.update)&&p(a,e)}t(e.text)?n(m)&&n(A)?m!==A&&function(a,e,o,r,i){for(var s,d,l,f=0,p=0,y=e.length-1,m=e[0],h=e[y],A=o.length-1,v=o[0],b=o[A],_=!i;f<=y&&p<=A;)t(m)?m=e[++f]:t(h)?h=e[--y]:an(m,v)?(w(m,v,r,o,p),m=e[++f],v=o[++p]):an(h,b)?(w(h,b,r,o,A),h=e[--y],b=o[--A]):an(m,b)?(w(m,b,r,o,A),_&&u.insertBefore(a,m.elm,u.nextSibling(h.elm)),m=e[++f],b=o[--A]):an(h,v)?(w(h,v,r,o,p),_&&u.insertBefore(a,h.elm,m.elm),h=e[--y],v=o[++p]):(t(s)&&(s=tn(e,f,y)),t(d=n(v.key)?s[v.key]:x(v,e,f,y))?c(v,r,a,m.elm,!1,o,p):an(l=e[d],v)?(w(l,v,r,o,p),e[d]=void 0,_&&u.insertBefore(a,l.elm,m.elm)):c(v,r,a,m.elm,!1,o,p),v=o[++p]);f>y?g(a,t(o[A+1])?null:o[A+1].elm,o,p,A,r):p>A&&C(e,f,y)}(f,m,A,r,l):n(A)?(n(a.text)&&u.setTextContent(f,""),g(f,null,A,0,A.length-1,r)):n(m)?C(m,0,m.length-1):n(a.text)&&u.setTextContent(f,""):a.text!==e.text&&u.setTextContent(f,e.text),n(y)&&n(p=y.hook)&&n(p=p.postpatch)&&p(a,e)}}}function $(a,t,e){if(o(e)&&n(a.parent))a.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}var B=p("attrs,class,staticClass,staticStyle,key");function k(a,t,e,r){var i,s=t.tag,d=t.data,u=t.children;if(r=r||d&&d.pre,t.elm=a,o(t.isComment)&&n(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(n(d)&&(n(i=d.hook)&&n(i=i.init)&&i(t,!0),n(i=t.componentInstance)))return f(t,e),!0;if(n(s)){if(n(u))if(a.hasChildNodes())if(n(i=d)&&n(i=i.domProps)&&n(i=i.innerHTML)){if(i!==a.innerHTML)return!1}else{for(var l=!0,c=a.firstChild,p=0;p<u.length;p++){if(!c||!k(c,u[p],e,r)){l=!1;break}c=c.nextSibling}if(!l||c)return!1}else m(t,u,e);if(n(d)){var y=!1;for(var h in d)if(!B(h)){y=!0,A(t,e);break}!y&&d.class&&tt(d.class)}}else a.data!==t.text&&(a.data=t.text);return!0}return function(a,e,r,i){if(!t(e)){var d,l=!1,f=[];if(t(a))l=!0,c(e,f);else{var p=n(a.nodeType);if(!p&&an(a,e))w(a,e,f,null,null,i);else{if(p){if(1===a.nodeType&&a.hasAttribute(D)&&(a.removeAttribute(D),r=!0),o(r)&&k(a,e,f))return $(e,f,!0),a;d=a,a=new ca(u.tagName(d).toLowerCase(),{},[],void 0,d)}var y=a.elm,m=u.parentNode(y);if(c(e,f,y._leaveCb?null:m,u.nextSibling(y)),n(e.parent))for(var A=e.parent,v=h(e);A;){for(var g=0;g<s.destroy.length;++g)s.destroy[g](A);if(A.elm=e.elm,v){for(var _=0;_<s.create.length;++_)s.create[_](Ke,A);var x=A.data.hook.insert;if(x.merged)for(var B=1;B<x.fns.length;B++)x.fns[B]()}else Ze(A);A=A.parent}n(m)?C([a],0,0):n(a.tag)&&b(a)}}return $(e,f,l),e.elm}n(a)&&b(a)}}({nodeOps:Xe,modules:[pn,hn,xn,Bn,Mn,R?{create:lo,activate:lo,remove:function(a,t){!0!==a.data.show?io(a,t):t()}}:{}].concat(un)});U&&document.addEventListener("selectionchange",(function(){var a=document.activeElement;a&&a.vmodel&&go(a,"input")}));var fo={inserted:function(a,t,e,n){"select"===e.tag?(n.elm&&!n.elm._vOptions?it(e,"postpatch",(function(){fo.componentUpdated(a,t,e)})):po(a,t,e.context),a._vOptions=[].map.call(a.options,ho)):("textarea"===e.tag||Ye(a.type))&&(a._vModifiers=t.modifiers,t.modifiers.lazy||(a.addEventListener("compositionstart",Ao),a.addEventListener("compositionend",vo),a.addEventListener("change",vo),U&&(a.vmodel=!0)))},componentUpdated:function(a,t,e){if("select"===e.tag){po(a,t,e.context);var n=a._vOptions,o=a._vOptions=[].map.call(a.options,ho);o.some((function(a,t){return!E(a,n[t])}))&&(a.multiple?t.value.some((function(a){return mo(a,o)})):t.value!==t.oldValue&&mo(t.value,o))&&go(a,"change")}}};function po(a,t,e){yo(a,t),(Q||Y)&&setTimeout((function(){yo(a,t)}),0)}function yo(a,t,e){var n=t.value,o=a.multiple;if(!o||Array.isArray(n)){for(var r,i,s=0,d=a.options.length;s<d;s++)if(i=a.options[s],o)r=q(n,ho(i))>-1,i.selected!==r&&(i.selected=r);else if(E(ho(i),n))return void(a.selectedIndex!==s&&(a.selectedIndex=s));o||(a.selectedIndex=-1)}}function mo(a,t){return t.every((function(t){return!E(t,a)}))}function ho(a){return"_value"in a?a._value:a.value}function Ao(a){a.target.composing=!0}function vo(a){a.target.composing&&(a.target.composing=!1,go(a.target,"input"))}function go(a,t){var e=document.createEvent("HTMLEvents");e.initEvent(t,!0,!0),a.dispatchEvent(e)}function bo(a){return!a.componentInstance||a.data&&a.data.transition?a:bo(a.componentInstance._vnode)}var Co={bind:function(a,t,e){var n=t.value,o=(e=bo(e)).data&&e.data.transition,r=a.__vOriginalDisplay="none"===a.style.display?"":a.style.display;n&&o?(e.data.show=!0,ro(e,(function(){a.style.display=r}))):a.style.display=n?r:"none"},update:function(a,t,e){var n=t.value;!n!=!t.oldValue&&((e=bo(e)).data&&e.data.transition?(e.data.show=!0,n?ro(e,(function(){a.style.display=a.__vOriginalDisplay})):io(e,(function(){a.style.display="none"}))):a.style.display=n?a.__vOriginalDisplay:"none")},unbind:function(a,t,e,n,o){o||(a.style.display=a.__vOriginalDisplay)}},_o={model:fo,show:Co},xo={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function wo(a){var t=a&&a.componentOptions;return t&&t.Ctor.options.abstract?wo(Wt(t.children)):a}function $o(a){var t={},e=a.$options;for(var n in e.propsData)t[n]=a[n];var o=e._parentListeners;for(var r in o)t[b(r)]=o[r];return t}function Bo(a,t){if(/\d-keep-alive$/.test(t.tag))return a("keep-alive",{props:t.componentOptions.propsData})}var ko=function(a){return a.tag||yt(a)},Fo=function(a){return"show"===a.name},To={name:"transition",props:xo,abstract:!0,render:function(a){var t=this,e=this.$slots.default;if(e&&(e=e.filter(ko)).length){var n=this.mode,o=e[0];if(function(a){for(;a=a.parent;)if(a.data.transition)return!0}(this.$vnode))return o;var i=wo(o);if(!i)return o;if(this._leaving)return Bo(a,o);var s="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?s+"comment":s+i.tag:r(i.key)?0===String(i.key).indexOf(s)?i.key:s+i.key:i.key;var d=(i.data||(i.data={})).transition=$o(this),u=this._vnode,l=wo(u);if(i.data.directives&&i.data.directives.some(Fo)&&(i.data.show=!0),l&&l.data&&!function(a,t){return t.key===a.key&&t.tag===a.tag}(i,l)&&!yt(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var c=l.data.transition=B({},d);if("out-in"===n)return this._leaving=!0,it(c,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),Bo(a,o);if("in-out"===n){if(yt(i))return u;var f,p=function(){f()};it(d,"afterEnter",p),it(d,"enterCancelled",p),it(c,"delayLeave",(function(a){f=a}))}}return o}}},So=B({tag:String,moveClass:String},xo);function Eo(a){a.elm._moveCb&&a.elm._moveCb(),a.elm._enterCb&&a.elm._enterCb()}function qo(a){a.data.newPos=a.elm.getBoundingClientRect()}function jo(a){var t=a.data.pos,e=a.data.newPos,n=t.left-e.left,o=t.top-e.top;if(n||o){a.data.moved=!0;var r=a.elm.style;r.transform=r.WebkitTransform="translate("+n+"px,"+o+"px)",r.transitionDuration="0s"}}delete So.mode;var Do={Transition:To,TransitionGroup:{props:So,beforeMount:function(){var a=this,t=this._update;this._update=function(e,n){var o=Zt(a);a.__patch__(a._vnode,a.kept,!1,!0),a._vnode=a.kept,o(),t.call(a,e,n)}},render:function(a){for(var t=this.tag||this.$vnode.data.tag||"span",e=Object.create(null),n=this.prevChildren=this.children,o=this.$slots.default||[],r=this.children=[],i=$o(this),s=0;s<o.length;s++){var d=o[s];d.tag&&null!=d.key&&0!==String(d.key).indexOf("__vlist")&&(r.push(d),e[d.key]=d,(d.data||(d.data={})).transition=i)}if(n){for(var u=[],l=[],c=0;c<n.length;c++){var f=n[c];f.data.transition=i,f.data.pos=f.elm.getBoundingClientRect(),e[f.key]?u.push(f):l.push(f)}this.kept=a(t,null,u),this.removed=l}return a(t,null,r)},updated:function(){var a=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";a.length&&this.hasMove(a[0].elm,t)&&(a.forEach(Eo),a.forEach(qo),a.forEach(jo),this._reflow=document.body.offsetHeight,a.forEach((function(a){if(a.data.moved){var e=a.elm,n=e.style;Kn(e,t),n.transform=n.WebkitTransform=n.transitionDuration="",e.addEventListener(Un,e._moveCb=function a(n){n&&n.target!==e||n&&!/transform$/.test(n.propertyName)||(e.removeEventListener(Un,a),e._moveCb=null,Jn(e,t))})}})))},methods:{hasMove:function(a,t){if(!zn)return!1;if(this._hasMove)return this._hasMove;var e=a.cloneNode();a._transitionClasses&&a._transitionClasses.forEach((function(a){In(e,a)})),Ln(e,t),e.style.display="none",this.$el.appendChild(e);var n=eo(e);return this.$el.removeChild(e),this._hasMove=n.hasTransform}}}};xe.config.mustUseProp=function(a,t,e){return"value"===e&&qe(a)&&"button"!==t||"selected"===e&&"option"===a||"checked"===e&&"input"===a||"muted"===e&&"video"===a},xe.config.isReservedTag=Qe,xe.config.isReservedAttr=Ee,xe.config.getTagNamespace=function(a){return We(a)?"svg":"math"===a?"math":void 0},xe.config.isUnknownElement=function(a){if(!R)return!0;if(Qe(a))return!1;if(a=a.toLowerCase(),null!=Ue[a])return Ue[a];var t=document.createElement(a);return a.indexOf("-")>-1?Ue[a]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Ue[a]=/HTMLUnknownElement/.test(t.toString())},B(xe.options.directives,_o),B(xe.options.components,Do),xe.prototype.__patch__=R?co:F,xe.prototype.$mount=function(a,t){return function(a,t,e){var n;return a.$el=t,a.$options.render||(a.$options.render=pa),te(a,"beforeMount"),n=function(){a._update(a._render(),e)},new pe(a,n,F,{before:function(){a._isMounted&&!a._isDestroyed&&te(a,"beforeUpdate")}},!0),e=!1,null==a.$vnode&&(a._isMounted=!0,te(a,"mounted")),a}(this,a=a&&R?function(a){return"string"==typeof a?document.querySelector(a)||document.createElement("div"):a}(a):void 0,t)},R&&setTimeout((function(){M.devtools&&ta&&ta.emit("init",xe)}),0);const No=xe;var Oo=function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"container"},[e("Header"),a._v(" "),e("Landing"),a._v(" "),e("Roadmap"),a._v(" "),e("Team"),a._v(" "),e("FAQ"),a._v(" "),e("Rarity"),a._v(" "),e("Footer")],1)};Oo._withStripped=!0;var Mo=function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"header"},[e("div",{staticClass:"header_container"},[a._m(0),a._v(" "),e("div",{staticClass:"nav",attrs:{id:"nav_container"}},[a._m(1),a._v(" "),e("div",{staticClass:"links"},[e("NavMenu")],1),a._v(" "),e("div",{staticClass:"mobile_menu_icon",on:{click:function(t){a.hideMenu=!a.hideMenu}}},[e("span",[a._v("")])])])]),a._v(" "),a.hideMenu?a._e():e("div",{staticClass:"mobile_nav_menu"},[e("NavMenu",{attrs:{isMenu:!0},on:{closeMenu:function(t){a.hideMenu=!0}}})],1)])};Mo._withStripped=!0;var Go=function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"menu",class:{menu_column:a.isMenu},attrs:{id:"nav_menu"}},[e("span",{staticClass:"menu_item",on:{click:function(t){return a.animatedScroll("roadmap_container")}}},[a._v("Roadmap")]),a._v(" "),e("span",{staticClass:"menu_item",on:{click:function(t){return a.animatedScroll("team_container")}}},[a._v("The team")]),a._v(" "),e("span",{staticClass:"menu_item",on:{click:function(t){return a.animatedScroll("FAQ_container")}}},[a._v("FAQ")]),a._v(" "),e("span",{staticClass:"menu_item",on:{click:function(t){return a.animatedScroll("rarity_container")}}},[a._v("Rarities")]),a._v(" "),a._m(0)])};Go._withStripped=!0;var Lo=e(755),Io=e.n(Lo);const Po={props:{isMenu:Boolean},methods:{animatedScroll(a){const t=Io()("#"+a).offset().top;Io()("html, body").animate({scrollTop:t-100},1200),this.$emit("closeMenu")}}};function Ro(a,t,e,n,o,r,i,s){var d,u="function"==typeof a?a.options:a;if(t&&(u.render=t,u.staticRenderFns=e,u._compiled=!0),n&&(u.functional=!0),r&&(u._scopeId="data-v-"+r),i?(d=function(a){(a=a||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(a=__VUE_SSR_CONTEXT__),o&&o.call(this,a),a&&a._registeredComponents&&a._registeredComponents.add(i)},u._ssrRegister=d):o&&(d=s?function(){o.call(this,(u.functional?this.parent:this).$root.$options.shadowRoot)}:o),d)if(u.functional){u._injectStyles=d;var l=u.render;u.render=function(a,t){return d.call(t),l(a,t)}}else{var c=u.beforeCreate;u.beforeCreate=c?[].concat(c,d):[d]}return{exports:a,options:u}}e(9);var zo=Ro(Po,Go,[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"social menu_item"},[e("span",[a._v("")]),a._v(" "),e("span",[a._v("")]),a._v(" "),e("span",[a._v("")])])}],!1,null,"f2b1337c",null);zo.options.__file="src/Components/NavMenu.vue";const Ho={data:function(){return{hideMenu:!0}},components:{NavMenu:zo.exports},mounted(){}};e(229);var Wo=Ro(Ho,Mo,[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"title"},[e("div",{staticClass:"title-text"},[e("h1",[a._v("Mike and Sam's NFT")])])])},function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"news"},[e("span",[a._v("Minting Q1 2022!")])])}],!1,null,"62826bc6",null);Wo.options.__file="src/Components/Header.vue";const Qo=Wo.exports;var Uo=function(){var a=this;a.$createElement;return a._self._c,a._m(0)};Uo._withStripped=!0;e(211);var Yo=Ro({},Uo,[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"footer"},[e("div",{staticClass:"title"},[e("p",[a._v("Golfin Geckos")])]),a._v(" "),e("div",{staticClass:"info"},[e("p",[a._v("Made by Sam Newby")])])])}],!1,null,"a4e733aa",null);Yo.options.__file="src/Components/Footer.vue";const Xo=Yo.exports;var Vo=function(){var a=this.$createElement;return(this._self._c||a)("div",{staticClass:"landing"})};Vo._withStripped=!0;e(655);var Zo=Ro({},Vo,[],!1,null,"77fb7183",null);Zo.options.__file="src/Pages/Landing.vue";const Ko=Zo.exports;var Jo=function(){var a=this;a.$createElement;return a._self._c,a._m(0)};Jo._withStripped=!0;e(834);var ar=Ro({},Jo,[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{attrs:{id:"roadmap_container"}},[e("div",{staticClass:"text"},[e("div",{staticClass:"title",attrs:{"data-aos":"fade-down"}},[e("h1",[a._v("Roadmap")])]),a._v(" "),e("div",{staticClass:"roadmap-item roadmap-1",attrs:{"data-aos":"fade-right"}},[e("h2",[a._v("1. Creation")]),a._v(" "),e("p",[a._v("\n        quae ab illo inventore veritatis et quasi architecto beatae vitae\n        dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit\n        aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos\n        qui ratione voluptatem sequi nesciunt. illo inventore veritatis et\n        quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam\n        voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia\n        consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.\n        Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet,\n        consectetur, adipisci velit, sed quia non numquam eius modi tempora\n        incidunt ut labore et dolore magnam\n      ")])]),a._v(" "),e("div",{staticClass:"roadmap-2",attrs:{"data-aos":"fade-left"}},[e("div",{staticClass:"roadmap-item"},[e("h2",[a._v("2. Minting")]),a._v(" "),e("p",[a._v("\n          But I must explain to you how all this mistaken idea of denouncing\n          pleasure and praising pain was born and I will give you a complete\n          account. ue nihil impedit quo minus id quod maxime placeat facere\n          possimus, omnis voluptas assumenda est, omnis dolor repellendus.\n          Temporibus autem quibusdam et aut officiis debitis aut rerum\n          necessitatibus saepe eveniet ut et voluptates repudiandae sint et\n          molestiae non recusandae. Itaque earu\n        ")])])]),a._v(" "),e("div",{staticClass:"roadmap-item roadmap-3",attrs:{"data-aos":"fade-right"}},[e("h2",[a._v("3. Improvement")]),a._v(" "),e("p",[a._v("\n        At vero eos et accusamus et iusto odio dignissimos ducimus qui\n        blanditiis praesentium voluptatum deleniti atque corrupti quos cati\n        cupiditate non provident, similique sunt in culpa qui officia deserunt\n        mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum\n        facilis est et expedita distinctio. Nam libero tempore, cum soluta\n        nobis est eligendi optio cumque nihil impedit quo minus id quod\n      ")])])])])}],!1,null,"f06a21b0",null);ar.options.__file="src/Pages/Roadmap.vue";const tr=ar.exports;var er=function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{attrs:{id:"FAQ_container"}},[a._m(0),a._v(" "),e("div",{staticClass:"questions"},a._l(a.Questions,(function(a){return e("FAQquestion",{key:a.question,attrs:{question:a.Question,answer:a.Answer}})})),1)])};er._withStripped=!0;var nr=function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"container",attrs:{"data-aos":"flip-up","data-aos-delay":"200"}},[e("div",{staticClass:"question",on:{click:function(t){a.answerShown=!a.answerShown}}},[e("h2",[a._v(a._s(a.question))])]),a._v(" "),e("transition",[a.answerShown?e("div",{staticClass:"answer"},[e("p",[a._v(a._s(a.answer))])]):a._e()])],1)};nr._withStripped=!0;const or={props:{question:String,answer:String},data:function(){return{answerShown:!1}}};e(719);var rr=Ro(or,nr,[],!1,null,"4b04491c",null);rr.options.__file="src/Components/FAQquestion.vue";const ir={components:{FAQquestion:rr.exports},data:function(){return{Questions:[{Question:"How much does the nft cost?",Answer:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmodtempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quisLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmodtempor incididunt ut labore et dolore magna "},{Question:"What are the rarities?",Answer:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmodtempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis"},{Question:"What are future plans??",Answer:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmodtempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim vLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmodtempor incididunt ut labore et dolore magna eniam, quis"},{Question:"What is another question?",Answer:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmodtempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis"},{Question:"Here goes the last question?",Answer:"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmodtempor incididunt ut labore et dolore magnLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmodtempor incididunt ut labore et dolore magna a aliqua. Ut enim ad minim veniam, quis"}]}}};e(598);var sr=Ro(ir,er,[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"title"},[e("h1",{attrs:{"data-aos":"flip-up"}},[a._v("Frequently asked questions")])])}],!1,null,"ccb51dfc",null);sr.options.__file="src/Pages/FAQ.vue";const dr=sr.exports;var ur=function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{attrs:{id:"team_container"}},[e("div",{staticClass:"container"},[e("h1",{attrs:{"data-aos":"fade-up"}},[a._v("Team Members")]),a._v(" "),e("div",{staticClass:"members"},a._l(a.team_members,(function(a){return e("div",{key:a.index},[e("TeamMember",{attrs:{name:a.name,description:a.description,image:a.image,alt:a.alt,direction:a.index%2==0?"right":"left"}})],1)})),0)])])};ur._withStripped=!0;var lr=function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"team_member",attrs:{"data-aos":"fade-"+a.direction}},[e("img",{ref:"member_image",staticClass:"member_image",attrs:{alt:a.alt}}),a._v(" "),e("h3",[a._v(a._s(a.name))]),a._v(" "),e("p",[a._v(a._s(a.description))])])};lr._withStripped=!0;const cr={props:{name:String,description:String,image:String,alt:String,direction:String},mounted(){this.$refs.member_image.src=e(160)("./"+this.image)}};e(497);var fr=Ro(cr,lr,[],!1,null,"17e3b5e7",null);fr.options.__file="src/Components/TeamMember.vue";const pr={components:{TeamMember:fr.exports},data:function(){return{team_members:[{index:0,name:"Nooby",image:"Nooby.jpg",alt:"A picture of MrNooby",description:"This is a description for Nooby and the contributions he has done to this  project"},{index:1,name:"Mike",image:"Mike.jpg",alt:"A picture of Mike",description:"This is a description for Mike and the contributions he has done to this  project"}]}}};e(628);var yr=Ro(pr,ur,[],!1,null,"4f43d2be",null);yr.options.__file="src/Pages/Team.vue";const mr=yr.exports;var hr=function(){var a=this;a.$createElement;return a._self._c,a._m(0)};hr._withStripped=!0;e(369);var Ar=Ro({},hr,[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{attrs:{id:"rarity_container"}},[e("div",{staticClass:"container"},[e("h1",{attrs:{"data-aos":"fade-up"}},[a._v("Rarities")]),a._v(" "),e("div",{staticClass:"rarity_content",attrs:{"data-aos":"zoom-in"}},[e("h2",[a._v("Coming soon!")])])])])}],!1,null,"ed322822",null);Ar.options.__file="src/Pages/Rarity.vue";const vr={components:{Header:Qo,Footer:Xo,Landing:Ko,Roadmap:tr,FAQ:dr,Team:mr,Rarity:Ar.exports}};e(612);var gr=Ro(vr,Oo,[],!1,null,null,null);gr.options.__file="src/App.vue";const br=gr.exports;var Cr=e(711),_r=e.n(Cr),xr=e(379),wr=e.n(xr),$r=e(795),Br=e.n($r),kr=e(569),Fr=e.n(kr),Tr=e(565),Sr=e.n(Tr),Er=e(216),qr=e.n(Er),jr=e(589),Dr=e.n(jr),Nr=e(659),Or={};Or.styleTagTransform=Dr(),Or.setAttributes=Sr(),Or.insert=Fr().bind(null,"head"),Or.domAPI=Br(),Or.insertStyleElement=qr(),wr()(Nr.Z,Or),Nr.Z&&Nr.Z.locals&&Nr.Z.locals,new No({created(){_r().init({startEvent:"load"})},render:a=>a(br)}).$mount("#app")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBSTVsQixHQUFHLGNBQ3ZENGxCLEVBQUk1bEIsR0FBRyxLQUNQaUIsRUFDRSxNQUNBLENBQUVrUSxZQUFhLGlCQUFrQi9qRCxNQUFPLENBQUUsV0FBWSxZQUN0RCxDQUFDNnpDLEVBQUcsS0FBTSxDQUFDMmtCLEVBQUk1bEIsR0FBRywyQkNOMUIsRUFDQSxLQUNBLFdBQ0EsTUF1QkYsR0FBVXQvQyxRQUFRd21FLE9BQVMsdUJBQzNCLE1FdkNvSCxHQ3NCcEgsQ0FDSXJjLFdBQVksQ0FDUnFkLE9BQU0sVUFBUSxXQUFTLFdBQVMsT0FBSyxRQUFNLFVIZXBDLEdBQWlCLHFCSS9CNUIsR0FBWSxHQUNkLEdBQ0ExckIsR3hDZW9CLEl3Q2JwQixFQUNBLEtBQ0EsS0FDQSxNQXVCRixHQUFVOTdDLFFBQVF3bUUsT0FBUyxjQUMzQixTQUFlLEdBQWlCLHlLQzVCNUJ4bUUsR0FBVSxHQUVkQSxHQUFRb25DLGtCQUFvQixLQUM1QnBuQyxHQUFRaW5DLGNBQWdCLEtBRWxCam5DLEdBQVE2c0IsT0FBUyxVQUFjLEtBQU0sUUFFM0M3c0IsR0FBUXFtQyxPQUFTLEtBQ2pCcm1DLEdBQVFtbkMsbUJBQXFCLEtBRWhCLEtBQUksS0FBU25uQyxJQUtKLE1BQVcsYUFBaUIsWUNyQnhDLElBQUksR0FBSSxDQUNka3VELFVBQ0ksVUFBUyxDQUNMcDJELFdBQVksVUFHcEJna0QsT0FBUTFrRCxHQUFLQSxFQUFFcXdFLE1BQ2hCbm1CLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vbm9kZV9tb2R1bGVzL2Fvcy9kaXN0L2Fvcy5qcyIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vbm9kZV9tb2R1bGVzL2Fvcy9kaXN0L2Fvcy5jc3MiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9BcHAudnVlP2U1YzQiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9Db21wb25lbnRzL0ZBUXF1ZXN0aW9uLnZ1ZT80ZDg2Iiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvQ29tcG9uZW50cy9Gb290ZXIudnVlP2FmZjYiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9Db21wb25lbnRzL0hlYWRlci52dWU/ODgyMyIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL0NvbXBvbmVudHMvTmF2TWVudS52dWU/MWJhYiIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL0NvbXBvbmVudHMvVGVhbU1lbWJlci52dWU/ODBmNyIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL1BhZ2VzL0ZBUS52dWU/MDlkMyIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL1BhZ2VzL0xhbmRpbmcudnVlP2FiZDAiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9QYWdlcy9SYXJpdHkudnVlPzFhYWYiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9QYWdlcy9Sb2FkbWFwLnZ1ZT8zOWFlIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvUGFnZXMvVGVhbS52dWU/NjJkNCIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL0FwcC52dWU/YmU0OSIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL0NvbXBvbmVudHMvRkFRcXVlc3Rpb24udnVlP2VmNGMiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9Db21wb25lbnRzL0Zvb3Rlci52dWU/ZDc3ZSIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL0NvbXBvbmVudHMvSGVhZGVyLnZ1ZT9jMThmIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvQ29tcG9uZW50cy9OYXZNZW51LnZ1ZT84ZjE3Iiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvQ29tcG9uZW50cy9UZWFtTWVtYmVyLnZ1ZT9iM2QxIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvUGFnZXMvRkFRLnZ1ZT8wNmJiIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvUGFnZXMvTGFuZGluZy52dWU/NTNjMyIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL1BhZ2VzL1Jhcml0eS52dWU/ODhmOSIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL1BhZ2VzL1JvYWRtYXAudnVlP2JhNzEiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9QYWdlcy9UZWFtLnZ1ZT8yNzU4Iiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvbGlzdFRvU3R5bGVzLmpzIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvL2hvbWUvc2FtL1Byb2plY3RzL1NhbUFuZE1pa2VORlQvc3JjL0Fzc2V0c3xzeW5jfC9eXFwuXFwvLiokLyIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0L3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0L3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLnJ1bnRpbWUuZXNtLmpzIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvQXBwLnZ1ZT85ZGNhIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvQ29tcG9uZW50cy9IZWFkZXIudnVlP2JhMDkiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9Db21wb25lbnRzL05hdk1lbnUudnVlPzM5MDMiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC9zcmMvQ29tcG9uZW50cy9OYXZNZW51LnZ1ZSIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL0NvbXBvbmVudHMvTmF2TWVudS52dWU/OTY2MCIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL0NvbXBvbmVudHMvTmF2TWVudS52dWUiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9Db21wb25lbnRzL0hlYWRlci52dWU/YTg5NCIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0L3NyYy9Db21wb25lbnRzL0hlYWRlci52dWUiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9Db21wb25lbnRzL0hlYWRlci52dWUiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9Db21wb25lbnRzL0Zvb3Rlci52dWU/NTc4NiIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL0NvbXBvbmVudHMvRm9vdGVyLnZ1ZSIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0L3NyYy9Db21wb25lbnRzL0Zvb3Rlci52dWUiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9QYWdlcy9MYW5kaW5nLnZ1ZT82YzZiIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvUGFnZXMvTGFuZGluZy52dWUiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC9zcmMvUGFnZXMvTGFuZGluZy52dWUiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9QYWdlcy9Sb2FkbWFwLnZ1ZT9iYjQxIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvUGFnZXMvUm9hZG1hcC52dWUiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC9zcmMvUGFnZXMvUm9hZG1hcC52dWUiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9QYWdlcy9GQVEudnVlP2Q2MGQiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9Db21wb25lbnRzL0ZBUXF1ZXN0aW9uLnZ1ZT82OTk5Iiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvc3JjL0NvbXBvbmVudHMvRkFRcXVlc3Rpb24udnVlIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvQ29tcG9uZW50cy9GQVFxdWVzdGlvbi52dWU/MzQ5NyIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL0NvbXBvbmVudHMvRkFRcXVlc3Rpb24udnVlIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvUGFnZXMvRkFRLnZ1ZT84M2ExIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvc3JjL1BhZ2VzL0ZBUS52dWUiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9QYWdlcy9GQVEudnVlIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvUGFnZXMvVGVhbS52dWU/NTA5NyIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL0NvbXBvbmVudHMvVGVhbU1lbWJlci52dWU/ZDliMyIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0L3NyYy9Db21wb25lbnRzL1RlYW1NZW1iZXIudnVlIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvQ29tcG9uZW50cy9UZWFtTWVtYmVyLnZ1ZT9kNGMyIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvQ29tcG9uZW50cy9UZWFtTWVtYmVyLnZ1ZSIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL1BhZ2VzL1RlYW0udnVlP2JhMmQiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC9zcmMvUGFnZXMvVGVhbS52dWUiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC8uL3NyYy9QYWdlcy9UZWFtLnZ1ZSIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL1BhZ2VzL1Jhcml0eS52dWU/ZTEzMiIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL1BhZ2VzL1Jhcml0eS52dWUiLCJ3ZWJwYWNrOi8vc2FtYW5kbWlrZW5mdC9zcmMvUGFnZXMvUmFyaXR5LnZ1ZSIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL0FwcC52dWU/MzJjZiIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0L3NyYy9BcHAudnVlIiwid2VicGFjazovL3NhbWFuZG1pa2VuZnQvLi9zcmMvQXBwLnZ1ZSIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vbm9kZV9tb2R1bGVzL2Fvcy9kaXN0L2Fvcy5jc3M/NmMwNCIsIndlYnBhY2s6Ly9zYW1hbmRtaWtlbmZ0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbihlLHQpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPXQoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLHQpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuQU9TPXQoKTplLkFPUz10KCl9KHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChvKXtpZihuW29dKXJldHVybiBuW29dLmV4cG9ydHM7dmFyIGk9bltvXT17ZXhwb3J0czp7fSxpZDpvLGxvYWRlZDohMX07cmV0dXJuIGVbb10uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsdCksaS5sb2FkZWQ9ITAsaS5leHBvcnRzfXZhciBuPXt9O3JldHVybiB0Lm09ZSx0LmM9bix0LnA9XCJkaXN0L1wiLHQoMCl9KFtmdW5jdGlvbihlLHQsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbyhlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19dmFyIGk9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTE7dDxhcmd1bWVudHMubGVuZ3RoO3QrKyl7dmFyIG49YXJndW1lbnRzW3RdO2Zvcih2YXIgbyBpbiBuKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLG8pJiYoZVtvXT1uW29dKX1yZXR1cm4gZX0scj1uKDEpLGE9KG8ociksbig2KSksdT1vKGEpLGM9big3KSxzPW8oYyksZj1uKDgpLGQ9byhmKSxsPW4oOSkscD1vKGwpLG09bigxMCksYj1vKG0pLHY9bigxMSkseT1vKHYpLGc9bigxNCksaD1vKGcpLHc9W10saz0hMSx4PXtvZmZzZXQ6MTIwLGRlbGF5OjAsZWFzaW5nOlwiZWFzZVwiLGR1cmF0aW9uOjQwMCxkaXNhYmxlOiExLG9uY2U6ITEsc3RhcnRFdmVudDpcIkRPTUNvbnRlbnRMb2FkZWRcIix0aHJvdHRsZURlbGF5Ojk5LGRlYm91bmNlRGVsYXk6NTAsZGlzYWJsZU11dGF0aW9uT2JzZXJ2ZXI6ITF9LGo9ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoPjAmJnZvaWQgMCE9PWFyZ3VtZW50c1swXSYmYXJndW1lbnRzWzBdO2lmKGUmJihrPSEwKSxrKXJldHVybiB3PSgwLHkuZGVmYXVsdCkodyx4KSwoMCxiLmRlZmF1bHQpKHcseC5vbmNlKSx3fSxPPWZ1bmN0aW9uKCl7dz0oMCxoLmRlZmF1bHQpKCksaigpfSxNPWZ1bmN0aW9uKCl7dy5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7ZS5ub2RlLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtYW9zXCIpLGUubm9kZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWFvcy1lYXNpbmdcIiksZS5ub2RlLnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtYW9zLWR1cmF0aW9uXCIpLGUubm9kZS5yZW1vdmVBdHRyaWJ1dGUoXCJkYXRhLWFvcy1kZWxheVwiKX0pfSxTPWZ1bmN0aW9uKGUpe3JldHVybiBlPT09ITB8fFwibW9iaWxlXCI9PT1lJiZwLmRlZmF1bHQubW9iaWxlKCl8fFwicGhvbmVcIj09PWUmJnAuZGVmYXVsdC5waG9uZSgpfHxcInRhYmxldFwiPT09ZSYmcC5kZWZhdWx0LnRhYmxldCgpfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlKCk9PT0hMH0sXz1mdW5jdGlvbihlKXt4PWkoeCxlKSx3PSgwLGguZGVmYXVsdCkoKTt2YXIgdD1kb2N1bWVudC5hbGwmJiF3aW5kb3cuYXRvYjtyZXR1cm4gUyh4LmRpc2FibGUpfHx0P00oKTooeC5kaXNhYmxlTXV0YXRpb25PYnNlcnZlcnx8ZC5kZWZhdWx0LmlzU3VwcG9ydGVkKCl8fChjb25zb2xlLmluZm8oJ1xcbiAgICAgIGFvczogTXV0YXRpb25PYnNlcnZlciBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgYnJvd3NlcixcXG4gICAgICBjb2RlIG11dGF0aW9ucyBvYnNlcnZpbmcgaGFzIGJlZW4gZGlzYWJsZWQuXFxuICAgICAgWW91IG1heSBoYXZlIHRvIGNhbGwgXCJyZWZyZXNoSGFyZCgpXCIgYnkgeW91cnNlbGYuXFxuICAgICcpLHguZGlzYWJsZU11dGF0aW9uT2JzZXJ2ZXI9ITApLGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpLnNldEF0dHJpYnV0ZShcImRhdGEtYW9zLWVhc2luZ1wiLHguZWFzaW5nKSxkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYm9keVwiKS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWFvcy1kdXJhdGlvblwiLHguZHVyYXRpb24pLGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpLnNldEF0dHJpYnV0ZShcImRhdGEtYW9zLWRlbGF5XCIseC5kZWxheSksXCJET01Db250ZW50TG9hZGVkXCI9PT14LnN0YXJ0RXZlbnQmJltcImNvbXBsZXRlXCIsXCJpbnRlcmFjdGl2ZVwiXS5pbmRleE9mKGRvY3VtZW50LnJlYWR5U3RhdGUpPi0xP2ooITApOlwibG9hZFwiPT09eC5zdGFydEV2ZW50P3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKHguc3RhcnRFdmVudCxmdW5jdGlvbigpe2ooITApfSk6ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih4LnN0YXJ0RXZlbnQsZnVuY3Rpb24oKXtqKCEwKX0pLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsKDAscy5kZWZhdWx0KShqLHguZGVib3VuY2VEZWxheSwhMCkpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwib3JpZW50YXRpb25jaGFuZ2VcIiwoMCxzLmRlZmF1bHQpKGoseC5kZWJvdW5jZURlbGF5LCEwKSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwoMCx1LmRlZmF1bHQpKGZ1bmN0aW9uKCl7KDAsYi5kZWZhdWx0KSh3LHgub25jZSl9LHgudGhyb3R0bGVEZWxheSkpLHguZGlzYWJsZU11dGF0aW9uT2JzZXJ2ZXJ8fGQuZGVmYXVsdC5yZWFkeShcIltkYXRhLWFvc11cIixPKSx3KX07ZS5leHBvcnRzPXtpbml0Ol8scmVmcmVzaDpqLHJlZnJlc2hIYXJkOk99fSxmdW5jdGlvbihlLHQpe30sLCwsLGZ1bmN0aW9uKGUsdCl7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0LG4pe2Z1bmN0aW9uIG8odCl7dmFyIG49YixvPXY7cmV0dXJuIGI9dj12b2lkIDAsaz10LGc9ZS5hcHBseShvLG4pfWZ1bmN0aW9uIHIoZSl7cmV0dXJuIGs9ZSxoPXNldFRpbWVvdXQoZix0KSxNP28oZSk6Z31mdW5jdGlvbiBhKGUpe3ZhciBuPWUtdyxvPWUtayxpPXQtbjtyZXR1cm4gUz9qKGkseS1vKTppfWZ1bmN0aW9uIGMoZSl7dmFyIG49ZS13LG89ZS1rO3JldHVybiB2b2lkIDA9PT13fHxuPj10fHxuPDB8fFMmJm8+PXl9ZnVuY3Rpb24gZigpe3ZhciBlPU8oKTtyZXR1cm4gYyhlKT9kKGUpOnZvaWQoaD1zZXRUaW1lb3V0KGYsYShlKSkpfWZ1bmN0aW9uIGQoZSl7cmV0dXJuIGg9dm9pZCAwLF8mJmI/byhlKTooYj12PXZvaWQgMCxnKX1mdW5jdGlvbiBsKCl7dm9pZCAwIT09aCYmY2xlYXJUaW1lb3V0KGgpLGs9MCxiPXc9dj1oPXZvaWQgMH1mdW5jdGlvbiBwKCl7cmV0dXJuIHZvaWQgMD09PWg/ZzpkKE8oKSl9ZnVuY3Rpb24gbSgpe3ZhciBlPU8oKSxuPWMoZSk7aWYoYj1hcmd1bWVudHMsdj10aGlzLHc9ZSxuKXtpZih2b2lkIDA9PT1oKXJldHVybiByKHcpO2lmKFMpcmV0dXJuIGg9c2V0VGltZW91dChmLHQpLG8odyl9cmV0dXJuIHZvaWQgMD09PWgmJihoPXNldFRpbWVvdXQoZix0KSksZ312YXIgYix2LHksZyxoLHcsaz0wLE09ITEsUz0hMSxfPSEwO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihzKTtyZXR1cm4gdD11KHQpfHwwLGkobikmJihNPSEhbi5sZWFkaW5nLFM9XCJtYXhXYWl0XCJpbiBuLHk9Uz94KHUobi5tYXhXYWl0KXx8MCx0KTp5LF89XCJ0cmFpbGluZ1wiaW4gbj8hIW4udHJhaWxpbmc6XyksbS5jYW5jZWw9bCxtLmZsdXNoPXAsbX1mdW5jdGlvbiBvKGUsdCxvKXt2YXIgcj0hMCxhPSEwO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihzKTtyZXR1cm4gaShvKSYmKHI9XCJsZWFkaW5nXCJpbiBvPyEhby5sZWFkaW5nOnIsYT1cInRyYWlsaW5nXCJpbiBvPyEhby50cmFpbGluZzphKSxuKGUsdCx7bGVhZGluZzpyLG1heFdhaXQ6dCx0cmFpbGluZzphfSl9ZnVuY3Rpb24gaShlKXt2YXIgdD1cInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOmMoZSk7cmV0dXJuISFlJiYoXCJvYmplY3RcIj09dHx8XCJmdW5jdGlvblwiPT10KX1mdW5jdGlvbiByKGUpe3JldHVybiEhZSYmXCJvYmplY3RcIj09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6YyhlKSl9ZnVuY3Rpb24gYShlKXtyZXR1cm5cInN5bWJvbFwiPT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjpjKGUpKXx8cihlKSYmay5jYWxsKGUpPT1kfWZ1bmN0aW9uIHUoZSl7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpcmV0dXJuIGU7aWYoYShlKSlyZXR1cm4gZjtpZihpKGUpKXt2YXIgdD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnZhbHVlT2Y/ZS52YWx1ZU9mKCk6ZTtlPWkodCk/dCtcIlwiOnR9aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGUpcmV0dXJuIDA9PT1lP2U6K2U7ZT1lLnJlcGxhY2UobCxcIlwiKTt2YXIgbj1tLnRlc3QoZSk7cmV0dXJuIG58fGIudGVzdChlKT92KGUuc2xpY2UoMiksbj8yOjgpOnAudGVzdChlKT9mOitlfXZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmXCJzeW1ib2xcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9LHM9XCJFeHBlY3RlZCBhIGZ1bmN0aW9uXCIsZj1OYU4sZD1cIltvYmplY3QgU3ltYm9sXVwiLGw9L15cXHMrfFxccyskL2cscD0vXlstK10weFswLTlhLWZdKyQvaSxtPS9eMGJbMDFdKyQvaSxiPS9eMG9bMC03XSskL2ksdj1wYXJzZUludCx5PVwib2JqZWN0XCI9PShcInVuZGVmaW5lZFwiPT10eXBlb2YgdD9cInVuZGVmaW5lZFwiOmModCkpJiZ0JiZ0Lk9iamVjdD09PU9iamVjdCYmdCxnPVwib2JqZWN0XCI9PShcInVuZGVmaW5lZFwiPT10eXBlb2Ygc2VsZj9cInVuZGVmaW5lZFwiOmMoc2VsZikpJiZzZWxmJiZzZWxmLk9iamVjdD09PU9iamVjdCYmc2VsZixoPXl8fGd8fEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSx3PU9iamVjdC5wcm90b3R5cGUsaz13LnRvU3RyaW5nLHg9TWF0aC5tYXgsaj1NYXRoLm1pbixPPWZ1bmN0aW9uKCl7cmV0dXJuIGguRGF0ZS5ub3coKX07ZS5leHBvcnRzPW99KS5jYWxsKHQsZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30oKSl9LGZ1bmN0aW9uKGUsdCl7KGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0LG4pe2Z1bmN0aW9uIGkodCl7dmFyIG49YixvPXY7cmV0dXJuIGI9dj12b2lkIDAsTz10LGc9ZS5hcHBseShvLG4pfWZ1bmN0aW9uIHIoZSl7cmV0dXJuIE89ZSxoPXNldFRpbWVvdXQoZix0KSxNP2koZSk6Z31mdW5jdGlvbiB1KGUpe3ZhciBuPWUtdyxvPWUtTyxpPXQtbjtyZXR1cm4gUz94KGkseS1vKTppfWZ1bmN0aW9uIHMoZSl7dmFyIG49ZS13LG89ZS1PO3JldHVybiB2b2lkIDA9PT13fHxuPj10fHxuPDB8fFMmJm8+PXl9ZnVuY3Rpb24gZigpe3ZhciBlPWooKTtyZXR1cm4gcyhlKT9kKGUpOnZvaWQoaD1zZXRUaW1lb3V0KGYsdShlKSkpfWZ1bmN0aW9uIGQoZSl7cmV0dXJuIGg9dm9pZCAwLF8mJmI/aShlKTooYj12PXZvaWQgMCxnKX1mdW5jdGlvbiBsKCl7dm9pZCAwIT09aCYmY2xlYXJUaW1lb3V0KGgpLE89MCxiPXc9dj1oPXZvaWQgMH1mdW5jdGlvbiBwKCl7cmV0dXJuIHZvaWQgMD09PWg/ZzpkKGooKSl9ZnVuY3Rpb24gbSgpe3ZhciBlPWooKSxuPXMoZSk7aWYoYj1hcmd1bWVudHMsdj10aGlzLHc9ZSxuKXtpZih2b2lkIDA9PT1oKXJldHVybiByKHcpO2lmKFMpcmV0dXJuIGg9c2V0VGltZW91dChmLHQpLGkodyl9cmV0dXJuIHZvaWQgMD09PWgmJihoPXNldFRpbWVvdXQoZix0KSksZ312YXIgYix2LHksZyxoLHcsTz0wLE09ITEsUz0hMSxfPSEwO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IFR5cGVFcnJvcihjKTtyZXR1cm4gdD1hKHQpfHwwLG8obikmJihNPSEhbi5sZWFkaW5nLFM9XCJtYXhXYWl0XCJpbiBuLHk9Uz9rKGEobi5tYXhXYWl0KXx8MCx0KTp5LF89XCJ0cmFpbGluZ1wiaW4gbj8hIW4udHJhaWxpbmc6XyksbS5jYW5jZWw9bCxtLmZsdXNoPXAsbX1mdW5jdGlvbiBvKGUpe3ZhciB0PVwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6dShlKTtyZXR1cm4hIWUmJihcIm9iamVjdFwiPT10fHxcImZ1bmN0aW9uXCI9PXQpfWZ1bmN0aW9uIGkoZSl7cmV0dXJuISFlJiZcIm9iamVjdFwiPT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjp1KGUpKX1mdW5jdGlvbiByKGUpe3JldHVyblwic3ltYm9sXCI9PShcInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOnUoZSkpfHxpKGUpJiZ3LmNhbGwoZSk9PWZ9ZnVuY3Rpb24gYShlKXtpZihcIm51bWJlclwiPT10eXBlb2YgZSlyZXR1cm4gZTtpZihyKGUpKXJldHVybiBzO2lmKG8oZSkpe3ZhciB0PVwiZnVuY3Rpb25cIj09dHlwZW9mIGUudmFsdWVPZj9lLnZhbHVlT2YoKTplO2U9byh0KT90K1wiXCI6dH1pZihcInN0cmluZ1wiIT10eXBlb2YgZSlyZXR1cm4gMD09PWU/ZTorZTtlPWUucmVwbGFjZShkLFwiXCIpO3ZhciBuPXAudGVzdChlKTtyZXR1cm4gbnx8bS50ZXN0KGUpP2IoZS5zbGljZSgyKSxuPzI6OCk6bC50ZXN0KGUpP3M6K2V9dmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZcInN5bWJvbFwiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/XCJzeW1ib2xcIjp0eXBlb2YgZX0sYz1cIkV4cGVjdGVkIGEgZnVuY3Rpb25cIixzPU5hTixmPVwiW29iamVjdCBTeW1ib2xdXCIsZD0vXlxccyt8XFxzKyQvZyxsPS9eWy0rXTB4WzAtOWEtZl0rJC9pLHA9L14wYlswMV0rJC9pLG09L14wb1swLTddKyQvaSxiPXBhcnNlSW50LHY9XCJvYmplY3RcIj09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0P1widW5kZWZpbmVkXCI6dSh0KSkmJnQmJnQuT2JqZWN0PT09T2JqZWN0JiZ0LHk9XCJvYmplY3RcIj09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiBzZWxmP1widW5kZWZpbmVkXCI6dShzZWxmKSkmJnNlbGYmJnNlbGYuT2JqZWN0PT09T2JqZWN0JiZzZWxmLGc9dnx8eXx8RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpLGg9T2JqZWN0LnByb3RvdHlwZSx3PWgudG9TdHJpbmcsaz1NYXRoLm1heCx4PU1hdGgubWluLGo9ZnVuY3Rpb24oKXtyZXR1cm4gZy5EYXRlLm5vdygpfTtlLmV4cG9ydHM9bn0pLmNhbGwodCxmdW5jdGlvbigpe3JldHVybiB0aGlzfSgpKX0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3ZhciB0PXZvaWQgMCxvPXZvaWQgMCxpPXZvaWQgMDtmb3IodD0wO3Q8ZS5sZW5ndGg7dCs9MSl7aWYobz1lW3RdLG8uZGF0YXNldCYmby5kYXRhc2V0LmFvcylyZXR1cm4hMDtpZihpPW8uY2hpbGRyZW4mJm4oby5jaGlsZHJlbikpcmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gbygpe3JldHVybiB3aW5kb3cuTXV0YXRpb25PYnNlcnZlcnx8d2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXJ8fHdpbmRvdy5Nb3pNdXRhdGlvbk9ic2VydmVyfWZ1bmN0aW9uIGkoKXtyZXR1cm4hIW8oKX1mdW5jdGlvbiByKGUsdCl7dmFyIG49d2luZG93LmRvY3VtZW50LGk9bygpLHI9bmV3IGkoYSk7dT10LHIub2JzZXJ2ZShuLmRvY3VtZW50RWxlbWVudCx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITAscmVtb3ZlZE5vZGVzOiEwfSl9ZnVuY3Rpb24gYShlKXtlJiZlLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZS5hZGRlZE5vZGVzKSxvPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUucmVtb3ZlZE5vZGVzKSxpPXQuY29uY2F0KG8pO2lmKG4oaSkpcmV0dXJuIHUoKX0pfU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciB1PWZ1bmN0aW9uKCl7fTt0LmRlZmF1bHQ9e2lzU3VwcG9ydGVkOmkscmVhZHk6cn19LGZ1bmN0aW9uKGUsdCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9ZnVuY3Rpb24gbygpe3JldHVybiBuYXZpZ2F0b3IudXNlckFnZW50fHxuYXZpZ2F0b3IudmVuZG9yfHx3aW5kb3cub3BlcmF8fFwiXCJ9T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBvPXRbbl07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxuLG8pe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLG8mJmUodCxvKSx0fX0oKSxyPS8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm8vaSxhPS8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pLHU9LyhhbmRyb2lkfGJiXFxkK3xtZWVnbykuK21vYmlsZXxhdmFudGdvfGJhZGFcXC98YmxhY2tiZXJyeXxibGF6ZXJ8Y29tcGFsfGVsYWluZXxmZW5uZWN8aGlwdG9wfGllbW9iaWxlfGlwKGhvbmV8b2QpfGlyaXN8a2luZGxlfGxnZSB8bWFlbW98bWlkcHxtbXB8bW9iaWxlLitmaXJlZm94fG5ldGZyb250fG9wZXJhIG0ob2J8aW4paXxwYWxtKCBvcyk/fHBob25lfHAoaXhpfHJlKVxcL3xwbHVja2VyfHBvY2tldHxwc3B8c2VyaWVzKDR8NikwfHN5bWJpYW58dHJlb3x1cFxcLihicm93c2VyfGxpbmspfHZvZGFmb25lfHdhcHx3aW5kb3dzIGNlfHhkYXx4aWlub3xhbmRyb2lkfGlwYWR8cGxheWJvb2t8c2lsay9pLGM9LzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XFwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3XFwtKG58dSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG1cXC18Y2VsbHxjaHRtfGNsZGN8Y21kXFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXFwtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcXC1kKXxlbCg0OXxhaSl8ZW0obDJ8dWwpfGVyKGljfGswKXxlc2w4fGV6KFs0LTddMHxvc3x3YXx6ZSl8ZmV0Y3xmbHkoXFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXFwtNXxnXFwtbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFxcLShtfHB8dCl8aGVpXFwtfGhpKHB0fHRhKXxocCggaXxpcCl8aHNcXC1jfGh0KGMoXFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVxcLSgyMHxnb3xtYSl8aTIzMHxpYWMoIHxcXC18XFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFxcLyl8a2xvbnxrcHQgfGt3Y1xcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHxcXC1bYS13XSl8bGlid3xseW54fG0xXFwtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cXC1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dChcXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVxcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XFwtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuXFwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XFwtZ3xxYVxcLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8XFwtWzItN118aVxcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGhcXC18b298cFxcLSl8c2RrXFwvfHNlKGMoXFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFxcLXxzaGFyfHNpZShcXC18bSl8c2tcXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcXC18dlxcLXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbFxcLXx0ZGdcXC18dGVsKGl8bSl8dGltXFwtfHRcXC1tb3x0byhwbHxzaCl8dHMoNzB8bVxcLXxtM3xtNSl8dHhcXC05fHVwKFxcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcXC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFxcLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhc1xcLXx5b3VyfHpldG98enRlXFwtL2kscz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXtuKHRoaXMsZSl9cmV0dXJuIGkoZSxbe2tleTpcInBob25lXCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT1vKCk7cmV0dXJuISghci50ZXN0KGUpJiYhYS50ZXN0KGUuc3Vic3RyKDAsNCkpKX19LHtrZXk6XCJtb2JpbGVcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPW8oKTtyZXR1cm4hKCF1LnRlc3QoZSkmJiFjLnRlc3QoZS5zdWJzdHIoMCw0KSkpfX0se2tleTpcInRhYmxldFwiLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubW9iaWxlKCkmJiF0aGlzLnBob25lKCl9fV0pLGV9KCk7dC5kZWZhdWx0PW5ldyBzfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1lLm5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1hb3Mtb25jZVwiKTt0PmUucG9zaXRpb24/ZS5ub2RlLmNsYXNzTGlzdC5hZGQoXCJhb3MtYW5pbWF0ZVwiKTpcInVuZGVmaW5lZFwiIT10eXBlb2YgbyYmKFwiZmFsc2VcIj09PW98fCFuJiZcInRydWVcIiE9PW8pJiZlLm5vZGUuY2xhc3NMaXN0LnJlbW92ZShcImFvcy1hbmltYXRlXCIpfSxvPWZ1bmN0aW9uKGUsdCl7dmFyIG89d2luZG93LnBhZ2VZT2Zmc2V0LGk9d2luZG93LmlubmVySGVpZ2h0O2UuZm9yRWFjaChmdW5jdGlvbihlLHIpe24oZSxpK28sdCl9KX07dC5kZWZhdWx0PW99LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBvKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1uKDEyKSxyPW8oaSksYT1mdW5jdGlvbihlLHQpe3JldHVybiBlLmZvckVhY2goZnVuY3Rpb24oZSxuKXtlLm5vZGUuY2xhc3NMaXN0LmFkZChcImFvcy1pbml0XCIpLGUucG9zaXRpb249KDAsci5kZWZhdWx0KShlLm5vZGUsdC5vZmZzZXQpfSksZX07dC5kZWZhdWx0PWF9LGZ1bmN0aW9uKGUsdCxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBvKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1uKDEzKSxyPW8oaSksYT1mdW5jdGlvbihlLHQpe3ZhciBuPTAsbz0wLGk9d2luZG93LmlubmVySGVpZ2h0LGE9e29mZnNldDplLmdldEF0dHJpYnV0ZShcImRhdGEtYW9zLW9mZnNldFwiKSxhbmNob3I6ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWFvcy1hbmNob3JcIiksYW5jaG9yUGxhY2VtZW50OmUuZ2V0QXR0cmlidXRlKFwiZGF0YS1hb3MtYW5jaG9yLXBsYWNlbWVudFwiKX07c3dpdGNoKGEub2Zmc2V0JiYhaXNOYU4oYS5vZmZzZXQpJiYobz1wYXJzZUludChhLm9mZnNldCkpLGEuYW5jaG9yJiZkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGEuYW5jaG9yKSYmKGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChhLmFuY2hvcilbMF0pLG49KDAsci5kZWZhdWx0KShlKS50b3AsYS5hbmNob3JQbGFjZW1lbnQpe2Nhc2VcInRvcC1ib3R0b21cIjpicmVhaztjYXNlXCJjZW50ZXItYm90dG9tXCI6bis9ZS5vZmZzZXRIZWlnaHQvMjticmVhaztjYXNlXCJib3R0b20tYm90dG9tXCI6bis9ZS5vZmZzZXRIZWlnaHQ7YnJlYWs7Y2FzZVwidG9wLWNlbnRlclwiOm4rPWkvMjticmVhaztjYXNlXCJib3R0b20tY2VudGVyXCI6bis9aS8yK2Uub2Zmc2V0SGVpZ2h0O2JyZWFrO2Nhc2VcImNlbnRlci1jZW50ZXJcIjpuKz1pLzIrZS5vZmZzZXRIZWlnaHQvMjticmVhaztjYXNlXCJ0b3AtdG9wXCI6bis9aTticmVhaztjYXNlXCJib3R0b20tdG9wXCI6bis9ZS5vZmZzZXRIZWlnaHQraTticmVhaztjYXNlXCJjZW50ZXItdG9wXCI6bis9ZS5vZmZzZXRIZWlnaHQvMitpfXJldHVybiBhLmFuY2hvclBsYWNlbWVudHx8YS5vZmZzZXR8fGlzTmFOKHQpfHwobz10KSxuK299O3QuZGVmYXVsdD1hfSxmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBuPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wLG49MDtlJiYhaXNOYU4oZS5vZmZzZXRMZWZ0KSYmIWlzTmFOKGUub2Zmc2V0VG9wKTspdCs9ZS5vZmZzZXRMZWZ0LShcIkJPRFlcIiE9ZS50YWdOYW1lP2Uuc2Nyb2xsTGVmdDowKSxuKz1lLm9mZnNldFRvcC0oXCJCT0RZXCIhPWUudGFnTmFtZT9lLnNjcm9sbFRvcDowKSxlPWUub2Zmc2V0UGFyZW50O3JldHVybnt0b3A6bixsZWZ0OnR9fTt0LmRlZmF1bHQ9bn0sZnVuY3Rpb24oZSx0KXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbj1mdW5jdGlvbihlKXtyZXR1cm4gZT1lfHxkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiW2RhdGEtYW9zXVwiKSxBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoZSxmdW5jdGlvbihlKXtyZXR1cm57bm9kZTplfX0pfTt0LmRlZmF1bHQ9bn1dKX0pOyIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIltkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjUwbXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiNTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTo1MG1zfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246LjFzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxMDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5Oi4xc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi4xNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxNTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxNTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6LjE1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi4yc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjIwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjIwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTouMnN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjI1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjI1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjouMjVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyNTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5Oi4yNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjMwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjMwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjouM3N9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjMwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjMwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIzMDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIzMDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6LjNzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIzNTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIzNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246LjM1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMzUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMzUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjM1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjM1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTouMzVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI0MDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI0MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246LjRzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI0MDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI0MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiNDAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiNDAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5Oi40c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiNDUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiNDUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi40NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjQ1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjQ1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI0NTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI0NTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6LjQ1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiNTAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiNTAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi41c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiNTAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiNTAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjUwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjUwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTouNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjU1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjU1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjouNTVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI1NTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI1NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiNTUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiNTUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5Oi41NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjYwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjYwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjouNnN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjYwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjYwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI2MDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI2MDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6LjZzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI2NTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI2NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246LjY1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiNjUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiNjUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjY1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjY1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTouNjVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI3MDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI3MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246LjdzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI3MDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI3MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiNzAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiNzAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5Oi43c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiNzUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiNzUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi43NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjc1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjc1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI3NTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI3NTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Ljc1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiODAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiODAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi44c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiODAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiODAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjgwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjgwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTouOHN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjg1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjg1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjouODVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI4NTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI4NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiODUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiODUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5Oi44NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjkwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjkwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjouOXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjkwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjkwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI5MDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI5MDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6LjlzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI5NTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI5NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246Ljk1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiOTUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiOTUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjk1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjk1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTouOTVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMDAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTAwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoxc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTAwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjEwMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTAwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjEwMDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6MXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjEwNTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMDUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuMDVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxMDUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTA1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxMDUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTA1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToxLjA1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTEwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjExMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246MS4xc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTEwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjExMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTEwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjExMDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6MS4xc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTE1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjExNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246MS4xNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjExNTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxMTUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjExNTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxMTUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjEuMTVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMjAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTIwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjJzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxMjAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTIwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxMjAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTIwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToxLjJzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMjUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTI1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjI1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTI1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjEyNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTI1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjEyNTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6MS4yNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjEzMDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMzAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuM3N9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjEzMDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxMzAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjEzMDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxMzAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjEuM3N9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjEzNTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMzUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuMzVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxMzUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTM1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxMzUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTM1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToxLjM1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTQwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjE0MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246MS40c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTQwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE0MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTQwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE0MDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6MS40c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTQ1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjE0NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246MS40NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE0NTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxNDUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE0NTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxNDUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjEuNDVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxNTAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTUwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxNTAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTUwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxNTAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTUwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToxLjVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxNTUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTU1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjU1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTU1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE1NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTU1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE1NTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6MS41NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjE2MDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxNjAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuNnN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE2MDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxNjAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE2MDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxNjAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjEuNnN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjE2NTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxNjUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuNjVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxNjUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTY1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxNjUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTY1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToxLjY1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTcwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjE3MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246MS43c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTcwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE3MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTcwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE3MDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6MS43c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTc1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjE3NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246MS43NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE3NTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxNzUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE3NTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxNzUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjEuNzVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxODAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTgwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjhzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxODAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTgwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxODAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTgwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToxLjhzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxODUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTg1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjg1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTg1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE4NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTg1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE4NTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6MS44NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjE5MDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxOTAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuOXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE5MDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxOTAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE5MDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxOTAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjEuOXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjE5NTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxOTUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuOTVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxOTUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTk1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxOTUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTk1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToxLjk1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjAwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjIwMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246MnN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjIwMDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyMDAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjIwMDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyMDAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjJzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyMDUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjA1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoyLjA1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjA1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjIwNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjA1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjIwNTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Mi4wNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjIxMDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyMTAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjIuMXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjIxMDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyMTAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjIxMDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyMTAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjIuMXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjIxNTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyMTUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjIuMTVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyMTUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjE1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyMTUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjE1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToyLjE1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjIwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjIyMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246Mi4yc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjIwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjIyMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjIwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjIyMDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Mi4yc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjI1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjIyNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246Mi4yNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjIyNTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyMjUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjIyNTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyMjUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjIuMjVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyMzAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjMwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoyLjNzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyMzAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjMwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyMzAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjMwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToyLjNzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyMzUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjM1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoyLjM1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjM1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjIzNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjM1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjIzNTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Mi4zNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjI0MDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyNDAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjIuNHN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI0MDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyNDAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI0MDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyNDAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjIuNHN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjI0NTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyNDUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjIuNDVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyNDUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjQ1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyNDUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjQ1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToyLjQ1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjUwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjI1MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246Mi41c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjUwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI1MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjUwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI1MDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Mi41c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjU1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjI1NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246Mi41NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI1NTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyNTUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI1NTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyNTUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjIuNTVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyNjAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjYwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoyLjZzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyNjAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjYwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyNjAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjYwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToyLjZzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyNjUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjY1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoyLjY1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjY1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI2NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjY1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI2NTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Mi42NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjI3MDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyNzAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjIuN3N9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI3MDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyNzAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI3MDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyNzAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjIuN3N9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjI3NTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyNzUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjIuNzVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyNzUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjc1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyNzUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjc1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToyLjc1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjgwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjI4MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246Mi44c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjgwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI4MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjgwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI4MDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Mi44c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjg1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjI4NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246Mi44NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI4NTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyODUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI4NTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyODUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjIuODVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyOTAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjkwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoyLjlzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyOTAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjkwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyOTAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjkwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToyLjlzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyOTUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjk1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoyLjk1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjk1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI5NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjk1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI5NTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Mi45NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjMwMDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIzMDAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjNzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIzMDAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMzAwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIzMDAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMzAwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTozc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1lYXNpbmc9bGluZWFyXSxib2R5W2RhdGEtYW9zLWVhc2luZz1saW5lYXJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yNSwuMjUsLjc1LC43NSl9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZWFzaW5nPWVhc2VdLGJvZHlbZGF0YS1hb3MtZWFzaW5nPWVhc2VdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZX1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1pbl0sYm9keVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1pbl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWlufVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLW91dF0sYm9keVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1vdXRdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZWFzaW5nPWVhc2UtaW4tb3V0XSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLW91dF0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1pbi1iYWNrXSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLWJhY2tdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC42LC0uMjgsLjczNSwuMDQ1KX1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1vdXQtYmFja10sYm9keVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1vdXQtYmFja10gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjE3NSwuODg1LC4zMiwxLjI3NSl9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZWFzaW5nPWVhc2UtaW4tb3V0LWJhY2tdLGJvZHlbZGF0YS1hb3MtZWFzaW5nPWVhc2UtaW4tb3V0LWJhY2tdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC42OCwtLjU1LC4yNjUsMS41NSl9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZWFzaW5nPWVhc2UtaW4tc2luZV0sYm9keVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1pbi1zaW5lXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNDcsMCwuNzQ1LC43MTUpfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLW91dC1zaW5lXSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLW91dC1zaW5lXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMzksLjU3NSwuNTY1LDEpfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLW91dC1zaW5lXSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLW91dC1zaW5lXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNDQ1LC4wNSwuNTUsLjk1KX1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1pbi1xdWFkXSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLXF1YWRdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC41NSwuMDg1LC42OCwuNTMpfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLW91dC1xdWFkXSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLW91dC1xdWFkXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjUsLjQ2LC40NSwuOTQpfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLW91dC1xdWFkXSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLW91dC1xdWFkXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNDU1LC4wMywuNTE1LC45NTUpfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLWN1YmljXSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLWN1YmljXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNTUsLjA4NSwuNjgsLjUzKX1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1vdXQtY3ViaWNdLGJvZHlbZGF0YS1hb3MtZWFzaW5nPWVhc2Utb3V0LWN1YmljXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjUsLjQ2LC40NSwuOTQpfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLW91dC1jdWJpY10sYm9keVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1pbi1vdXQtY3ViaWNdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC40NTUsLjAzLC41MTUsLjk1NSl9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZWFzaW5nPWVhc2UtaW4tcXVhcnRdLGJvZHlbZGF0YS1hb3MtZWFzaW5nPWVhc2UtaW4tcXVhcnRdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC41NSwuMDg1LC42OCwuNTMpfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLW91dC1xdWFydF0sYm9keVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1vdXQtcXVhcnRdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yNSwuNDYsLjQ1LC45NCl9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZWFzaW5nPWVhc2UtaW4tb3V0LXF1YXJ0XSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLW91dC1xdWFydF0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjQ1NSwuMDMsLjUxNSwuOTU1KX1bZGF0YS1hb3NePWZhZGVdW2RhdGEtYW9zXj1mYWRlXXtvcGFjaXR5OjA7dHJhbnNpdGlvbi1wcm9wZXJ0eTpvcGFjaXR5LHRyYW5zZm9ybX1bZGF0YS1hb3NePWZhZGVdW2RhdGEtYW9zXj1mYWRlXS5hb3MtYW5pbWF0ZXtvcGFjaXR5OjE7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCl9W2RhdGEtYW9zPWZhZGUtdXBde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDEwMHB4LDApfVtkYXRhLWFvcz1mYWRlLWRvd25de3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xMDBweCwwKX1bZGF0YS1hb3M9ZmFkZS1yaWdodF17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xMDBweCwwLDApfVtkYXRhLWFvcz1mYWRlLWxlZnRde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMDBweCwwLDApfVtkYXRhLWFvcz1mYWRlLXVwLXJpZ2h0XXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEwMHB4LDEwMHB4LDApfVtkYXRhLWFvcz1mYWRlLXVwLWxlZnRde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMDBweCwxMDBweCwwKX1bZGF0YS1hb3M9ZmFkZS1kb3duLXJpZ2h0XXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEwMHB4LC0xMDBweCwwKX1bZGF0YS1hb3M9ZmFkZS1kb3duLWxlZnRde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMDBweCwtMTAwcHgsMCl9W2RhdGEtYW9zXj16b29tXVtkYXRhLWFvc149em9vbV17b3BhY2l0eTowO3RyYW5zaXRpb24tcHJvcGVydHk6b3BhY2l0eSx0cmFuc2Zvcm19W2RhdGEtYW9zXj16b29tXVtkYXRhLWFvc149em9vbV0uYW9zLWFuaW1hdGV7b3BhY2l0eToxO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApIHNjYWxlKDEpfVtkYXRhLWFvcz16b29tLWluXXt0cmFuc2Zvcm06c2NhbGUoLjYpfVtkYXRhLWFvcz16b29tLWluLXVwXXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwxMDBweCwwKSBzY2FsZSguNil9W2RhdGEtYW9zPXpvb20taW4tZG93bl17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTEwMHB4LDApIHNjYWxlKC42KX1bZGF0YS1hb3M9em9vbS1pbi1yaWdodF17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xMDBweCwwLDApIHNjYWxlKC42KX1bZGF0YS1hb3M9em9vbS1pbi1sZWZ0XXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMTAwcHgsMCwwKSBzY2FsZSguNil9W2RhdGEtYW9zPXpvb20tb3V0XXt0cmFuc2Zvcm06c2NhbGUoMS4yKX1bZGF0YS1hb3M9em9vbS1vdXQtdXBde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDEwMHB4LDApIHNjYWxlKDEuMil9W2RhdGEtYW9zPXpvb20tb3V0LWRvd25de3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xMDBweCwwKSBzY2FsZSgxLjIpfVtkYXRhLWFvcz16b29tLW91dC1yaWdodF17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xMDBweCwwLDApIHNjYWxlKDEuMil9W2RhdGEtYW9zPXpvb20tb3V0LWxlZnRde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMDBweCwwLDApIHNjYWxlKDEuMil9W2RhdGEtYW9zXj1zbGlkZV1bZGF0YS1hb3NePXNsaWRlXXt0cmFuc2l0aW9uLXByb3BlcnR5OnRyYW5zZm9ybX1bZGF0YS1hb3NePXNsaWRlXVtkYXRhLWFvc149c2xpZGVdLmFvcy1hbmltYXRle3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApfVtkYXRhLWFvcz1zbGlkZS11cF17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMTAwJSwwKX1bZGF0YS1hb3M9c2xpZGUtZG93bl17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTEwMCUsMCl9W2RhdGEtYW9zPXNsaWRlLXJpZ2h0XXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEwMCUsMCwwKX1bZGF0YS1hb3M9c2xpZGUtbGVmdF17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDEwMCUsMCwwKX1bZGF0YS1hb3NePWZsaXBdW2RhdGEtYW9zXj1mbGlwXXtiYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjt0cmFuc2l0aW9uLXByb3BlcnR5OnRyYW5zZm9ybX1bZGF0YS1hb3M9ZmxpcC1sZWZ0XXt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoMjUwMHB4KSByb3RhdGVZKC0xMDBkZWcpfVtkYXRhLWFvcz1mbGlwLWxlZnRdLmFvcy1hbmltYXRle3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSgyNTAwcHgpIHJvdGF0ZVkoMCl9W2RhdGEtYW9zPWZsaXAtcmlnaHRde3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSgyNTAwcHgpIHJvdGF0ZVkoMTAwZGVnKX1bZGF0YS1hb3M9ZmxpcC1yaWdodF0uYW9zLWFuaW1hdGV7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDI1MDBweCkgcm90YXRlWSgwKX1bZGF0YS1hb3M9ZmxpcC11cF17dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDI1MDBweCkgcm90YXRlWCgtMTAwZGVnKX1bZGF0YS1hb3M9ZmxpcC11cF0uYW9zLWFuaW1hdGV7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDI1MDBweCkgcm90YXRlWCgwKX1bZGF0YS1hb3M9ZmxpcC1kb3duXXt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoMjUwMHB4KSByb3RhdGVYKDEwMGRlZyl9W2RhdGEtYW9zPWZsaXAtZG93bl0uYW9zLWFuaW1hdGV7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDI1MDBweCkgcm90YXRlWCgwKX1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvYW9zL2Rpc3QvYW9zLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxxRkFBcUYsd0JBQXdCLENBQUMsK0VBQStFLGtCQUFrQixDQUFDLHVHQUF1RyxxQkFBcUIsQ0FBQyx1RkFBdUYsdUJBQXVCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxvQkFBb0IsQ0FBQyx1RkFBdUYsd0JBQXdCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxxQkFBcUIsQ0FBQyx1RkFBdUYsdUJBQXVCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxvQkFBb0IsQ0FBQyx1RkFBdUYsd0JBQXdCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxxQkFBcUIsQ0FBQyx1RkFBdUYsdUJBQXVCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxvQkFBb0IsQ0FBQyx1RkFBdUYsd0JBQXdCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxxQkFBcUIsQ0FBQyx1RkFBdUYsdUJBQXVCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxvQkFBb0IsQ0FBQyx1RkFBdUYsd0JBQXdCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxxQkFBcUIsQ0FBQyx1RkFBdUYsdUJBQXVCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxvQkFBb0IsQ0FBQyx1RkFBdUYsd0JBQXdCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxxQkFBcUIsQ0FBQyx1RkFBdUYsdUJBQXVCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxvQkFBb0IsQ0FBQyx1RkFBdUYsd0JBQXdCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxxQkFBcUIsQ0FBQyx1RkFBdUYsdUJBQXVCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxvQkFBb0IsQ0FBQyx1RkFBdUYsd0JBQXdCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxxQkFBcUIsQ0FBQyx1RkFBdUYsdUJBQXVCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxvQkFBb0IsQ0FBQyx1RkFBdUYsd0JBQXdCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxxQkFBcUIsQ0FBQyx1RkFBdUYsdUJBQXVCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxvQkFBb0IsQ0FBQyx1RkFBdUYsd0JBQXdCLENBQUMsaUZBQWlGLGtCQUFrQixDQUFDLHlHQUF5RyxxQkFBcUIsQ0FBQyx5RkFBeUYsc0JBQXNCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxtQkFBbUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsc0JBQXNCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxtQkFBbUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsd0JBQXdCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxxQkFBcUIsQ0FBQyx5RkFBeUYseUJBQXlCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxzQkFBc0IsQ0FBQyx5RkFBeUYsc0JBQXNCLENBQUMsbUZBQW1GLGtCQUFrQixDQUFDLDJHQUEyRyxtQkFBbUIsQ0FBQyxxRkFBcUYsd0RBQXdELENBQUMsaUZBQWlGLCtCQUErQixDQUFDLHVGQUF1RixrQ0FBa0MsQ0FBQyx5RkFBeUYsbUNBQW1DLENBQUMsK0ZBQStGLHNDQUFzQyxDQUFDLGlHQUFpRywwREFBMEQsQ0FBQyxtR0FBbUcsNERBQTRELENBQUMseUdBQXlHLDJEQUEyRCxDQUFDLGlHQUFpRyx3REFBd0QsQ0FBQyxtR0FBbUcsd0RBQXdELENBQUMseUdBQXlHLHlEQUF5RCxDQUFDLGlHQUFpRyx5REFBeUQsQ0FBQyxtR0FBbUcsd0RBQXdELENBQUMseUdBQXlHLDJEQUEyRCxDQUFDLG1HQUFtRyx5REFBeUQsQ0FBQyxxR0FBcUcsd0RBQXdELENBQUMsMkdBQTJHLDJEQUEyRCxDQUFDLG1HQUFtRyx5REFBeUQsQ0FBQyxxR0FBcUcsd0RBQXdELENBQUMsMkdBQTJHLDJEQUEyRCxDQUFDLGlDQUFpQyxTQUFTLENBQUMscUNBQXFDLENBQUMsNkNBQTZDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxtQkFBbUIsZ0NBQWdDLENBQUMscUJBQXFCLGlDQUFpQyxDQUFDLHNCQUFzQixpQ0FBaUMsQ0FBQyxxQkFBcUIsZ0NBQWdDLENBQUMseUJBQXlCLHFDQUFxQyxDQUFDLHdCQUF3QixvQ0FBb0MsQ0FBQywyQkFBMkIsc0NBQXNDLENBQUMsMEJBQTBCLHFDQUFxQyxDQUFDLGlDQUFpQyxTQUFTLENBQUMscUNBQXFDLENBQUMsNkNBQTZDLFNBQVMsQ0FBQyxnQ0FBZ0MsQ0FBQyxtQkFBbUIsbUJBQW1CLENBQUMsc0JBQXNCLDBDQUEwQyxDQUFDLHdCQUF3QiwyQ0FBMkMsQ0FBQyx5QkFBeUIsMkNBQTJDLENBQUMsd0JBQXdCLDBDQUEwQyxDQUFDLG9CQUFvQixvQkFBb0IsQ0FBQyx1QkFBdUIsMkNBQTJDLENBQUMseUJBQXlCLDRDQUE0QyxDQUFDLDBCQUEwQiw0Q0FBNEMsQ0FBQyx5QkFBeUIsMkNBQTJDLENBQUMsbUNBQW1DLDZCQUE2QixDQUFDLCtDQUErQyx1QkFBdUIsQ0FBQyxvQkFBb0IsK0JBQStCLENBQUMsc0JBQXNCLGdDQUFnQyxDQUFDLHVCQUF1QixnQ0FBZ0MsQ0FBQyxzQkFBc0IsK0JBQStCLENBQUMsaUNBQWlDLDBCQUEwQixDQUFDLDZCQUE2QixDQUFDLHFCQUFxQiw4Q0FBOEMsQ0FBQyxpQ0FBaUMsd0NBQXdDLENBQUMsc0JBQXNCLDZDQUE2QyxDQUFDLGtDQUFrQyx3Q0FBd0MsQ0FBQyxtQkFBbUIsOENBQThDLENBQUMsK0JBQStCLHdDQUF3QyxDQUFDLHFCQUFxQiw2Q0FBNkMsQ0FBQyxpQ0FBaUMsd0NBQXdDXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIltkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjUwbXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiNTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTo1MG1zfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246LjFzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxMDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5Oi4xc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi4xNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxNTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxNTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6LjE1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi4yc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjIwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjIwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTouMnN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjI1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjI1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjouMjVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyNTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5Oi4yNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjMwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjMwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjouM3N9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjMwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjMwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIzMDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIzMDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6LjNzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIzNTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIzNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246LjM1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMzUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMzUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjM1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjM1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTouMzVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI0MDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI0MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246LjRzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI0MDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI0MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiNDAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiNDAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5Oi40c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiNDUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiNDUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi40NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjQ1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjQ1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI0NTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI0NTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6LjQ1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiNTAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiNTAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi41c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiNTAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiNTAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjUwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjUwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTouNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjU1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjU1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjouNTVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI1NTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI1NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiNTUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiNTUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5Oi41NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjYwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjYwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjouNnN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjYwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjYwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI2MDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI2MDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6LjZzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI2NTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI2NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246LjY1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiNjUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiNjUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjY1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjY1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTouNjVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI3MDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI3MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246LjdzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI3MDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI3MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiNzAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiNzAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5Oi43c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiNzUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiNzUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi43NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjc1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjc1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI3NTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI3NTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Ljc1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiODAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiODAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOi44c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiODAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiODAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjgwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjgwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTouOHN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjg1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjg1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjouODVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI4NTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI4NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiODUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiODUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5Oi44NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjkwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjkwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjouOXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjkwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjkwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCI5MDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCI5MDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6LjlzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI5NTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCI5NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246Ljk1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiOTUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiOTUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjk1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjk1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTouOTVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMDAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTAwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoxc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTAwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjEwMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTAwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjEwMDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6MXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjEwNTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMDUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuMDVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxMDUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTA1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxMDUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTA1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToxLjA1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTEwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjExMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246MS4xc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTEwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjExMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTEwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjExMDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6MS4xc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTE1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjExNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246MS4xNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjExNTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxMTUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjExNTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxMTUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjEuMTVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMjAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTIwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjJzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxMjAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTIwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxMjAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTIwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToxLjJzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMjUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTI1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjI1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTI1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjEyNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTI1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjEyNTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6MS4yNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjEzMDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMzAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuM3N9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjEzMDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxMzAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjEzMDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxMzAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjEuM3N9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjEzNTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxMzUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuMzVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxMzUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTM1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxMzUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTM1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToxLjM1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTQwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjE0MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246MS40c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTQwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE0MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTQwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE0MDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6MS40c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTQ1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjE0NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246MS40NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE0NTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxNDUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE0NTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxNDUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjEuNDVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxNTAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTUwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxNTAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTUwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxNTAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTUwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToxLjVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxNTUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTU1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjU1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTU1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE1NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTU1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE1NTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6MS41NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjE2MDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxNjAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuNnN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE2MDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxNjAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE2MDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxNjAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjEuNnN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjE2NTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxNjUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuNjVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxNjUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTY1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxNjUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTY1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToxLjY1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTcwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjE3MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246MS43c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTcwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE3MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTcwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE3MDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6MS43c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTc1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjE3NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246MS43NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE3NTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxNzUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE3NTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxNzUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjEuNzVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxODAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTgwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjhzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxODAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTgwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxODAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTgwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToxLjhzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxODUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMTg1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoxLjg1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTg1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE4NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMTg1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjE4NTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6MS44NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjE5MDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxOTAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuOXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE5MDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxOTAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjE5MDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIxOTAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjEuOXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjE5NTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIxOTUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjEuOTVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxOTUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTk1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIxOTUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMTk1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToxLjk1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjAwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjIwMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246MnN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjIwMDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyMDAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjIwMDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyMDAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjJzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyMDUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjA1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoyLjA1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjA1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjIwNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjA1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjIwNTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Mi4wNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjIxMDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyMTAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjIuMXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjIxMDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyMTAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjIxMDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyMTAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjIuMXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjIxNTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyMTUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjIuMTVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyMTUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjE1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyMTUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjE1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToyLjE1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjIwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjIyMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246Mi4yc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjIwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjIyMDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjIwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjIyMDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Mi4yc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjI1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjIyNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246Mi4yNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjIyNTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyMjUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjIyNTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyMjUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjIuMjVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyMzAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjMwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoyLjNzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyMzAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjMwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyMzAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjMwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToyLjNzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyMzUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjM1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoyLjM1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjM1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjIzNTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjM1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjIzNTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Mi4zNXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjI0MDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyNDAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjIuNHN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI0MDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyNDAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI0MDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyNDAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjIuNHN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjI0NTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyNDUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjIuNDVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyNDUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjQ1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyNDUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjQ1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToyLjQ1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjUwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjI1MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246Mi41c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjUwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI1MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjUwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI1MDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Mi41c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjU1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjI1NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246Mi41NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI1NTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyNTUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI1NTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyNTUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjIuNTVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyNjAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjYwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoyLjZzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyNjAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjYwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyNjAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjYwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToyLjZzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyNjUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjY1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoyLjY1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjY1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI2NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjY1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI2NTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Mi42NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjI3MDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyNzAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjIuN3N9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI3MDBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyNzAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI3MDBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyNzAwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjIuN3N9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjI3NTBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyNzUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjIuNzVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyNzUwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjc1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyNzUwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjc1MFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToyLjc1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjgwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjI4MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246Mi44c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjgwMFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI4MDBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjgwMFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI4MDBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Mi44c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjg1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZHVyYXRpb249XFxcIjI4NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZHVyYXRpb246Mi44NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI4NTBcXFwiXSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyODUwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWRlbGF5OjB9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZGVsYXk9XFxcIjI4NTBcXFwiXS5hb3MtYW5pbWF0ZSxib2R5W2RhdGEtYW9zLWRlbGF5PVxcXCIyODUwXFxcIl0gW2RhdGEtYW9zXS5hb3MtYW5pbWF0ZXt0cmFuc2l0aW9uLWRlbGF5OjIuODVzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyOTAwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjkwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoyLjlzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyOTAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjkwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIyOTAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMjkwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheToyLjlzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIyOTUwXFxcIl0sYm9keVtkYXRhLWFvcy1kdXJhdGlvbj1cXFwiMjk1MFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kdXJhdGlvbjoyLjk1c31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjk1MFxcXCJdLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI5NTBcXFwiXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tZGVsYXk6MH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1kZWxheT1cXFwiMjk1MFxcXCJdLmFvcy1hbmltYXRlLGJvZHlbZGF0YS1hb3MtZGVsYXk9XFxcIjI5NTBcXFwiXSBbZGF0YS1hb3NdLmFvcy1hbmltYXRle3RyYW5zaXRpb24tZGVsYXk6Mi45NXN9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZHVyYXRpb249XFxcIjMwMDBcXFwiXSxib2R5W2RhdGEtYW9zLWR1cmF0aW9uPVxcXCIzMDAwXFxcIl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLWR1cmF0aW9uOjNzfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIzMDAwXFxcIl0sYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMzAwMFxcXCJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi1kZWxheTowfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWRlbGF5PVxcXCIzMDAwXFxcIl0uYW9zLWFuaW1hdGUsYm9keVtkYXRhLWFvcy1kZWxheT1cXFwiMzAwMFxcXCJdIFtkYXRhLWFvc10uYW9zLWFuaW1hdGV7dHJhbnNpdGlvbi1kZWxheTozc31bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1lYXNpbmc9bGluZWFyXSxib2R5W2RhdGEtYW9zLWVhc2luZz1saW5lYXJdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yNSwuMjUsLjc1LC43NSl9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZWFzaW5nPWVhc2VdLGJvZHlbZGF0YS1hb3MtZWFzaW5nPWVhc2VdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZX1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1pbl0sYm9keVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1pbl0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWlufVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLW91dF0sYm9keVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1vdXRdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ZWFzZS1vdXR9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZWFzaW5nPWVhc2UtaW4tb3V0XSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLW91dF0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjplYXNlLWluLW91dH1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1pbi1iYWNrXSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLWJhY2tdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC42LC0uMjgsLjczNSwuMDQ1KX1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1vdXQtYmFja10sYm9keVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1vdXQtYmFja10gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjE3NSwuODg1LC4zMiwxLjI3NSl9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZWFzaW5nPWVhc2UtaW4tb3V0LWJhY2tdLGJvZHlbZGF0YS1hb3MtZWFzaW5nPWVhc2UtaW4tb3V0LWJhY2tdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC42OCwtLjU1LC4yNjUsMS41NSl9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZWFzaW5nPWVhc2UtaW4tc2luZV0sYm9keVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1pbi1zaW5lXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNDcsMCwuNzQ1LC43MTUpfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLW91dC1zaW5lXSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLW91dC1zaW5lXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMzksLjU3NSwuNTY1LDEpfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLW91dC1zaW5lXSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLW91dC1zaW5lXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNDQ1LC4wNSwuNTUsLjk1KX1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1pbi1xdWFkXSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLXF1YWRdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC41NSwuMDg1LC42OCwuNTMpfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLW91dC1xdWFkXSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLW91dC1xdWFkXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjUsLjQ2LC40NSwuOTQpfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLW91dC1xdWFkXSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLW91dC1xdWFkXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNDU1LC4wMywuNTE1LC45NTUpfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLWN1YmljXSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLWN1YmljXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNTUsLjA4NSwuNjgsLjUzKX1bZGF0YS1hb3NdW2RhdGEtYW9zXVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1vdXQtY3ViaWNdLGJvZHlbZGF0YS1hb3MtZWFzaW5nPWVhc2Utb3V0LWN1YmljXSBbZGF0YS1hb3Nde3RyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjUsLjQ2LC40NSwuOTQpfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLW91dC1jdWJpY10sYm9keVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1pbi1vdXQtY3ViaWNdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC40NTUsLjAzLC41MTUsLjk1NSl9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZWFzaW5nPWVhc2UtaW4tcXVhcnRdLGJvZHlbZGF0YS1hb3MtZWFzaW5nPWVhc2UtaW4tcXVhcnRdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC41NSwuMDg1LC42OCwuNTMpfVtkYXRhLWFvc11bZGF0YS1hb3NdW2RhdGEtYW9zLWVhc2luZz1lYXNlLW91dC1xdWFydF0sYm9keVtkYXRhLWFvcy1lYXNpbmc9ZWFzZS1vdXQtcXVhcnRdIFtkYXRhLWFvc117dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yNSwuNDYsLjQ1LC45NCl9W2RhdGEtYW9zXVtkYXRhLWFvc11bZGF0YS1hb3MtZWFzaW5nPWVhc2UtaW4tb3V0LXF1YXJ0XSxib2R5W2RhdGEtYW9zLWVhc2luZz1lYXNlLWluLW91dC1xdWFydF0gW2RhdGEtYW9zXXt0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjQ1NSwuMDMsLjUxNSwuOTU1KX1bZGF0YS1hb3NePWZhZGVdW2RhdGEtYW9zXj1mYWRlXXtvcGFjaXR5OjA7dHJhbnNpdGlvbi1wcm9wZXJ0eTpvcGFjaXR5LHRyYW5zZm9ybX1bZGF0YS1hb3NePWZhZGVdW2RhdGEtYW9zXj1mYWRlXS5hb3MtYW5pbWF0ZXtvcGFjaXR5OjE7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCl9W2RhdGEtYW9zPWZhZGUtdXBde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDEwMHB4LDApfVtkYXRhLWFvcz1mYWRlLWRvd25de3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xMDBweCwwKX1bZGF0YS1hb3M9ZmFkZS1yaWdodF17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xMDBweCwwLDApfVtkYXRhLWFvcz1mYWRlLWxlZnRde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMDBweCwwLDApfVtkYXRhLWFvcz1mYWRlLXVwLXJpZ2h0XXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEwMHB4LDEwMHB4LDApfVtkYXRhLWFvcz1mYWRlLXVwLWxlZnRde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMDBweCwxMDBweCwwKX1bZGF0YS1hb3M9ZmFkZS1kb3duLXJpZ2h0XXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEwMHB4LC0xMDBweCwwKX1bZGF0YS1hb3M9ZmFkZS1kb3duLWxlZnRde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMDBweCwtMTAwcHgsMCl9W2RhdGEtYW9zXj16b29tXVtkYXRhLWFvc149em9vbV17b3BhY2l0eTowO3RyYW5zaXRpb24tcHJvcGVydHk6b3BhY2l0eSx0cmFuc2Zvcm19W2RhdGEtYW9zXj16b29tXVtkYXRhLWFvc149em9vbV0uYW9zLWFuaW1hdGV7b3BhY2l0eToxO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApIHNjYWxlKDEpfVtkYXRhLWFvcz16b29tLWluXXt0cmFuc2Zvcm06c2NhbGUoLjYpfVtkYXRhLWFvcz16b29tLWluLXVwXXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwxMDBweCwwKSBzY2FsZSguNil9W2RhdGEtYW9zPXpvb20taW4tZG93bl17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTEwMHB4LDApIHNjYWxlKC42KX1bZGF0YS1hb3M9em9vbS1pbi1yaWdodF17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xMDBweCwwLDApIHNjYWxlKC42KX1bZGF0YS1hb3M9em9vbS1pbi1sZWZ0XXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMTAwcHgsMCwwKSBzY2FsZSguNil9W2RhdGEtYW9zPXpvb20tb3V0XXt0cmFuc2Zvcm06c2NhbGUoMS4yKX1bZGF0YS1hb3M9em9vbS1vdXQtdXBde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDEwMHB4LDApIHNjYWxlKDEuMil9W2RhdGEtYW9zPXpvb20tb3V0LWRvd25de3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xMDBweCwwKSBzY2FsZSgxLjIpfVtkYXRhLWFvcz16b29tLW91dC1yaWdodF17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKC0xMDBweCwwLDApIHNjYWxlKDEuMil9W2RhdGEtYW9zPXpvb20tb3V0LWxlZnRde3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMDBweCwwLDApIHNjYWxlKDEuMil9W2RhdGEtYW9zXj1zbGlkZV1bZGF0YS1hb3NePXNsaWRlXXt0cmFuc2l0aW9uLXByb3BlcnR5OnRyYW5zZm9ybX1bZGF0YS1hb3NePXNsaWRlXVtkYXRhLWFvc149c2xpZGVdLmFvcy1hbmltYXRle3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApfVtkYXRhLWFvcz1zbGlkZS11cF17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMTAwJSwwKX1bZGF0YS1hb3M9c2xpZGUtZG93bl17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTEwMCUsMCl9W2RhdGEtYW9zPXNsaWRlLXJpZ2h0XXt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEwMCUsMCwwKX1bZGF0YS1hb3M9c2xpZGUtbGVmdF17dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDEwMCUsMCwwKX1bZGF0YS1hb3NePWZsaXBdW2RhdGEtYW9zXj1mbGlwXXtiYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjt0cmFuc2l0aW9uLXByb3BlcnR5OnRyYW5zZm9ybX1bZGF0YS1hb3M9ZmxpcC1sZWZ0XXt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoMjUwMHB4KSByb3RhdGVZKC0xMDBkZWcpfVtkYXRhLWFvcz1mbGlwLWxlZnRdLmFvcy1hbmltYXRle3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSgyNTAwcHgpIHJvdGF0ZVkoMCl9W2RhdGEtYW9zPWZsaXAtcmlnaHRde3RyYW5zZm9ybTpwZXJzcGVjdGl2ZSgyNTAwcHgpIHJvdGF0ZVkoMTAwZGVnKX1bZGF0YS1hb3M9ZmxpcC1yaWdodF0uYW9zLWFuaW1hdGV7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDI1MDBweCkgcm90YXRlWSgwKX1bZGF0YS1hb3M9ZmxpcC11cF17dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDI1MDBweCkgcm90YXRlWCgtMTAwZGVnKX1bZGF0YS1hb3M9ZmxpcC11cF0uYW9zLWFuaW1hdGV7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDI1MDBweCkgcm90YXRlWCgwKX1bZGF0YS1hb3M9ZmxpcC1kb3duXXt0cmFuc2Zvcm06cGVyc3BlY3RpdmUoMjUwMHB4KSByb3RhdGVYKDEwMGRlZyl9W2RhdGEtYW9zPWZsaXAtZG93bl0uYW9zLWFuaW1hdGV7dHJhbnNmb3JtOnBlcnNwZWN0aXZlKDI1MDBweCkgcm90YXRlWCgwKX1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4vQXNzZXRzL0NvZGVfTmV3X1JvbWFuX05lcmRfRm9udF9Db21wbGV0ZV9Nb25vLnR0ZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImJvZHl7YmFja2dyb3VuZC1jb2xvcjojMGUwZDFhfUBmb250LWZhY2V7Zm9udC1mYW1pbHk6J05ld1JvbWFuJztzcmM6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKX1oMSxoMixoMyxoNHtmb250LWZhbWlseTpOZXdSb21hbn1zcGFue2ZvbnQtZmFtaWx5Ok5ld1JvbWFufXB7Zm9udC1mYW1pbHk6TmV3Um9tYW59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL0FwcC52dWVcIixcIndlYnBhY2s6Ly8uL3NyYy9fdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBZ0NBLEtBQ0ksd0JDakNhLENEa0NoQixXQUdHLHNCQUF1QixDQUN2QiwyQ0FBK0QsQ0FHbkUsWUFDSSxvQkFBcUIsQ0FDeEIsS0FHRyxvQkFBcUIsQ0FDeEIsRUFHRyxvQkFBcUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuQGltcG9ydCAnX3ZhcmlhYmxlcyc7XFxuXFxuYm9keSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRwcmltYXJ5O1xcbn1cXG5cXG5AZm9udC1mYWNlIHtcXG4gICAgZm9udC1mYW1pbHk6ICdOZXdSb21hbic7XFxuICAgIHNyYzogdXJsKCcuL0Fzc2V0cy9Db2RlX05ld19Sb21hbl9OZXJkX0ZvbnRfQ29tcGxldGVfTW9uby50dGYnKTtcXG59XFxuXFxuaDEsIGgyLCBoMywgaDQge1xcbiAgICBmb250LWZhbWlseTogTmV3Um9tYW47XFxufVxcblxcbnNwYW4ge1xcbiAgICBmb250LWZhbWlseTogTmV3Um9tYW47XFxufVxcblxcbnAge1xcbiAgICBmb250LWZhbWlseTogTmV3Um9tYW47XFxufVxcblwiLFwiJHByaW1hcnk6ICMwZTBkMWE7XFxuJG9uLXByaW1hcnk6ICNGMEY0RUY7XFxuJG9uLXByaW1hcnktaG92ZXI6ICNCRkNDOTQ7XFxuJHNlY29uZGFyeTogIzE1MTQyNjtcXG4kb24tc2Vjb25kYXJ5OiAjRjBGNEVGO1xcbiRvbi1zZWNvbmRhcnktaG92ZXI6ICNCRkNDOTQ7XFxuXFxuJGJhY2tncm91bmQ6ICRwcmltYXJ5O1xcblxcbiRiYW5uZXJfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJGJhbm5lcl90ZXh0OiAkb24tcHJpbWFyeTtcXG4kYmFubmVyX25hdl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kbmF2X3RleHQ6ICRvbi1wcmltYXJ5O1xcbiRuYXZfdGV4dF9ob3ZlcjogJG9uLXByaW1hcnktaG92ZXI7XFxuJG5ld3NfYm9yZGVyOiAkb24tcHJpbWFyeTtcXG5cXG4kbGFuZGluZ190ZXh0OiAkcHJpbWFyeTtcXG5cXG4kcm9hZG1hcF90ZXh0OiAkb24tcHJpbWFyeTtcXG4kcm9hZG1hcF9iYWNrZ3JvdW5kOiAkc2Vjb25kYXJ5O1xcblxcbiRyb2FkbWFwX2l0ZW06ICRwcmltYXJ5OyBcXG5cXG4kRkFRX2JhY2tncm91bmQ6ICRzZWNvbmRhcnk7XFxuJEZBUV9iYWNrZ3JvdW5kX2hvdmVyOiAjODA0MjYwO1xcbiRGQVFfcXVlc3Rpb25fYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJEZBUV9hbnN3ZXJfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJEZBUV90ZXh0OiAkb24tcHJpbWFyeTtcXG5cXG4kZm9vdGVyX2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRmb290ZXJfdGV4dDogJG9uLXByaW1hcnk7XFxuXFxuJHRlYW1fYmFja2dyb3VuZDogJHNlY29uZGFyeTtcXG4kdGVhbV90aXRsZTogJG9uLXByaW1hcnk7XFxuXFxuJG1lbWJlcl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kbWVtYmVyX3RleHQ6ICRvbi1wcmltYXJ5O1xcblxcbiRyYXJpdHlfYmFja2dyb3VuZDogJHNlY29uZGFyeTtcXG4kcmFyaXR5X3RleHQ6ICRvbi1wcmltYXJ5O1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5xdWVzdGlvbltkYXRhLXYtNGIwNDQ5MWNde2N1cnNvcjpwb2ludGVyfS5jb250YWluZXJbZGF0YS12LTRiMDQ0OTFjXXttYXJnaW46MnZoIDB9LnF1ZXN0aW9uW2RhdGEtdi00YjA0NDkxY117YmFja2dyb3VuZC1jb2xvcjojMGUwZDFhO3BhZGRpbmc6MnB4fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9Db21wb25lbnRzL0ZBUXF1ZXN0aW9uLnZ1ZVwiLFwid2VicGFjazovLy4vc3JjL192YXJpYWJsZXMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUErQkEsMkJBQ0UsY0FBZSxDQUNoQiw0QkFHQyxZQUFhLENBQ2QsMkJBR0Msd0JDeENlLENEeUNmLFdBQVlcIixcInNvdXJjZXNDb250ZW50XCI6W1wiXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuQGltcG9ydCBcXFwiLi4vX3ZhcmlhYmxlc1xcXCI7XFxuXFxuLnF1ZXN0aW9uIHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmNvbnRhaW5lciB7XFxuICBtYXJnaW46IDJ2aCAwO1xcbn1cXG5cXG4ucXVlc3Rpb24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogJEZBUV9xdWVzdGlvbl9iYWNrZ3JvdW5kO1xcbiAgcGFkZGluZzogMnB4O1xcbn1cXG5cXG5cIixcIiRwcmltYXJ5OiAjMGUwZDFhO1xcbiRvbi1wcmltYXJ5OiAjRjBGNEVGO1xcbiRvbi1wcmltYXJ5LWhvdmVyOiAjQkZDQzk0O1xcbiRzZWNvbmRhcnk6ICMxNTE0MjY7XFxuJG9uLXNlY29uZGFyeTogI0YwRjRFRjtcXG4kb24tc2Vjb25kYXJ5LWhvdmVyOiAjQkZDQzk0O1xcblxcbiRiYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG5cXG4kYmFubmVyX2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRiYW5uZXJfdGV4dDogJG9uLXByaW1hcnk7XFxuJGJhbm5lcl9uYXZfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJG5hdl90ZXh0OiAkb24tcHJpbWFyeTtcXG4kbmF2X3RleHRfaG92ZXI6ICRvbi1wcmltYXJ5LWhvdmVyO1xcbiRuZXdzX2JvcmRlcjogJG9uLXByaW1hcnk7XFxuXFxuJGxhbmRpbmdfdGV4dDogJHByaW1hcnk7XFxuXFxuJHJvYWRtYXBfdGV4dDogJG9uLXByaW1hcnk7XFxuJHJvYWRtYXBfYmFja2dyb3VuZDogJHNlY29uZGFyeTtcXG5cXG4kcm9hZG1hcF9pdGVtOiAkcHJpbWFyeTsgXFxuXFxuJEZBUV9iYWNrZ3JvdW5kOiAkc2Vjb25kYXJ5O1xcbiRGQVFfYmFja2dyb3VuZF9ob3ZlcjogIzgwNDI2MDtcXG4kRkFRX3F1ZXN0aW9uX2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRGQVFfYW5zd2VyX2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRGQVFfdGV4dDogJG9uLXByaW1hcnk7XFxuXFxuJGZvb3Rlcl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kZm9vdGVyX3RleHQ6ICRvbi1wcmltYXJ5O1xcblxcbiR0ZWFtX2JhY2tncm91bmQ6ICRzZWNvbmRhcnk7XFxuJHRlYW1fdGl0bGU6ICRvbi1wcmltYXJ5O1xcblxcbiRtZW1iZXJfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJG1lbWJlcl90ZXh0OiAkb24tcHJpbWFyeTtcXG5cXG4kcmFyaXR5X2JhY2tncm91bmQ6ICRzZWNvbmRhcnk7XFxuJHJhcml0eV90ZXh0OiAkb24tcHJpbWFyeTtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuZm9vdGVyW2RhdGEtdi1hNGU3MzNhYV17Y29sb3I6I0YwRjRFRjtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47bWFyZ2luLXRvcDo0MHB4fXBbZGF0YS12LWE0ZTczM2FhXXttYXJnaW46MH1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQ29tcG9uZW50cy9Gb290ZXIudnVlXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvX3ZhcmlhYmxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQW9CQSx5QkFDRSxhQ3BCa0IsQ0RxQmxCLFlBQWEsQ0FDYiw2QkFBOEIsQ0FDOUIsZUFBZ0IsQ0FDakIsbUJBR0MsUUFBU1wiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5AaW1wb3J0IFxcXCIuLi9fdmFyaWFibGVzXFxcIjtcXG5cXG4uZm9vdGVyIHtcXG4gIGNvbG9yOiAkZm9vdGVyX3RleHQ7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgbWFyZ2luLXRvcDogNDBweDtcXG59XFxuXFxucCB7XFxuICBtYXJnaW46IDA7XFxufVxcblxcblwiLFwiJHByaW1hcnk6ICMwZTBkMWE7XFxuJG9uLXByaW1hcnk6ICNGMEY0RUY7XFxuJG9uLXByaW1hcnktaG92ZXI6ICNCRkNDOTQ7XFxuJHNlY29uZGFyeTogIzE1MTQyNjtcXG4kb24tc2Vjb25kYXJ5OiAjRjBGNEVGO1xcbiRvbi1zZWNvbmRhcnktaG92ZXI6ICNCRkNDOTQ7XFxuXFxuJGJhY2tncm91bmQ6ICRwcmltYXJ5O1xcblxcbiRiYW5uZXJfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJGJhbm5lcl90ZXh0OiAkb24tcHJpbWFyeTtcXG4kYmFubmVyX25hdl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kbmF2X3RleHQ6ICRvbi1wcmltYXJ5O1xcbiRuYXZfdGV4dF9ob3ZlcjogJG9uLXByaW1hcnktaG92ZXI7XFxuJG5ld3NfYm9yZGVyOiAkb24tcHJpbWFyeTtcXG5cXG4kbGFuZGluZ190ZXh0OiAkcHJpbWFyeTtcXG5cXG4kcm9hZG1hcF90ZXh0OiAkb24tcHJpbWFyeTtcXG4kcm9hZG1hcF9iYWNrZ3JvdW5kOiAkc2Vjb25kYXJ5O1xcblxcbiRyb2FkbWFwX2l0ZW06ICRwcmltYXJ5OyBcXG5cXG4kRkFRX2JhY2tncm91bmQ6ICRzZWNvbmRhcnk7XFxuJEZBUV9iYWNrZ3JvdW5kX2hvdmVyOiAjODA0MjYwO1xcbiRGQVFfcXVlc3Rpb25fYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJEZBUV9hbnN3ZXJfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJEZBUV90ZXh0OiAkb24tcHJpbWFyeTtcXG5cXG4kZm9vdGVyX2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRmb290ZXJfdGV4dDogJG9uLXByaW1hcnk7XFxuXFxuJHRlYW1fYmFja2dyb3VuZDogJHNlY29uZGFyeTtcXG4kdGVhbV90aXRsZTogJG9uLXByaW1hcnk7XFxuXFxuJG1lbWJlcl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kbWVtYmVyX3RleHQ6ICRvbi1wcmltYXJ5O1xcblxcbiRyYXJpdHlfYmFja2dyb3VuZDogJHNlY29uZGFyeTtcXG4kcmFyaXR5X3RleHQ6ICRvbi1wcmltYXJ5O1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5oZWFkZXJbZGF0YS12LTYyODI2YmM2XXt6LWluZGV4OjEwO3Bvc2l0aW9uOmZpeGVkO3dpZHRoOjEwMCU7dG9wOjA7bGVmdDowO2JhY2tncm91bmQtY29sb3I6IzBlMGQxYTtjb2xvcjojRjBGNEVGO29wYWNpdHk6ODAlO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47anVzdGlmeS1jb250ZW50OmNlbnRlcn0uaGVhZGVyX2NvbnRhaW5lcltkYXRhLXYtNjI4MjZiYzZde2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2VlbjthbGlnbi1pdGVtczpjZW50ZXJ9Lm5hdltkYXRhLXYtNjI4MjZiYzZde2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6ZW5kO2FsaWduLWl0ZW1zOmNlbnRlcjt3aWR0aDo2MCV9Lm5ld3NbZGF0YS12LTYyODI2YmM2XXttYXJnaW4tcmlnaHQ6MnZ3O2JvcmRlcjoycHggc29saWQgI0YwRjRFRjtib3JkZXItcmFkaXVzOjIwcHg7cGFkZGluZzoxMHB4O3RleHQtYWxpZ246Y2VudGVyfS50aXRsZVtkYXRhLXYtNjI4MjZiYzZde21hcmdpbi1sZWZ0OjIwcHh9Lm1vYmlsZV9tZW51X2ljb25bZGF0YS12LTYyODI2YmM2XXtkaXNwbGF5Om5vbmU7Zm9udC1zaXplOjUwcHQ7bWFyZ2luLXJpZ2h0OjF2dztjdXJzb3I6cG9pbnRlcn0ubW9iaWxlX25hdl9tZW51W2RhdGEtdi02MjgyNmJjNl17ZGlzcGxheTpub25lfUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTEwMHB4KXsubW9iaWxlX21lbnVfaWNvbltkYXRhLXYtNjI4MjZiYzZde2Rpc3BsYXk6YmxvY2t9Lm1vYmlsZV9uYXZfbWVudVtkYXRhLXYtNjI4MjZiYzZde2Rpc3BsYXk6YmxvY2t9LmxpbmtzW2RhdGEtdi02MjgyNmJjNl17ZGlzcGxheTpub25lfX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQ29tcG9uZW50cy9IZWFkZXIudnVlXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvX3ZhcmlhYmxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQTRDQSx5QkFDRSxVQUFXLENBQ1gsY0FBZSxDQUNmLFVBQVcsQ0FDWCxLQUFNLENBQ04sTUFBTyxDQUNQLHdCQ2xEZSxDRG1EZixhQ2xEa0IsQ0RtRGxCLFdBQVksQ0FDWixZQUFhLENBQ2IscUJBQXNCLENBQ3RCLHNCQUF1QixDQUN4QixtQ0FHQyxZQUFhLENBQ2IsNkJBQThCLENBQzlCLGtCQUFtQixDQUNwQixzQkFHQyxZQUFhLENBQ2IsbUJBQW9CLENBQ3BCLGtCQUFtQixDQUNuQixTQUFVLENBQ1gsdUJBR0MsZ0JBQWlCLENBQ2pCLHdCQ3hFa0IsQ0R5RWxCLGtCQUFtQixDQUNuQixZQUFhLENBQ2IsaUJBQWtCLENBQ25CLHdCQUdDLGdCQUFpQixDQUNsQixtQ0FHQyxZQUFhLENBQ2IsY0FBZSxDQUNmLGdCQUFpQixDQUNqQixjQUFlLENBQ2hCLGtDQUdDLFlBQWEsQ0FDZCwyQ0FHQyxtQ0FDRSxhQUFjLENBQ2Ysa0NBR0MsYUFBYyxDQUNmLHdCQUdDLFlBQWEsQ0FDZFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5AaW1wb3J0IFxcXCIuLi9fdmFyaWFibGVzXFxcIjtcXG5cXG4uaGVhZGVyIHtcXG4gIHotaW5kZXg6IDEwO1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgd2lkdGg6IDEwMCU7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogJGJhbm5lcl9iYWNrZ3JvdW5kO1xcbiAgY29sb3I6ICRiYW5uZXJfdGV4dDtcXG4gIG9wYWNpdHk6IDgwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxufVxcblxcbi5oZWFkZXJfY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4ubmF2IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGVuZDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogNjAlO1xcbn1cXG5cXG4ubmV3cyB7XFxuICBtYXJnaW4tcmlnaHQ6IDJ2dztcXG4gIGJvcmRlcjogMnB4IHNvbGlkICRiYW5uZXJfdGV4dDtcXG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XFxuICBwYWRkaW5nOiAxMHB4O1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4udGl0bGUge1xcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XFxufVxcblxcbi5tb2JpbGVfbWVudV9pY29uIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBmb250LXNpemU6IDUwcHQ7XFxuICBtYXJnaW4tcmlnaHQ6IDF2dztcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLm1vYmlsZV9uYXZfbWVudSB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDExMDBweCkge1xcbiAgLm1vYmlsZV9tZW51X2ljb24ge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gIH1cXG5cXG4gIC5tb2JpbGVfbmF2X21lbnUge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gIH1cXG5cXG4gIC5saW5rcyB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICB9XFxufVxcblwiLFwiJHByaW1hcnk6ICMwZTBkMWE7XFxuJG9uLXByaW1hcnk6ICNGMEY0RUY7XFxuJG9uLXByaW1hcnktaG92ZXI6ICNCRkNDOTQ7XFxuJHNlY29uZGFyeTogIzE1MTQyNjtcXG4kb24tc2Vjb25kYXJ5OiAjRjBGNEVGO1xcbiRvbi1zZWNvbmRhcnktaG92ZXI6ICNCRkNDOTQ7XFxuXFxuJGJhY2tncm91bmQ6ICRwcmltYXJ5O1xcblxcbiRiYW5uZXJfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJGJhbm5lcl90ZXh0OiAkb24tcHJpbWFyeTtcXG4kYmFubmVyX25hdl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kbmF2X3RleHQ6ICRvbi1wcmltYXJ5O1xcbiRuYXZfdGV4dF9ob3ZlcjogJG9uLXByaW1hcnktaG92ZXI7XFxuJG5ld3NfYm9yZGVyOiAkb24tcHJpbWFyeTtcXG5cXG4kbGFuZGluZ190ZXh0OiAkcHJpbWFyeTtcXG5cXG4kcm9hZG1hcF90ZXh0OiAkb24tcHJpbWFyeTtcXG4kcm9hZG1hcF9iYWNrZ3JvdW5kOiAkc2Vjb25kYXJ5O1xcblxcbiRyb2FkbWFwX2l0ZW06ICRwcmltYXJ5OyBcXG5cXG4kRkFRX2JhY2tncm91bmQ6ICRzZWNvbmRhcnk7XFxuJEZBUV9iYWNrZ3JvdW5kX2hvdmVyOiAjODA0MjYwO1xcbiRGQVFfcXVlc3Rpb25fYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJEZBUV9hbnN3ZXJfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJEZBUV90ZXh0OiAkb24tcHJpbWFyeTtcXG5cXG4kZm9vdGVyX2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRmb290ZXJfdGV4dDogJG9uLXByaW1hcnk7XFxuXFxuJHRlYW1fYmFja2dyb3VuZDogJHNlY29uZGFyeTtcXG4kdGVhbV90aXRsZTogJG9uLXByaW1hcnk7XFxuXFxuJG1lbWJlcl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kbWVtYmVyX3RleHQ6ICRvbi1wcmltYXJ5O1xcblxcbiRyYXJpdHlfYmFja2dyb3VuZDogJHNlY29uZGFyeTtcXG4kcmFyaXR5X3RleHQ6ICRvbi1wcmltYXJ5O1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5tZW51W2RhdGEtdi1mMmIxMzM3Y117ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kfS5tZW51X2l0ZW1bZGF0YS12LWYyYjEzMzdjXXttYXJnaW4tbGVmdDoydnc7Y3Vyc29yOnBvaW50ZXI7Zm9udC1zaXplOjE2cHR9LnNvY2lhbFtkYXRhLXYtZjJiMTMzN2Nde21hcmdpbi1yaWdodDoxdnd9Lm1lbnVfY29sdW1uW2RhdGEtdi1mMmIxMzM3Y117ZmxleC1kaXJlY3Rpb246Y29sdW1ufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9Db21wb25lbnRzL05hdk1lbnUudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQXNDQSx1QkFDRSxZQUFhLENBQ2Isa0JBQW1CLENBQ25CLDRCQUE2QixDQUM5Qiw0QkFHRyxlQUFnQixDQUNoQixjQUFlLENBQ2YsY0FBZSxDQUNoQix5QkFHRCxnQkFBaUIsQ0FDbEIsOEJBR0MscUJBQXNCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIlxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcbkBpbXBvcnQgXFxcIi4uL192YXJpYWJsZXNcXFwiO1xcblxcbi5tZW51IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxufVxcblxcbi5tZW51X2l0ZW0ge1xcbiAgICBtYXJnaW4tbGVmdDogMnZ3O1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogMTZwdDtcXG4gIH1cXG5cXG4uc29jaWFsIHtcXG4gIG1hcmdpbi1yaWdodDogMXZ3O1xcbn1cXG5cXG4ubWVudV9jb2x1bW4ge1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnRlYW1fbWVtYmVyW2RhdGEtdi0xN2UzYjVlN117YmFja2dyb3VuZC1jb2xvcjojMGUwZDFhO2NvbG9yOiNGMEY0RUY7dGV4dC1hbGlnbjpjZW50ZXI7cGFkZGluZzoxNXB4O21hcmdpbjoxNXB4O2JvcmRlci1yYWRpdXM6MTBweH0ubWVtYmVyX2ltYWdlW2RhdGEtdi0xN2UzYjVlN117d2lkdGg6MjB2dztoZWlnaHQ6YXV0b31cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQ29tcG9uZW50cy9UZWFtTWVtYmVyLnZ1ZVwiLFwid2VicGFjazovLy4vc3JjL192YXJpYWJsZXMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUEwQkEsOEJBQ0ksd0JDM0JhLENENEJiLGFDM0JnQixDRDRCaEIsaUJBQWtCLENBQ2xCLFlBQWEsQ0FDYixXQUFZLENBQ1osa0JBQW1CLENBQ3RCLCtCQUdHLFVBQVcsQ0FDWCxXQUFZXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIlxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcbkBpbXBvcnQgJy4uL192YXJpYWJsZXMnO1xcblxcbi50ZWFtX21lbWJlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRtZW1iZXJfYmFja2dyb3VuZDtcXG4gICAgY29sb3I6ICRtZW1iZXJfdGV4dDtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBwYWRkaW5nOiAxNXB4O1xcbiAgICBtYXJnaW46IDE1cHg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxufVxcblxcbi5tZW1iZXJfaW1hZ2Uge1xcbiAgICB3aWR0aDogMjB2dztcXG4gICAgaGVpZ2h0OiBhdXRvO1xcbn1cXG5cXG5cIixcIiRwcmltYXJ5OiAjMGUwZDFhO1xcbiRvbi1wcmltYXJ5OiAjRjBGNEVGO1xcbiRvbi1wcmltYXJ5LWhvdmVyOiAjQkZDQzk0O1xcbiRzZWNvbmRhcnk6ICMxNTE0MjY7XFxuJG9uLXNlY29uZGFyeTogI0YwRjRFRjtcXG4kb24tc2Vjb25kYXJ5LWhvdmVyOiAjQkZDQzk0O1xcblxcbiRiYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG5cXG4kYmFubmVyX2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRiYW5uZXJfdGV4dDogJG9uLXByaW1hcnk7XFxuJGJhbm5lcl9uYXZfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJG5hdl90ZXh0OiAkb24tcHJpbWFyeTtcXG4kbmF2X3RleHRfaG92ZXI6ICRvbi1wcmltYXJ5LWhvdmVyO1xcbiRuZXdzX2JvcmRlcjogJG9uLXByaW1hcnk7XFxuXFxuJGxhbmRpbmdfdGV4dDogJHByaW1hcnk7XFxuXFxuJHJvYWRtYXBfdGV4dDogJG9uLXByaW1hcnk7XFxuJHJvYWRtYXBfYmFja2dyb3VuZDogJHNlY29uZGFyeTtcXG5cXG4kcm9hZG1hcF9pdGVtOiAkcHJpbWFyeTsgXFxuXFxuJEZBUV9iYWNrZ3JvdW5kOiAkc2Vjb25kYXJ5O1xcbiRGQVFfYmFja2dyb3VuZF9ob3ZlcjogIzgwNDI2MDtcXG4kRkFRX3F1ZXN0aW9uX2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRGQVFfYW5zd2VyX2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRGQVFfdGV4dDogJG9uLXByaW1hcnk7XFxuXFxuJGZvb3Rlcl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kZm9vdGVyX3RleHQ6ICRvbi1wcmltYXJ5O1xcblxcbiR0ZWFtX2JhY2tncm91bmQ6ICRzZWNvbmRhcnk7XFxuJHRlYW1fdGl0bGU6ICRvbi1wcmltYXJ5O1xcblxcbiRtZW1iZXJfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJG1lbWJlcl90ZXh0OiAkb24tcHJpbWFyeTtcXG5cXG4kcmFyaXR5X2JhY2tncm91bmQ6ICRzZWNvbmRhcnk7XFxuJHJhcml0eV90ZXh0OiAkb24tcHJpbWFyeTtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIjRkFRX2NvbnRhaW5lcltkYXRhLXYtY2NiNTFkZmNde2JhY2tncm91bmQtY29sb3I6IzE1MTQyNjttYXJnaW46MCAxMHZ3O2NvbG9yOiNGMEY0RUY7bWFyZ2luLXRvcDoyMHB4O3BhZGRpbmc6MTVweH0udGl0bGVbZGF0YS12LWNjYjUxZGZjXXt0ZXh0LWFsaWduOmNlbnRlcjtmb250LXNpemU6MjRwdH1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMDBweCl7LnRpdGxlIGgxW2RhdGEtdi1jY2I1MWRmY117Zm9udC1zaXplOjMwcHR9fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9QYWdlcy9GQVEudnVlXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvX3ZhcmlhYmxlcy5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQTBEQSxnQ0FDRSx3QkN4RGlCLENEeURqQixhQUFjLENBQ2QsYUM1RGtCLENENkRsQixlQUFnQixDQUNoQixZQUFhLENBQ2Qsd0JBR0MsaUJBQWtCLENBQ2xCLGNBQWUsQ0FDaEIsMkNBR0MsMkJBRUksY0FBZSxDQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5AaW1wb3J0IFxcXCIuLi9fdmFyaWFibGVzXFxcIjtcXG5cXG4jRkFRX2NvbnRhaW5lciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkRkFRX2JhY2tncm91bmQ7XFxuICBtYXJnaW46IDAgMTB2dztcXG4gIGNvbG9yOiAkRkFRX3RleHQ7XFxuICBtYXJnaW4tdG9wOiAyMHB4O1xcbiAgcGFkZGluZzogMTVweDtcXG59XFxuXFxuLnRpdGxlIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMjRwdDtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDAwcHgpIHtcXG4gIC50aXRsZSB7XFxuICAgIGgxe1xcbiAgICAgIGZvbnQtc2l6ZTogMzBwdDtcXG4gICAgfVxcbiAgfVxcblxcbn1cXG5cXG5cIixcIiRwcmltYXJ5OiAjMGUwZDFhO1xcbiRvbi1wcmltYXJ5OiAjRjBGNEVGO1xcbiRvbi1wcmltYXJ5LWhvdmVyOiAjQkZDQzk0O1xcbiRzZWNvbmRhcnk6ICMxNTE0MjY7XFxuJG9uLXNlY29uZGFyeTogI0YwRjRFRjtcXG4kb24tc2Vjb25kYXJ5LWhvdmVyOiAjQkZDQzk0O1xcblxcbiRiYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG5cXG4kYmFubmVyX2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRiYW5uZXJfdGV4dDogJG9uLXByaW1hcnk7XFxuJGJhbm5lcl9uYXZfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJG5hdl90ZXh0OiAkb24tcHJpbWFyeTtcXG4kbmF2X3RleHRfaG92ZXI6ICRvbi1wcmltYXJ5LWhvdmVyO1xcbiRuZXdzX2JvcmRlcjogJG9uLXByaW1hcnk7XFxuXFxuJGxhbmRpbmdfdGV4dDogJHByaW1hcnk7XFxuXFxuJHJvYWRtYXBfdGV4dDogJG9uLXByaW1hcnk7XFxuJHJvYWRtYXBfYmFja2dyb3VuZDogJHNlY29uZGFyeTtcXG5cXG4kcm9hZG1hcF9pdGVtOiAkcHJpbWFyeTsgXFxuXFxuJEZBUV9iYWNrZ3JvdW5kOiAkc2Vjb25kYXJ5O1xcbiRGQVFfYmFja2dyb3VuZF9ob3ZlcjogIzgwNDI2MDtcXG4kRkFRX3F1ZXN0aW9uX2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRGQVFfYW5zd2VyX2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRGQVFfdGV4dDogJG9uLXByaW1hcnk7XFxuXFxuJGZvb3Rlcl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kZm9vdGVyX3RleHQ6ICRvbi1wcmltYXJ5O1xcblxcbiR0ZWFtX2JhY2tncm91bmQ6ICRzZWNvbmRhcnk7XFxuJHRlYW1fdGl0bGU6ICRvbi1wcmltYXJ5O1xcblxcbiRtZW1iZXJfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJG1lbWJlcl90ZXh0OiAkb24tcHJpbWFyeTtcXG5cXG4kcmFyaXR5X2JhY2tncm91bmQ6ICRzZWNvbmRhcnk7XFxuJHJhcml0eV90ZXh0OiAkb24tcHJpbWFyeTtcIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4uL0Fzc2V0cy9NaWtlLmpwZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5sYW5kaW5nW2RhdGEtdi03N2ZiNzE4M117aGVpZ2h0OjEwODBweDt3aWR0aDo5OHZ3fS5sYW5kaW5nW2RhdGEtdi03N2ZiNzE4M117YmFja2dyb3VuZC1pbWFnZTp1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOmNlbnRlciB0b3A7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9QYWdlcy9MYW5kaW5nLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFZQSwwQkFDRSxhQUFjLENBQ2QsVUFBVyxDQUNaLDBCQUdDLHdEQUEyQyxDQUMzQyxxQkFBc0IsQ0FDdEIsOEJBQStCLENBQy9CLDJCQUE0QlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5AaW1wb3J0IFxcXCIuLi9fdmFyaWFibGVzXFxcIjtcXG5cXG4ubGFuZGluZyB7XFxuICBoZWlnaHQ6IDEwODBweDtcXG4gIHdpZHRoOiA5OHZ3O1xcbn1cXG5cXG4ubGFuZGluZyB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXFxcIi4uL0Fzc2V0cy9NaWtlLmpwZ1xcXCIpO1xcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlciB0b3A7XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xcblxcbn1cXG5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIjcmFyaXR5X2NvbnRhaW5lcltkYXRhLXYtZWQzMjI4MjJde21hcmdpbi10b3A6MjBweDtwYWRkaW5nOjAgMTB2dztjb2xvcjojRjBGNEVGfS5yYXJpdHlfY29udGVudFtkYXRhLXYtZWQzMjI4MjJde2hlaWdodDozMHZofS5jb250YWluZXJbZGF0YS12LWVkMzIyODIyXXtwYWRkaW5nLXRvcDo1cHg7YmFja2dyb3VuZC1jb2xvcjojMTUxNDI2O2hlaWdodDo2MHZofS5jb250YWluZXIgaDFbZGF0YS12LWVkMzIyODIyXXt0ZXh0LWFsaWduOmNlbnRlcjtmb250LXNpemU6NDhwdH0ucmFyaXR5X2NvbnRlbnRbZGF0YS12LWVkMzIyODIyXXtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL1BhZ2VzL1Jhcml0eS52dWVcIixcIndlYnBhY2s6Ly8uL3NyYy9fdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBa0JBLG1DQUNFLGVBQWdCLENBQ2hCLGNBQWUsQ0FDZixhQ3BCa0IsQ0RxQm5CLGlDQUdHLFdBQVksQ0FDZiw0QkFHQyxlQUFnQixDQUNoQix3QkMzQmlCLENENEJqQixXQUFZLENBSGQsK0JBS0ksaUJBQWtCLENBQ2xCLGNBQWUsQ0FDaEIsaUNBR0QsWUFBYSxDQUNiLHNCQUF1QixDQUN2QixrQkFBbUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuXFxuQGltcG9ydCBcXFwiLi4vX3ZhcmlhYmxlc1xcXCI7XFxuXFxuI3Jhcml0eV9jb250YWluZXIge1xcbiAgbWFyZ2luLXRvcDogMjBweDtcXG4gIHBhZGRpbmc6IDAgMTB2dztcXG4gIGNvbG9yOiAkcmFyaXR5X3RleHQ7XFxufVxcblxcbi5yYXJpdHlfY29udGVudCB7XFxuICAgIGhlaWdodDogMzB2aDtcXG59XFxuXFxuLmNvbnRhaW5lciB7XFxuICBwYWRkaW5nLXRvcDogNXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogJHJhcml0eV9iYWNrZ3JvdW5kO1xcbiAgaGVpZ2h0OiA2MHZoO1xcbiAgaDEge1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogNDhwdDtcXG4gIH1cXG59XFxuLnJhcml0eV9jb250ZW50IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblwiLFwiJHByaW1hcnk6ICMwZTBkMWE7XFxuJG9uLXByaW1hcnk6ICNGMEY0RUY7XFxuJG9uLXByaW1hcnktaG92ZXI6ICNCRkNDOTQ7XFxuJHNlY29uZGFyeTogIzE1MTQyNjtcXG4kb24tc2Vjb25kYXJ5OiAjRjBGNEVGO1xcbiRvbi1zZWNvbmRhcnktaG92ZXI6ICNCRkNDOTQ7XFxuXFxuJGJhY2tncm91bmQ6ICRwcmltYXJ5O1xcblxcbiRiYW5uZXJfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJGJhbm5lcl90ZXh0OiAkb24tcHJpbWFyeTtcXG4kYmFubmVyX25hdl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kbmF2X3RleHQ6ICRvbi1wcmltYXJ5O1xcbiRuYXZfdGV4dF9ob3ZlcjogJG9uLXByaW1hcnktaG92ZXI7XFxuJG5ld3NfYm9yZGVyOiAkb24tcHJpbWFyeTtcXG5cXG4kbGFuZGluZ190ZXh0OiAkcHJpbWFyeTtcXG5cXG4kcm9hZG1hcF90ZXh0OiAkb24tcHJpbWFyeTtcXG4kcm9hZG1hcF9iYWNrZ3JvdW5kOiAkc2Vjb25kYXJ5O1xcblxcbiRyb2FkbWFwX2l0ZW06ICRwcmltYXJ5OyBcXG5cXG4kRkFRX2JhY2tncm91bmQ6ICRzZWNvbmRhcnk7XFxuJEZBUV9iYWNrZ3JvdW5kX2hvdmVyOiAjODA0MjYwO1xcbiRGQVFfcXVlc3Rpb25fYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJEZBUV9hbnN3ZXJfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJEZBUV90ZXh0OiAkb24tcHJpbWFyeTtcXG5cXG4kZm9vdGVyX2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRmb290ZXJfdGV4dDogJG9uLXByaW1hcnk7XFxuXFxuJHRlYW1fYmFja2dyb3VuZDogJHNlY29uZGFyeTtcXG4kdGVhbV90aXRsZTogJG9uLXByaW1hcnk7XFxuXFxuJG1lbWJlcl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kbWVtYmVyX3RleHQ6ICRvbi1wcmltYXJ5O1xcblxcbiRyYXJpdHlfYmFja2dyb3VuZDogJHNlY29uZGFyeTtcXG4kcmFyaXR5X3RleHQ6ICRvbi1wcmltYXJ5O1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIiNyb2FkbWFwX2NvbnRhaW5lcltkYXRhLXYtZjA2YTIxYjBde3BhZGRpbmc6MCAxMHZ3O2NvbG9yOiNGMEY0RUY7bWFyZ2luLXRvcDoyMHB4fS50ZXh0W2RhdGEtdi1mMDZhMjFiMF17YmFja2dyb3VuZC1jb2xvcjojMTUxNDI2O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59LnRpdGxlW2RhdGEtdi1mMDZhMjFiMF17dGV4dC1hbGlnbjpjZW50ZXI7Zm9udC1zaXplOjI0cHR9LnJvYWRtYXAtMVtkYXRhLXYtZjA2YTIxYjBde3dpZHRoOjUwJX0ucm9hZG1hcC0zW2RhdGEtdi1mMDZhMjFiMF17d2lkdGg6NTAlfS5yb2FkbWFwLWl0ZW1bZGF0YS12LWYwNmEyMWIwXXt0ZXh0LWFsaWduOmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiMwZTBkMWE7Ym9yZGVyLXJhZGl1czoxMHB4O21hcmdpbjoxMHB4fS5yb2FkbWFwLTJbZGF0YS12LWYwNmEyMWIwXXtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2FsaWduLWl0ZW1zOmVuZH0ucm9hZG1hcC0yIGRpdltkYXRhLXYtZjA2YTIxYjBde3dpZHRoOjUwJX1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMDBweCl7LnJvYWRtYXAtMiBkaXZbZGF0YS12LWYwNmEyMWIwXXt3aWR0aDoxMDAlfS5yb2FkbWFwLWl0ZW1bZGF0YS12LWYwNmEyMWIwXXt3aWR0aDoxMDAlfS50aXRsZVtkYXRhLXYtZjA2YTIxYjBde2ZvbnQtc2l6ZToxNnB0fX1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvUGFnZXMvUm9hZG1hcC52dWVcIixcIndlYnBhY2s6Ly8uL3NyYy9fdmFyaWFibGVzLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBeURBLG9DQUNFLGNBQWUsQ0FDZixhQzFEa0IsQ0QyRGxCLGVBQWdCLENBQ2pCLHVCQUdDLHdCQzdEaUIsQ0Q4RGpCLFlBQWEsQ0FDYixxQkFBc0IsQ0FDdkIsd0JBR0MsaUJBQWtCLENBQ2xCLGNBQWUsQ0FDaEIsNEJBR0MsU0FBVSxDQUNYLDRCQUdDLFNBQVUsQ0FDWCwrQkFHQyxpQkFBa0IsQ0FDbEIsd0JDcEZlLENEcUZmLGtCQUFtQixDQUNuQixXQUFZLENBQ2IsNEJBR0MsWUFBYSxDQUNiLHFCQUFzQixDQUN0QixlQUFnQixDQUhsQixnQ0FLSSxTQUFVLENBQ1gsMkNBSUQsZ0NBQ0UsVUFBVyxDQUNaLCtCQUdDLFVBQVcsQ0FDWix3QkFHQyxjQUFlLENBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIlxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcblxcbkBpbXBvcnQgXFxcIi4uL192YXJpYWJsZXNcXFwiO1xcblxcbiNyb2FkbWFwX2NvbnRhaW5lciB7XFxuICBwYWRkaW5nOiAwIDEwdnc7XFxuICBjb2xvcjogJHJvYWRtYXBfdGV4dDtcXG4gIG1hcmdpbi10b3A6IDIwcHg7XFxufVxcblxcbi50ZXh0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICRyb2FkbWFwX2JhY2tncm91bmQ7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuLnRpdGxlIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGZvbnQtc2l6ZTogMjRwdDtcXG59XFxuXFxuLnJvYWRtYXAtMSB7XFxuICB3aWR0aDogNTAlO1xcbn1cXG5cXG4ucm9hZG1hcC0zIHtcXG4gIHdpZHRoOiA1MCU7XFxufVxcblxcbi5yb2FkbWFwLWl0ZW0ge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogJHJvYWRtYXBfaXRlbTtcXG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxuICBtYXJnaW46IDEwcHg7XFxufVxcblxcbi5yb2FkbWFwLTIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogZW5kO1xcbiAgZGl2IHtcXG4gICAgd2lkdGg6IDUwJTtcXG4gIH1cXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDAwcHgpIHtcXG4gIC5yb2FkbWFwLTIgZGl2IHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICB9XFxuXFxuICAucm9hZG1hcC1pdGVtIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICB9XFxuXFxuICAudGl0bGUge1xcbiAgICBmb250LXNpemU6IDE2cHQ7XFxuICB9XFxufVxcblwiLFwiJHByaW1hcnk6ICMwZTBkMWE7XFxuJG9uLXByaW1hcnk6ICNGMEY0RUY7XFxuJG9uLXByaW1hcnktaG92ZXI6ICNCRkNDOTQ7XFxuJHNlY29uZGFyeTogIzE1MTQyNjtcXG4kb24tc2Vjb25kYXJ5OiAjRjBGNEVGO1xcbiRvbi1zZWNvbmRhcnktaG92ZXI6ICNCRkNDOTQ7XFxuXFxuJGJhY2tncm91bmQ6ICRwcmltYXJ5O1xcblxcbiRiYW5uZXJfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJGJhbm5lcl90ZXh0OiAkb24tcHJpbWFyeTtcXG4kYmFubmVyX25hdl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kbmF2X3RleHQ6ICRvbi1wcmltYXJ5O1xcbiRuYXZfdGV4dF9ob3ZlcjogJG9uLXByaW1hcnktaG92ZXI7XFxuJG5ld3NfYm9yZGVyOiAkb24tcHJpbWFyeTtcXG5cXG4kbGFuZGluZ190ZXh0OiAkcHJpbWFyeTtcXG5cXG4kcm9hZG1hcF90ZXh0OiAkb24tcHJpbWFyeTtcXG4kcm9hZG1hcF9iYWNrZ3JvdW5kOiAkc2Vjb25kYXJ5O1xcblxcbiRyb2FkbWFwX2l0ZW06ICRwcmltYXJ5OyBcXG5cXG4kRkFRX2JhY2tncm91bmQ6ICRzZWNvbmRhcnk7XFxuJEZBUV9iYWNrZ3JvdW5kX2hvdmVyOiAjODA0MjYwO1xcbiRGQVFfcXVlc3Rpb25fYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJEZBUV9hbnN3ZXJfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJEZBUV90ZXh0OiAkb24tcHJpbWFyeTtcXG5cXG4kZm9vdGVyX2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRmb290ZXJfdGV4dDogJG9uLXByaW1hcnk7XFxuXFxuJHRlYW1fYmFja2dyb3VuZDogJHNlY29uZGFyeTtcXG4kdGVhbV90aXRsZTogJG9uLXByaW1hcnk7XFxuXFxuJG1lbWJlcl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kbWVtYmVyX3RleHQ6ICRvbi1wcmltYXJ5O1xcblxcbiRyYXJpdHlfYmFja2dyb3VuZDogJHNlY29uZGFyeTtcXG4kcmFyaXR5X3RleHQ6ICRvbi1wcmltYXJ5O1wiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIiN0ZWFtX2NvbnRhaW5lcltkYXRhLXYtNGY0M2QyYmVde21hcmdpbi10b3A6MjBweDtwYWRkaW5nOjAgMTB2dztjb2xvcjojRjBGNEVGfS5tZW1iZXJzW2RhdGEtdi00ZjQzZDJiZV17ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1hcm91bmR9LmNvbnRhaW5lcltkYXRhLXYtNGY0M2QyYmVde3BhZGRpbmctdG9wOjVweDtiYWNrZ3JvdW5kLWNvbG9yOiMxNTE0MjZ9LmNvbnRhaW5lciBoMVtkYXRhLXYtNGY0M2QyYmVde3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtc2l6ZTo0OHB0fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAwMHB4KXsubWVtYmVyc1tkYXRhLXYtNGY0M2QyYmVde2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uY29udGFpbmVyIGgxW2RhdGEtdi00ZjQzZDJiZV17Zm9udC1zaXplOjMwcHR9fVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9QYWdlcy9UZWFtLnZ1ZVwiLFwid2VicGFjazovLy4vc3JjL192YXJpYWJsZXMuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFzREEsaUNBQ0UsZUFBZ0IsQ0FDaEIsY0FBZSxDQUNmLGFDeERrQixDRHlEbkIsMEJBR0MsWUFBYSxDQUNiLDRCQUE2QixDQUM5Qiw0QkFHQyxlQUFnQixDQUNoQix3QkNoRWlCLENEOERuQiwrQkFJRSxpQkFBa0IsQ0FDbEIsY0FBZSxDQUNoQiwyQ0FJQywwQkFDRSxxQkFBc0IsQ0FDdkIsK0JBSUcsY0FBZSxDQUNoQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJcXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG5AaW1wb3J0IFxcXCIuLi9fdmFyaWFibGVzXFxcIjtcXG5cXG4jdGVhbV9jb250YWluZXIge1xcbiAgbWFyZ2luLXRvcDogMjBweDtcXG4gIHBhZGRpbmc6IDAgMTB2dztcXG4gIGNvbG9yOiAkdGVhbV90aXRsZTtcXG59XFxuXFxuLm1lbWJlcnMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbn1cXG5cXG4uY29udGFpbmVyIHtcXG4gIHBhZGRpbmctdG9wOiA1cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAkdGVhbV9iYWNrZ3JvdW5kO1xcbiAgaDEge1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgZm9udC1zaXplOiA0OHB0O1xcbn1cXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDAwcHgpIHtcXG4gIC5tZW1iZXJzIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIH1cXG5cXG4gIC5jb250YWluZXIge1xcbiAgICBoMXtcXG4gICAgICBmb250LXNpemU6IDMwcHQ7XFxuICAgIH1cXG4gIH1cXG5cXG59XFxuXFxuXCIsXCIkcHJpbWFyeTogIzBlMGQxYTtcXG4kb24tcHJpbWFyeTogI0YwRjRFRjtcXG4kb24tcHJpbWFyeS1ob3ZlcjogI0JGQ0M5NDtcXG4kc2Vjb25kYXJ5OiAjMTUxNDI2O1xcbiRvbi1zZWNvbmRhcnk6ICNGMEY0RUY7XFxuJG9uLXNlY29uZGFyeS1ob3ZlcjogI0JGQ0M5NDtcXG5cXG4kYmFja2dyb3VuZDogJHByaW1hcnk7XFxuXFxuJGJhbm5lcl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kYmFubmVyX3RleHQ6ICRvbi1wcmltYXJ5O1xcbiRiYW5uZXJfbmF2X2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRuYXZfdGV4dDogJG9uLXByaW1hcnk7XFxuJG5hdl90ZXh0X2hvdmVyOiAkb24tcHJpbWFyeS1ob3ZlcjtcXG4kbmV3c19ib3JkZXI6ICRvbi1wcmltYXJ5O1xcblxcbiRsYW5kaW5nX3RleHQ6ICRwcmltYXJ5O1xcblxcbiRyb2FkbWFwX3RleHQ6ICRvbi1wcmltYXJ5O1xcbiRyb2FkbWFwX2JhY2tncm91bmQ6ICRzZWNvbmRhcnk7XFxuXFxuJHJvYWRtYXBfaXRlbTogJHByaW1hcnk7IFxcblxcbiRGQVFfYmFja2dyb3VuZDogJHNlY29uZGFyeTtcXG4kRkFRX2JhY2tncm91bmRfaG92ZXI6ICM4MDQyNjA7XFxuJEZBUV9xdWVzdGlvbl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kRkFRX2Fuc3dlcl9iYWNrZ3JvdW5kOiAkcHJpbWFyeTtcXG4kRkFRX3RleHQ6ICRvbi1wcmltYXJ5O1xcblxcbiRmb290ZXJfYmFja2dyb3VuZDogJHByaW1hcnk7XFxuJGZvb3Rlcl90ZXh0OiAkb24tcHJpbWFyeTtcXG5cXG4kdGVhbV9iYWNrZ3JvdW5kOiAkc2Vjb25kYXJ5O1xcbiR0ZWFtX3RpdGxlOiAkb24tcHJpbWFyeTtcXG5cXG4kbWVtYmVyX2JhY2tncm91bmQ6ICRwcmltYXJ5O1xcbiRtZW1iZXJfdGV4dDogJG9uLXByaW1hcnk7XFxuXFxuJHJhcml0eV9iYWNrZ3JvdW5kOiAkc2Vjb25kYXJ5O1xcbiRyYXJpdHlfdGV4dDogJG9uLXByaW1hcnk7XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBcIlwiO1xuICAgICAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBpdGVtWzVdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIGkobW9kdWxlcywgbWVkaWEsIGRlZHVwZSwgc3VwcG9ydHMsIGxheWVyKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCB1bmRlZmluZWRdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNbX2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgbW9kdWxlcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pMl0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzdXBwb3J0cykge1xuICAgICAgICBpZiAoIWl0ZW1bNF0pIHtcbiAgICAgICAgICBpdGVtWzRdID0gXCJcIi5jb25jYXQoc3VwcG9ydHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs0XSA9IHN1cHBvcnRzO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdXJsID0gU3RyaW5nKHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmwpOyAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cblxuICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICB1cmwgPSB1cmwuc2xpY2UoMSwgLTEpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH0gLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAvLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuXG5cbiAgaWYgKC9bXCInKCkgXFx0XFxuXXwoJTIwKS8udGVzdCh1cmwpIHx8IG9wdGlvbnMubmVlZFF1b3Rlcykge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQodXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKSwgXCJcXFwiXCIpO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNi4wXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgT3BlbkpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjEtMDMtMDJUMTc6MDhaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG5cdFx0Ly8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG5cdFx0Ly8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cblx0XHQvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG5cdFx0Ly8gU3VwcG9ydDogUXRXZWIgPD0zLjguNSwgV2ViS2l0IDw9NTM0LjM0LCB3a2h0bWx0b3BkZiB0b29sIDw9MC4xMi41XG5cdFx0Ly8gUGx1cyBmb3Igb2xkIFdlYktpdCwgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIGNvbGxlY3Rpb25zXG5cdFx0Ly8gKGUuZy4sIGB0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIikgPT09IFwiZnVuY3Rpb25cImApLiAoZ2gtNDc1Nilcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCIgJiZcblx0XHRcdHR5cGVvZiBvYmouaXRlbSAhPT0gXCJmdW5jdGlvblwiO1xuXHR9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy42LjBcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH07XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGV2ZW46IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAoIGkgKyAxICkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdG9kZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkuZ3JlcCggdGhpcywgZnVuY3Rpb24oIF9lbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGkgJSAyO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdGNvcHkgPSBvcHRpb25zWyBuYW1lIF07XG5cblx0XHRcdFx0Ly8gUHJldmVudCBPYmplY3QucHJvdG90eXBlIHBvbGx1dGlvblxuXHRcdFx0XHQvLyBQcmV2ZW50IG5ldmVyLWVuZGluZyBsb29wXG5cdFx0XHRcdGlmICggbmFtZSA9PT0gXCJfX3Byb3RvX19cIiB8fCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cdFx0XHRcdFx0c3JjID0gdGFyZ2V0WyBuYW1lIF07XG5cblx0XHRcdFx0XHQvLyBFbnN1cmUgcHJvcGVyIHR5cGUgZm9yIHRoZSBzb3VyY2UgdmFsdWVcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICYmICFBcnJheS5pc0FycmF5KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0fSBlbHNlIGlmICggIWNvcHlJc0FycmF5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHt9O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblxuXHRcdFx0XHRcdC8vIE5ldmVyIG1vdmUgb3JpZ2luYWwgb2JqZWN0cywgY2xvbmUgdGhlbVxuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0galF1ZXJ5LmV4dGVuZCggZGVlcCwgY2xvbmUsIGNvcHkgKTtcblxuXHRcdFx0XHQvLyBEb24ndCBicmluZyBpbiB1bmRlZmluZWQgdmFsdWVzXG5cdFx0XHRcdH0gZWxzZSBpZiAoIGNvcHkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGNvcHk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIG1vZGlmaWVkIG9iamVjdFxuXHRyZXR1cm4gdGFyZ2V0O1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIFVuaXF1ZSBmb3IgZWFjaCBjb3B5IG9mIGpRdWVyeSBvbiB0aGUgcGFnZVxuXHRleHBhbmRvOiBcImpRdWVyeVwiICsgKCB2ZXJzaW9uICsgTWF0aC5yYW5kb20oKSApLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApLFxuXG5cdC8vIEFzc3VtZSBqUXVlcnkgaXMgcmVhZHkgd2l0aG91dCB0aGUgcmVhZHkgbW9kdWxlXG5cdGlzUmVhZHk6IHRydWUsXG5cblx0ZXJyb3I6IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCBtc2cgKTtcblx0fSxcblxuXHRub29wOiBmdW5jdGlvbigpIHt9LFxuXG5cdGlzUGxhaW5PYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIHByb3RvLCBDdG9yO1xuXG5cdFx0Ly8gRGV0ZWN0IG9idmlvdXMgbmVnYXRpdmVzXG5cdFx0Ly8gVXNlIHRvU3RyaW5nIGluc3RlYWQgb2YgalF1ZXJ5LnR5cGUgdG8gY2F0Y2ggaG9zdCBvYmplY3RzXG5cdFx0aWYgKCAhb2JqIHx8IHRvU3RyaW5nLmNhbGwoIG9iaiApICE9PSBcIltvYmplY3QgT2JqZWN0XVwiICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHByb3RvID0gZ2V0UHJvdG8oIG9iaiApO1xuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIG5vIHByb3RvdHlwZSAoZS5nLiwgYE9iamVjdC5jcmVhdGUoIG51bGwgKWApIGFyZSBwbGFpblxuXHRcdGlmICggIXByb3RvICkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0Ly8gT2JqZWN0cyB3aXRoIHByb3RvdHlwZSBhcmUgcGxhaW4gaWZmIHRoZXkgd2VyZSBjb25zdHJ1Y3RlZCBieSBhIGdsb2JhbCBPYmplY3QgZnVuY3Rpb25cblx0XHRDdG9yID0gaGFzT3duLmNhbGwoIHByb3RvLCBcImNvbnN0cnVjdG9yXCIgKSAmJiBwcm90by5jb25zdHJ1Y3Rvcjtcblx0XHRyZXR1cm4gdHlwZW9mIEN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBmblRvU3RyaW5nLmNhbGwoIEN0b3IgKSA9PT0gT2JqZWN0RnVuY3Rpb25TdHJpbmc7XG5cdH0sXG5cblx0aXNFbXB0eU9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBwcm92aWRlZCBjb250ZXh0OyBmYWxscyBiYWNrIHRvIHRoZSBnbG9iYWwgb25lXG5cdC8vIGlmIG5vdCBzcGVjaWZpZWQuXG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zLCBkb2MgKSB7XG5cdFx0RE9NRXZhbCggY29kZSwgeyBub25jZTogb3B0aW9ucyAmJiBvcHRpb25zLm5vbmNlIH0sIGRvYyApO1xuXHR9LFxuXG5cdGVhY2g6IGZ1bmN0aW9uKCBvYmosIGNhbGxiYWNrICkge1xuXHRcdHZhciBsZW5ndGgsIGkgPSAwO1xuXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggb2JqICkgKSB7XG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gb2JqICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBvYmo7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFsgYXJyIF0gOiBhcnJcblx0XHRcdFx0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guY2FsbCggcmV0LCBhcnIgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdGluQXJyYXk6IGZ1bmN0aW9uKCBlbGVtLCBhcnIsIGkgKSB7XG5cdFx0cmV0dXJuIGFyciA9PSBudWxsID8gLTEgOiBpbmRleE9mLmNhbGwoIGFyciwgZWxlbSwgaSApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaiBdO1xuXHRcdH1cblxuXHRcdGZpcnN0Lmxlbmd0aCA9IGk7XG5cblx0XHRyZXR1cm4gZmlyc3Q7XG5cdH0sXG5cblx0Z3JlcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgaW52ZXJ0ICkge1xuXHRcdHZhciBjYWxsYmFja0ludmVyc2UsXG5cdFx0XHRtYXRjaGVzID0gW10sXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aCxcblx0XHRcdGNhbGxiYWNrRXhwZWN0ID0gIWludmVydDtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCBvbmx5IHNhdmluZyB0aGUgaXRlbXNcblx0XHQvLyB0aGF0IHBhc3MgdGhlIHZhbGlkYXRvciBmdW5jdGlvblxuXHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0Y2FsbGJhY2tJbnZlcnNlID0gIWNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpICk7XG5cdFx0XHRpZiAoIGNhbGxiYWNrSW52ZXJzZSAhPT0gY2FsbGJhY2tFeHBlY3QgKSB7XG5cdFx0XHRcdG1hdGNoZXMucHVzaCggZWxlbXNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBtYXRjaGVzO1xuXHR9LFxuXG5cdC8vIGFyZyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGFyZyApIHtcblx0XHR2YXIgbGVuZ3RoLCB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheUxpa2UoIGVsZW1zICkgKSB7XG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBHbyB0aHJvdWdoIGV2ZXJ5IGtleSBvbiB0aGUgb2JqZWN0LFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIGVsZW1zICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdFx0cmV0dXJuIGZsYXQoIHJldCApO1xuXHR9LFxuXG5cdC8vIEEgZ2xvYmFsIEdVSUQgY291bnRlciBmb3Igb2JqZWN0c1xuXHRndWlkOiAxLFxuXG5cdC8vIGpRdWVyeS5zdXBwb3J0IGlzIG5vdCB1c2VkIGluIENvcmUgYnV0IG90aGVyIHByb2plY3RzIGF0dGFjaCB0aGVpclxuXHQvLyBwcm9wZXJ0aWVzIHRvIGl0IHNvIGl0IG5lZWRzIHRvIGV4aXN0LlxuXHRzdXBwb3J0OiBzdXBwb3J0XG59ICk7XG5cbmlmICggdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICkge1xuXHRqUXVlcnkuZm5bIFN5bWJvbC5pdGVyYXRvciBdID0gYXJyWyBTeW1ib2wuaXRlcmF0b3IgXTtcbn1cblxuLy8gUG9wdWxhdGUgdGhlIGNsYXNzMnR5cGUgbWFwXG5qUXVlcnkuZWFjaCggXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdFx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdH0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IHRvVHlwZSggb2JqICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBvYmogKSB8fCBpc1dpbmRvdyggb2JqICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHR5cGUgPT09IFwiYXJyYXlcIiB8fCBsZW5ndGggPT09IDAgfHxcblx0XHR0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiICYmIGxlbmd0aCA+IDAgJiYgKCBsZW5ndGggLSAxICkgaW4gb2JqO1xufVxudmFyIFNpenpsZSA9XG4vKiFcbiAqIFNpenpsZSBDU1MgU2VsZWN0b3IgRW5naW5lIHYyLjMuNlxuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pzLmZvdW5kYXRpb24vXG4gKlxuICogRGF0ZTogMjAyMS0wMi0xNlxuICovXG4oIGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRub25uYXRpdmVTZWxlY3RvckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0c29ydE9yZGVyID0gZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHR9XG5cdFx0cmV0dXJuIDA7XG5cdH0sXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoIHt9ICkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoTmF0aXZlID0gYXJyLnB1c2gsXG5cdHB1c2ggPSBhcnIucHVzaCxcblx0c2xpY2UgPSBhcnIuc2xpY2UsXG5cblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGFzIGl0J3MgZmFzdGVyIHRoYW4gbmF0aXZlXG5cdC8vIGh0dHBzOi8vanNwZXJmLmNvbS90aG9yLWluZGV4b2YtdnMtZm9yLzVcblx0aW5kZXhPZiA9IGZ1bmN0aW9uKCBsaXN0LCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCBsaXN0WyBpIF0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxcIiArXG5cdFx0XCJpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zeW50YXgtMy8jaWRlbnQtdG9rZW4tZGlhZ3JhbVxuXHRpZGVudGlmaWVyID0gXCIoPzpcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCI/fFxcXFxcXFxcW15cXFxcclxcXFxuXFxcXGZdfFtcXFxcdy1dfFteXFwwLVxcXFx4N2ZdKStcIixcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIE9wZXJhdG9yIChjYXB0dXJlIDIpXG5cdFx0XCIqKFsqXiR8IX5dPz0pXCIgKyB3aGl0ZXNwYWNlICtcblxuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XVxuXHRcdC8vIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgaWRlbnRpZmllciArIFwiKSg/OlxcXFwoKFwiICtcblxuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cblx0XHQvLyAzLiBhbnl0aGluZyBlbHNlIChjYXB0dXJlIDIpXG5cdFx0XCIuKlwiICtcblx0XHRcIilcXFxcKXwpXCIsXG5cblx0Ly8gTGVhZGluZyBhbmQgbm9uLWVzY2FwZWQgdHJhaWxpbmcgd2hpdGVzcGFjZSwgY2FwdHVyaW5nIHNvbWUgbm9uLXdoaXRlc3BhY2UgY2hhcmFjdGVycyBwcmVjZWRpbmcgdGhlIGxhdHRlclxuXHRyd2hpdGVzcGFjZSA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcIitcIiwgXCJnXCIgKSxcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fFxcXFxcXFxcKFteXFxcXHJcXFxcblxcXFxmXSlcIiwgXCJnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIGVzY2FwZSwgbm9uSGV4ICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlLnNsaWNlKCAxICkgLSAweDEwMDAwO1xuXG5cdFx0cmV0dXJuIG5vbkhleCA/XG5cblx0XHRcdC8vIFN0cmlwIHRoZSBiYWNrc2xhc2ggcHJlZml4IGZyb20gYSBub24taGV4IGVzY2FwZSBzZXF1ZW5jZVxuXHRcdFx0bm9uSGV4IDpcblxuXHRcdFx0Ly8gUmVwbGFjZSBhIGhleGFkZWNpbWFsIGVzY2FwZSBzZXF1ZW5jZSB3aXRoIHRoZSBlbmNvZGVkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMStcblx0XHRcdC8vIEZvciB2YWx1ZXMgb3V0c2lkZSB0aGUgQmFzaWMgTXVsdGlsaW5ndWFsIFBsYW5lIChCTVApLCBtYW51YWxseSBjb25zdHJ1Y3QgYVxuXHRcdFx0Ly8gc3Vycm9nYXRlIHBhaXJcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgK1xuXHRcdFx0XHRjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KCBhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApICksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hOYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbCggZWxzICkgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICggdGFyZ2V0WyBqKysgXSA9IGVsc1sgaSsrIF0gKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblxuXHRcdGlmICggZG9jdW1lbnRJc0hUTUwgKSB7XG5cblx0XHRcdC8vIElmIHRoZSBzZWxlY3RvciBpcyBzdWZmaWNpZW50bHkgc2ltcGxlLCB0cnkgdXNpbmcgYSBcImdldCpCeSpcIiBET00gbWV0aG9kXG5cdFx0XHQvLyAoZXhjZXB0aW5nIERvY3VtZW50RnJhZ21lbnQgY29udGV4dCwgd2hlcmUgdGhlIG1ldGhvZHMgZG9uJ3QgZXhpc3QpXG5cdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxMSAmJiAoIG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0Ly8gSUQgc2VsZWN0b3Jcblx0XHRcdFx0aWYgKCAoIG0gPSBtYXRjaFsgMSBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb2N1bWVudCBjb250ZXh0XG5cdFx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRWxlbWVudCBjb250ZXh0XG5cdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUsIE9wZXJhLCBXZWJraXRcblx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgJiYgKCBlbGVtID0gbmV3Q29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApICkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsgMiBdICkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0XHQvLyBDbGFzcyBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIG0gPSBtYXRjaFsgMyBdICkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCAhcmJ1Z2d5UVNBIHx8ICFyYnVnZ3lRU0EudGVzdCggc2VsZWN0b3IgKSApICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgOCBvbmx5XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgb2JqZWN0IGVsZW1lbnRzXG5cdFx0XHRcdCggbm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiICkgKSB7XG5cblx0XHRcdFx0bmV3U2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0bmV3Q29udGV4dCA9IGNvbnRleHQ7XG5cblx0XHRcdFx0Ly8gcVNBIGNvbnNpZGVycyBlbGVtZW50cyBvdXRzaWRlIGEgc2NvcGluZyByb290IHdoZW4gZXZhbHVhdGluZyBjaGlsZCBvclxuXHRcdFx0XHQvLyBkZXNjZW5kYW50IGNvbWJpbmF0b3JzLCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50LlxuXHRcdFx0XHQvLyBJbiBzdWNoIGNhc2VzLCB3ZSB3b3JrIGFyb3VuZCB0aGUgYmVoYXZpb3IgYnkgcHJlZml4aW5nIGV2ZXJ5IHNlbGVjdG9yIGluIHRoZVxuXHRcdFx0XHQvLyBsaXN0IHdpdGggYW4gSUQgc2VsZWN0b3IgcmVmZXJlbmNpbmcgdGhlIHNjb3BlIGNvbnRleHQuXG5cdFx0XHRcdC8vIFRoZSB0ZWNobmlxdWUgaGFzIHRvIGJlIHVzZWQgYXMgd2VsbCB3aGVuIGEgbGVhZGluZyBjb21iaW5hdG9yIGlzIHVzZWRcblx0XHRcdFx0Ly8gYXMgc3VjaCBzZWxlY3RvcnMgYXJlIG5vdCByZWNvZ25pemVkIGJ5IHF1ZXJ5U2VsZWN0b3JBbGwuXG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHRlY2huaXF1ZS5cblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdCggcmRlc2NlbmQudGVzdCggc2VsZWN0b3IgKSB8fCByY29tYmluYXRvcnMudGVzdCggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRXhwYW5kIGNvbnRleHQgZm9yIHNpYmxpbmcgc2VsZWN0b3JzXG5cdFx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gV2UgY2FuIHVzZSA6c2NvcGUgaW5zdGVhZCBvZiB0aGUgSUQgaGFjayBpZiB0aGUgYnJvd3NlclxuXHRcdFx0XHRcdC8vIHN1cHBvcnRzIGl0ICYgaWYgd2UncmUgbm90IGNoYW5naW5nIHRoZSBjb250ZXh0LlxuXHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAhPT0gY29udGV4dCB8fCAhc3VwcG9ydC5zY29wZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FwdHVyZSB0aGUgY29udGV4dCBJRCwgc2V0dGluZyBpdCBmaXJzdCBpZiBuZWNlc3Nhcnlcblx0XHRcdFx0XHRcdGlmICggKCBuaWQgPSBjb250ZXh0LmdldEF0dHJpYnV0ZSggXCJpZFwiICkgKSApIHtcblx0XHRcdFx0XHRcdFx0bmlkID0gbmlkLnJlcGxhY2UoIHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUgKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQuc2V0QXR0cmlidXRlKCBcImlkXCIsICggbmlkID0gZXhwYW5kbyApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJlZml4IGV2ZXJ5IHNlbGVjdG9yIGluIHRoZSBsaXN0XG5cdFx0XHRcdFx0Z3JvdXBzID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0aSA9IGdyb3Vwcy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRncm91cHNbIGkgXSA9ICggbmlkID8gXCIjXCIgKyBuaWQgOiBcIjpzY29wZVwiICkgKyBcIiBcIiArXG5cdFx0XHRcdFx0XHRcdHRvU2VsZWN0b3IoIGdyb3Vwc1sgaSBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oIFwiLFwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoICggcXNhRXJyb3IgKSB7XG5cdFx0XHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fSBmaW5hbGx5IHtcblx0XHRcdFx0XHRpZiAoIG5pZCA9PT0gZXhwYW5kbyApIHtcblx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXG5cdFx0XHQvLyBPbmx5IGtlZXAgdGhlIG1vc3QgcmVjZW50IGVudHJpZXNcblx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5cy5zaGlmdCgpIF07XG5cdFx0fVxuXHRcdHJldHVybiAoIGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUgKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICk7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoIFwifFwiICksXG5cdFx0aSA9IGFyci5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0RXhwci5hdHRySGFuZGxlWyBhcnJbIGkgXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5uZXh0U2libGluZyApICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuICggbmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIgKSAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciA6ZW5hYmxlZC86ZGlzYWJsZWRcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gZGlzYWJsZWQgdHJ1ZSBmb3IgOmRpc2FibGVkOyBmYWxzZSBmb3IgOmVuYWJsZWRcbiAqL1xuZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIGRpc2FibGVkICkge1xuXG5cdC8vIEtub3duIDpkaXNhYmxlZCBmYWxzZSBwb3NpdGl2ZXM6IGZpZWxkc2V0W2Rpc2FibGVkXSA+IGxlZ2VuZDpudGgtb2YtdHlwZShuKzIpIDpjYW4tZGlzYWJsZVxuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBPbmx5IGNlcnRhaW4gZWxlbWVudHMgY2FuIG1hdGNoIDplbmFibGVkIG9yIDpkaXNhYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWVuYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1kaXNhYmxlZFxuXHRcdGlmICggXCJmb3JtXCIgaW4gZWxlbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgZm9yIGluaGVyaXRlZCBkaXNhYmxlZG5lc3Mgb24gcmVsZXZhbnQgbm9uLWRpc2FibGVkIGVsZW1lbnRzOlxuXHRcdFx0Ly8gKiBsaXN0ZWQgZm9ybS1hc3NvY2lhdGVkIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgZmllbGRzZXRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjYXRlZ29yeS1saXN0ZWRcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LWZlLWRpc2FibGVkXG5cdFx0XHQvLyAqIG9wdGlvbiBlbGVtZW50cyBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1vcHRpb24tZGlzYWJsZWRcblx0XHRcdC8vIEFsbCBzdWNoIGVsZW1lbnRzIGhhdmUgYSBcImZvcm1cIiBwcm9wZXJ0eS5cblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICYmIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdC8vIE9wdGlvbiBlbGVtZW50cyBkZWZlciB0byBhIHBhcmVudCBvcHRncm91cCBpZiBwcmVzZW50XG5cdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gMTFcblx0XHRcdFx0Ly8gVXNlIHRoZSBpc0Rpc2FibGVkIHNob3J0Y3V0IHByb3BlcnR5IHRvIGNoZWNrIGZvciBkaXNhYmxlZCBmaWVsZHNldCBhbmNlc3RvcnNcblx0XHRcdFx0cmV0dXJuIGVsZW0uaXNEaXNhYmxlZCA9PT0gZGlzYWJsZWQgfHxcblxuXHRcdFx0XHRcdC8vIFdoZXJlIHRoZXJlIGlzIG5vIGlzRGlzYWJsZWQsIGNoZWNrIG1hbnVhbGx5XG5cdFx0XHRcdFx0LyoganNoaW50IC1XMDE4ICovXG5cdFx0XHRcdFx0ZWxlbS5pc0Rpc2FibGVkICE9PSAhZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGFyZ3VtZW50ICkge1xuXHRcdGFyZ3VtZW50ID0gK2FyZ3VtZW50O1xuXHRcdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbICggaiA9IG1hdGNoSW5kZXhlc1sgaSBdICkgXSApIHtcblx0XHRcdFx0XHRzZWVkWyBqIF0gPSAhKCBtYXRjaGVzWyBqIF0gPSBzZWVkWyBqIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSApO1xufVxuXG4vKipcbiAqIENoZWNrcyBhIG5vZGUgZm9yIHZhbGlkaXR5IGFzIGEgU2l6emxlIGNvbnRleHRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3Q9fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RWxlbWVudHxPYmplY3R8Qm9vbGVhbn0gVGhlIGlucHV0IG5vZGUgaWYgYWNjZXB0YWJsZSwgb3RoZXJ3aXNlIGEgZmFsc3kgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdGVzdENvbnRleHQoIGNvbnRleHQgKSB7XG5cdHJldHVybiBjb250ZXh0ICYmIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnRleHQ7XG59XG5cbi8vIEV4cG9zZSBzdXBwb3J0IHZhcnMgZm9yIGNvbnZlbmllbmNlXG5zdXBwb3J0ID0gU2l6emxlLnN1cHBvcnQgPSB7fTtcblxuLyoqXG4gKiBEZXRlY3RzIFhNTCBub2Rlc1xuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gZWxlbSBBbiBlbGVtZW50IG9yIGEgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmZiBlbGVtIGlzIGEgbm9uLUhUTUwgWE1MIG5vZGVcbiAqL1xuaXNYTUwgPSBTaXp6bGUuaXNYTUwgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5hbWVzcGFjZSA9IGVsZW0gJiYgZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9IGVsZW0gJiYgKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApLmRvY3VtZW50RWxlbWVudDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PThcblx0Ly8gQXNzdW1lIEhUTUwgd2hlbiBkb2N1bWVudEVsZW1lbnQgZG9lc24ndCB5ZXQgZXhpc3QsIHN1Y2ggYXMgaW5zaWRlIGxvYWRpbmcgaWZyYW1lc1xuXHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvNDgzM1xuXHRyZXR1cm4gIXJodG1sLnRlc3QoIG5hbWVzcGFjZSB8fCBkb2NFbGVtICYmIGRvY0VsZW0ubm9kZU5hbWUgfHwgXCJIVE1MXCIgKTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgc3ViV2luZG93LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBSZXR1cm4gZWFybHkgaWYgZG9jIGlzIGludmFsaWQgb3IgYWxyZWFkeSBzZWxlY3RlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIGRvYyA9PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCtcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPSBkb2N1bWVudCAmJlxuXHRcdCggc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcgKSAmJiBzdWJXaW5kb3cudG9wICE9PSBzdWJXaW5kb3cgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMSwgRWRnZVxuXHRcdGlmICggc3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMCBvbmx5XG5cdFx0fSBlbHNlIGlmICggc3ViV2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0c3ViV2luZG93LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIHVubG9hZEhhbmRsZXIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gMTErLCBFZGdlIDEyIC0gMTgrLCBDaHJvbWUgPD0xNiAtIDI1IG9ubHksIEZpcmVmb3ggPD0zLjYgLSAzMSBvbmx5LFxuXHQvLyBTYWZhcmkgNCAtIDUgb25seSwgT3BlcmEgPD0xMS42IC0gMTIueCBvbmx5XG5cdC8vIElFL0VkZ2UgJiBvbGRlciBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSA6c2NvcGUgcHNldWRvLWNsYXNzLlxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgNi4wIG9ubHlcblx0Ly8gU2FmYXJpIDYuMCBzdXBwb3J0cyA6c2NvcGUgYnV0IGl0J3MgYW4gYWxpYXMgb2YgOnJvb3QgdGhlcmUuXG5cdHN1cHBvcnQuc2NvcGUgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblx0XHRyZXR1cm4gdHlwZW9mIGVsLnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgJiZcblx0XHRcdCFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpzY29wZSBmaWVsZHNldCBkaXZcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRlbC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWVsLmdldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiApO1xuXHR9ICk7XG5cblx0LyogZ2V0RWxlbWVudChzKUJ5KlxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpIHJldHVybnMgb25seSBlbGVtZW50c1xuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoIFwiXCIgKSApO1xuXHRcdHJldHVybiAhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiKlwiICkubGVuZ3RoO1xuXHR9ICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHRzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbW1hdGljYWxseS1zZXQgbmFtZXMsXG5cdC8vIHNvIHVzZSBhIHJvdW5kYWJvdXQgZ2V0RWxlbWVudHNCeU5hbWUgdGVzdFxuXHRzdXBwb3J0LmdldEJ5SWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSggZXhwYW5kbyApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcImlkXCIgKSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcdEV4cHIuZmluZFsgXCJJRFwiIF0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyWyBcIklEXCIgXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBcImlkXCIgKTtcblx0XHRcdFx0cmV0dXJuIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gYXR0cklkO1xuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDcgb25seVxuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFsgZWxlbSBdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEZhbGwgYmFjayBvbiBnZXRFbGVtZW50c0J5TmFtZVxuXHRcdFx0XHRcdGVsZW1zID0gY29udGV4dC5nZXRFbGVtZW50c0J5TmFtZSggaWQgKTtcblx0XHRcdFx0XHRpID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1zWyBpKysgXSApICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUgJiYgbm9kZS52YWx1ZSA9PT0gaWQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbIFwiVEFHXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgP1xuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgZG9uJ3QgaGF2ZSBnRUJUTlxuXHRcdFx0fSBlbHNlIGlmICggc3VwcG9ydC5xc2EgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyApO1xuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdHRtcC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRtcDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdH07XG5cblx0Ly8gQ2xhc3Ncblx0RXhwci5maW5kWyBcIkNMQVNTXCIgXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoIHN1cHBvcnQucXNhID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsICkgKSApIHtcblxuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0dmFyIGlucHV0O1xuXG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbKl4kXT1cIiArIHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEJvb2xlYW4gYXR0cmlidXRlcyBhbmQgXCJ2YWx1ZVwiIGFyZSBub3QgdHJlYXRlZCBjb3JyZWN0bHlcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW3NlbGVjdGVkXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWU8MjksIEFuZHJvaWQ8NC40LCBTYWZhcmk8Ny4wKywgaU9TPDcuMCssIFBoYW50b21KUzwxLjkuOCtcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIn49XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0XHQvLyBJRSAxMS9FZGdlIGRvbid0IGZpbmQgZWxlbWVudHMgb24gYSBgW25hbWU9JyddYCBxdWVyeSBpbiBzb21lIGNhc2VzLlxuXHRcdFx0Ly8gQWRkaW5nIGEgdGVtcG9yYXJ5IGF0dHJpYnV0ZSB0byB0aGUgZG9jdW1lbnQgYmVmb3JlIHRoZSBzZWxlY3Rpb24gd29ya3Ncblx0XHRcdC8vIGFyb3VuZCB0aGUgaXNzdWUuXG5cdFx0XHQvLyBJbnRlcmVzdGluZ2x5LCBJRSAxMCAmIG9sZGVyIGRvbid0IHNlZW0gdG8gaGF2ZSB0aGUgaXNzdWUuXG5cdFx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJcIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltuYW1lPScnXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIio9XCIgK1xuXHRcdFx0XHRcdHdoaXRlc3BhY2UgKyBcIiooPzonJ3xcXFwiXFxcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjpjaGVja2VkXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjpjaGVja2VkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIi4jLitbK35dXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTMuNiAtIDUgb25seVxuXHRcdFx0Ly8gT2xkIEZpcmVmb3ggZG9lc24ndCB0aHJvdyBvbiBhIGJhZGx5LWVzY2FwZWQgaWRlbnRpZmllci5cblx0XHRcdGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiXFxcXFxcZlwiICk7XG5cdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJbXFxcXHJcXFxcblxcXFxmXVwiICk7XG5cdFx0fSApO1xuXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+XCIgK1xuXHRcdFx0XHRcIjxzZWxlY3QgZGlzYWJsZWQ9J2Rpc2FibGVkJz48b3B0aW9uLz48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRcdFx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJoaWRkZW5cIiApO1xuXHRcdFx0ZWwuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT1kXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIjplbmFibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU5LTExK1xuXHRcdFx0Ly8gSUUncyA6ZGlzYWJsZWQgc2VsZWN0b3IgZG9lcyBub3QgcGljayB1cCB0aGUgY2hpbGRyZW4gb2YgZGlzYWJsZWQgZmllbGRzZXRzXG5cdFx0XHRkb2NFbGVtLmFwcGVuZENoaWxkKCBlbCApLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZGlzYWJsZWRcIiApLmxlbmd0aCAhPT0gMiApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBPcGVyYSAxMCAtIDExIG9ubHlcblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIiosOnhcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiLC4qOlwiICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAoIG1hdGNoZXMgPSBkb2NFbGVtLm1hdGNoZXMgfHxcblx0XHRkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5vTWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvciApICkgKSApIHtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKCBcInxcIiApICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oIFwifFwiICkgKTtcblxuXHQvKiBDb250YWluc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cdGhhc0NvbXBhcmUgPSBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29tcGFyZURvY3VtZW50UG9zaXRpb24gKTtcblxuXHQvLyBFbGVtZW50IGNvbnRhaW5zIGFub3RoZXJcblx0Ly8gUHVycG9zZWZ1bGx5IHNlbGYtZXhjbHVzaXZlXG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkgKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoIGIgPSBiLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRjb21wYXJlID0gKCBhLm93bmVyRG9jdW1lbnQgfHwgYSApID09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoICFzdXBwb3J0LnNvcnREZXRhY2hlZCAmJiBiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBhICkgPT09IGNvbXBhcmUgKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBhID09IGRvY3VtZW50IHx8IGEub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYSApICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRpZiAoIGIgPT0gZG9jdW1lbnQgfHwgYi5vd25lckRvY3VtZW50ID09IHByZWZlcnJlZERvYyAmJlxuXHRcdFx0XHRjb250YWlucyggcHJlZmVycmVkRG9jLCBiICkgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRyZXR1cm4gYSA9PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PSBkb2N1bWVudCA/IDEgOlxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0XHRhdXAgPyAtMSA6XG5cdFx0XHRcdGJ1cCA/IDEgOlxuXHRcdFx0XHRzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGFwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblx0XHRjdXIgPSBiO1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIucGFyZW50Tm9kZSApICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwWyBpIF0gPT09IGJwWyBpIF0gKSB7XG5cdFx0XHRpKys7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGkgP1xuXG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbIGkgXSwgYnBbIGkgXSApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIG5vZGVzIGluIG91ciBkb2N1bWVudCBzb3J0IGZpcnN0XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgZXFlcWVxICovXG5cdFx0XHRhcFsgaSBdID09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwWyBpIF0gPT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIGVxZXFlcSAqL1xuXHRcdFx0MDtcblx0fTtcblxuXHRyZXR1cm4gZG9jdW1lbnQ7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblxuXHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHQvLyBmcmFnbWVudCBpbiBJRSA5XG5cdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBleHByLCB0cnVlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KCB2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSApICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoIHNlbCArIFwiXCIgKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSByZXN1bHRzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoICggbm9kZSA9IGVsZW1bIGkrKyBdICkgKSB7XG5cblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFsgMyBdID0gKCBtYXRjaFsgMyBdIHx8IG1hdGNoWyA0IF0gfHxcblx0XHRcdFx0bWF0Y2hbIDUgXSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMiBdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWyAzIF0gPSBcIiBcIiArIG1hdGNoWyAzIF0gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbIDEgXSA9IG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsgMSBdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWyAwIF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWyA0IF0gPSArKCBtYXRjaFsgNCBdID9cblx0XHRcdFx0XHRtYXRjaFsgNSBdICsgKCBtYXRjaFsgNiBdIHx8IDEgKSA6XG5cdFx0XHRcdFx0MiAqICggbWF0Y2hbIDMgXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWyA1IF0gPSArKCAoIG1hdGNoWyA3IF0gKyBtYXRjaFsgOCBdICkgfHwgbWF0Y2hbIDMgXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbIDYgXSAmJiBtYXRjaFsgMiBdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwclsgXCJDSElMRFwiIF0udGVzdCggbWF0Y2hbIDAgXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbIDMgXSApIHtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IG1hdGNoWyA0IF0gfHwgbWF0Y2hbIDUgXSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KCBleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSApICYmXG5cblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdCggZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoICkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbIDAgXSA9IG1hdGNoWyAwIF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsgMiBdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KCBwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XHRcdFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApICkgJiYgY2xhc3NDYWNoZShcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoXG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8XG5cdFx0XHRcdFx0XHRcdFx0dHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHxcblx0XHRcdFx0XHRcdFx0XHRcIlwiXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIj1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiE9XCIgPyByZXN1bHQgIT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJePVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPT09IDAgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIio9XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIkPVwiID8gY2hlY2sgJiYgcmVzdWx0LnNsaWNlKCAtY2hlY2subGVuZ3RoICkgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ+PVwiID8gKCBcIiBcIiArIHJlc3VsdC5yZXBsYWNlKCByd2hpdGVzcGFjZSwgXCIgXCIgKSArIFwiIFwiICkuaW5kZXhPZiggY2hlY2sgKSA+IC0xIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCJ8PVwiID8gcmVzdWx0ID09PSBjaGVjayB8fCByZXN1bHQuc2xpY2UoIDAsIGNoZWNrLmxlbmd0aCArIDEgKSA9PT0gY2hlY2sgKyBcIi1cIiA6XG5cdFx0XHRcdFx0ZmFsc2U7XG5cdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCB0eXBlLCB3aGF0LCBfYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gbm9kZVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gUmV2ZXJzZSBkaXJlY3Rpb24gZm9yIDpvbmx5LSogKGlmIHdlIGhhdmVuJ3QgeWV0IGRvbmUgc28pXG5cdFx0XHRcdFx0XHRcdFx0c3RhcnQgPSBkaXIgPSB0eXBlID09PSBcIm9ubHlcIiAmJiAhc3RhcnQgJiYgXCJuZXh0U2libGluZ1wiO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRzdGFydCA9IFsgZm9yd2FyZCA/IHBhcmVudC5maXJzdENoaWxkIDogcGFyZW50Lmxhc3RDaGlsZCBdO1xuXG5cdFx0XHRcdFx0XHQvLyBub24teG1sIDpudGgtY2hpbGQoLi4uKSBzdG9yZXMgY2FjaGUgZGF0YSBvbiBgcGFyZW50YFxuXHRcdFx0XHRcdFx0aWYgKCBmb3J3YXJkICYmIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0bm9kZSA9IHBhcmVudDtcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdCggZGlmZiA9IG5vZGVJbmRleCA9IDAgKSB8fCBzdGFydC5wb3AoKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb29wIGFzIGFib3ZlIHRvIHNlZWsgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkWyBpIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblxuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGkgXSA9ICEoIG1hdGNoZXNbIGkgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblxuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbIDAgXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0gKSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QoIGxhbmcgfHwgXCJcIiApICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggXCJ4bWw6bGFuZ1wiICkgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoIFwibGFuZ1wiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoICggZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJlxuXHRcdFx0XHQoICFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpICkgJiZcblx0XHRcdFx0ISEoIGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXggKTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCApIHx8XG5cdFx0XHRcdCggbm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkICk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbIFwiZW1wdHlcIiBdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKCBhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgKSA9PSBudWxsIHx8XG5cdFx0XHRcdFx0YXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9ICksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIF9tYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9ICksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0gKSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID9cblx0XHRcdFx0YXJndW1lbnQgKyBsZW5ndGggOlxuXHRcdFx0XHRhcmd1bWVudCA+IGxlbmd0aCA/XG5cdFx0XHRcdFx0bGVuZ3RoIDpcblx0XHRcdFx0XHRhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbIFwibnRoXCIgXSA9IEV4cHIucHNldWRvc1sgXCJlcVwiIF07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8ICggbWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSApICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFsgMCBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICggdG9rZW5zID0gW10gKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAoIG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWyAwIF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0gKTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoICggbWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApICkgJiYgKCAhcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdCggbWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkgKSApICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goIHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbIGkgXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRza2lwID0gY29tYmluYXRvci5uZXh0LFxuXHRcdGtleSA9IHNraXAgfHwgZGlyLFxuXHRcdGNoZWNrTm9uRWxlbWVudHMgPSBiYXNlICYmIGtleSA9PT0gXCJwYXJlbnROb2RlXCIsXG5cdFx0ZG9uZU5hbWUgPSBkb25lKys7XG5cblx0cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3QgP1xuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoIGVsZW1bIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRpZiAoIHNraXAgJiYgc2tpcCA9PT0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRlbGVtID0gZWxlbVsgZGlyIF0gfHwgZWxlbTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoICggb2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0gKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAoIG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIGtleSBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKCBuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1sgaSBdKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWyAwIF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbIGkgXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKCBlbGVtID0gdW5tYXRjaGVkWyBpIF0gKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoXG5cdFx0XHRcdHNlbGVjdG9yIHx8IFwiKlwiLFxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LFxuXHRcdFx0XHRbXVxuXHRcdFx0KSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoIGVsZW0gPSB0ZW1wWyBpIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwWyBpIF0gXSA9ICEoIG1hdGNoZXJJblsgcG9zdE1hcFsgaSBdIF0gPSBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBtYXRjaGVyT3V0WyBpIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goICggbWF0Y2hlckluWyBpIF0gPSBlbGVtICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKCBtYXRjaGVyT3V0ID0gW10gKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgJiZcblx0XHRcdFx0XHRcdCggdGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mKCBzZWVkLCBlbGVtICkgOiBwcmVNYXBbIGkgXSApID4gLTEgKSB7XG5cblx0XHRcdFx0XHRcdHNlZWRbIHRlbXAgXSA9ICEoIHJlc3VsdHNbIHRlbXAgXSA9IGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEFkZCBlbGVtZW50cyB0byByZXN1bHRzLCB0aHJvdWdoIHBvc3RGaW5kZXIgaWYgZGVmaW5lZFxuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyT3V0ID0gY29uZGVuc2UoXG5cdFx0XHRcdG1hdGNoZXJPdXQgPT09IHJlc3VsdHMgP1xuXHRcdFx0XHRcdG1hdGNoZXJPdXQuc3BsaWNlKCBwcmVleGlzdGluZywgbWF0Y2hlck91dC5sZW5ndGggKSA6XG5cdFx0XHRcdFx0bWF0Y2hlck91dFxuXHRcdFx0KTtcblx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgcmVzdWx0cywgbWF0Y2hlck91dCwgeG1sICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBtYXRjaGVyT3V0ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9ICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIDAgXS50eXBlIF0sXG5cdFx0aW1wbGljaXRSZWxhdGl2ZSA9IGxlYWRpbmdSZWxhdGl2ZSB8fCBFeHByLnJlbGF0aXZlWyBcIiBcIiBdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoIGNoZWNrQ29udGV4dCA9IGNvbnRleHQgKS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXG5cdFx0XHQvLyBBdm9pZCBoYW5naW5nIG9udG8gZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdGNoZWNrQ29udGV4dCA9IG51bGw7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggbWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaSBdLnR5cGUgXSApICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyICkgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbIGkgXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1sgaSBdLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgaiBdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHR0b2tlbnNcblx0XHRcdFx0XHRcdC5zbGljZSggMCwgaSAtIDEgKVxuXHRcdFx0XHRcdFx0LmNvbmNhdCggeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0gKVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKCB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFsgXCJUQUdcIiBdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9ICggZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEgKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCA9PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdFx0Ly8gSUUvRWRnZSBzb21ldGltZXMgdGhyb3cgYSBcIlBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBzdHJpY3QtY29tcGFyaW5nXG5cdFx0XHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdFx0XHRcdFx0XHR4bWwgPSAhZG9jdW1lbnRJc0hUTUw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblxuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0gKSApIHtcblx0XHRcdFx0XHRcdG1hdGNoZWRDb3VudC0tO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIExlbmd0aGVuIHRoZSBhcnJheSBmb3IgZXZlcnkgZWxlbWVudCwgbWF0Y2hlZCBvciBub3Rcblx0XHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBgaWAgaXMgbm93IHRoZSBjb3VudCBvZiBlbGVtZW50cyB2aXNpdGVkIGFib3ZlLCBhbmQgYWRkaW5nIGl0IHRvIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBtYWtlcyB0aGUgbGF0dGVyIG5vbm5lZ2F0aXZlLlxuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0Ly8gTk9URTogVGhpcyBjYW4gYmUgc2tpcHBlZCBpZiB0aGVyZSBhcmUgbm8gdW5tYXRjaGVkIGVsZW1lbnRzIChpLmUuLCBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gZXF1YWxzIGBpYCksIHVubGVzcyB3ZSBkaWRuJ3QgdmlzaXQgX2FueV8gZWxlbWVudHMgaW4gdGhlIGFib3ZlIGxvb3AgYmVjYXVzZSB3ZSBoYXZlXG5cdFx0XHQvLyBubyBlbGVtZW50IG1hdGNoZXJzIGFuZCBubyBzZWVkLlxuXHRcdFx0Ly8gSW5jcmVtZW50aW5nIGFuIGluaXRpYWxseS1zdHJpbmcgXCIwXCIgYGlgIGFsbG93cyBgaWAgdG8gcmVtYWluIGEgc3RyaW5nIG9ubHkgaW4gdGhhdFxuXHRcdFx0Ly8gY2FzZSwgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSBcIjAwXCIgYG1hdGNoZWRDb3VudGAgdGhhdCBkaWZmZXJzIGZyb20gYGlgIGJ1dCBpcyBhbHNvXG5cdFx0XHQvLyBudW1lcmljYWxseSB6ZXJvLlxuXHRcdFx0aWYgKCBieVNldCAmJiBpICE9PSBtYXRjaGVkQ291bnQgKSB7XG5cdFx0XHRcdGogPSAwO1xuXHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IHNldE1hdGNoZXJzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBSZWludGVncmF0ZSBlbGVtZW50IG1hdGNoZXMgdG8gZWxpbWluYXRlIHRoZSBuZWVkIGZvciBzb3J0aW5nXG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkQ291bnQgPiAwICkge1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggISggdW5tYXRjaGVkWyBpIF0gfHwgc2V0TWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0TWF0Y2hlZFsgaSBdID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbIGkgXSApO1xuXHRcdFx0aWYgKCBjYWNoZWRbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0c2V0TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtZW50TWF0Y2hlcnMucHVzaCggY2FjaGVkICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FjaGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZShcblx0XHRcdHNlbGVjdG9yLFxuXHRcdFx0bWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzIClcblx0XHQpO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoIHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IgKSApO1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFRyeSB0byBtaW5pbWl6ZSBvcGVyYXRpb25zIGlmIHRoZXJlIGlzIG9ubHkgb25lIHNlbGVjdG9yIGluIHRoZSBsaXN0IGFuZCBubyBzZWVkXG5cdC8vICh0aGUgbGF0dGVyIG9mIHdoaWNoIGd1YXJhbnRlZXMgdXMgY29udGV4dClcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBSZWR1Y2UgY29udGV4dCBpZiB0aGUgbGVhZGluZyBjb21wb3VuZCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAoIHRva2VuID0gdG9rZW5zWyAwIF0gKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiYgRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAxIF0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbIFwiSURcIiBdKCB0b2tlbi5tYXRjaGVzWyAwIF1cblx0XHRcdFx0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksIGNvbnRleHQgKSB8fCBbXSApWyAwIF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByWyBcIm5lZWRzQ29udGV4dFwiIF0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbIGkgXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAoIHR5cGUgPSB0b2tlbi50eXBlICkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICggZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdICkgKSB7XG5cblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKCBzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWyAwIF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbIDAgXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8XG5cdFx0XHRcdFx0XHRjb250ZXh0XG5cdFx0XHRcdCkgKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdCggXCJcIiApLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oIFwiXCIgKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKSApICYgMTtcbn0gKTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBlbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSggXCJocmVmXCIgKSA9PT0gXCIjXCI7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBkZWZhdWx0VmFsdWUgaW4gcGxhY2Ugb2YgZ2V0QXR0cmlidXRlKFwidmFsdWVcIilcbmlmICggIXN1cHBvcnQuYXR0cmlidXRlcyB8fCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIF9uYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmRlZmF1bHRWYWx1ZTtcblx0XHR9XG5cdH0gKTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoIFwiZGlzYWJsZWRcIiApID09IG51bGw7XG59ICkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9ICk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0gKSggd2luZG93ICk7XG5cblxuXG5qUXVlcnkuZmluZCA9IFNpenpsZTtcbmpRdWVyeS5leHByID0gU2l6emxlLnNlbGVjdG9ycztcblxuLy8gRGVwcmVjYXRlZFxualF1ZXJ5LmV4cHJbIFwiOlwiIF0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZVNvcnQgPSBqUXVlcnkudW5pcXVlID0gU2l6emxlLnVuaXF1ZVNvcnQ7XG5qUXVlcnkudGV4dCA9IFNpenpsZS5nZXRUZXh0O1xualF1ZXJ5LmlzWE1MRG9jID0gU2l6emxlLmlzWE1MO1xualF1ZXJ5LmNvbnRhaW5zID0gU2l6emxlLmNvbnRhaW5zO1xualF1ZXJ5LmVzY2FwZVNlbGVjdG9yID0gU2l6emxlLmVzY2FwZTtcblxuXG5cblxudmFyIGRpciA9IGZ1bmN0aW9uKCBlbGVtLCBkaXIsIHVudGlsICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdLFxuXHRcdHRydW5jYXRlID0gdW50aWwgIT09IHVuZGVmaW5lZDtcblxuXHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgJiYgZWxlbS5ub2RlVHlwZSAhPT0gOSApIHtcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRpZiAoIHRydW5jYXRlICYmIGpRdWVyeSggZWxlbSApLmlzKCB1bnRpbCApICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdG1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHNpYmxpbmdzID0gZnVuY3Rpb24oIG4sIGVsZW0gKSB7XG5cdHZhciBtYXRjaGVkID0gW107XG5cblx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRpZiAoIG4ubm9kZVR5cGUgPT09IDEgJiYgbiAhPT0gZWxlbSApIHtcblx0XHRcdG1hdGNoZWQucHVzaCggbiApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgcm5lZWRzQ29udGV4dCA9IGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtcblxuXG5cbmZ1bmN0aW9uIG5vZGVOYW1lKCBlbGVtLCBuYW1lICkge1xuXG5cdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG59XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiLCB1bnRpbCApO1xuXHR9LFxuXHRuZXh0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXY6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIGVsZW0uY29udGVudERvY3VtZW50ICE9IG51bGwgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErXG5cdFx0XHQvLyA8b2JqZWN0PiBlbGVtZW50cyB3aXRoIG5vIGBkYXRhYCBhdHRyaWJ1dGUgaGFzIGFuIG9iamVjdFxuXHRcdFx0Ly8gYGNvbnRlbnREb2N1bWVudGAgd2l0aCBhIGBudWxsYCBwcm90b3R5cGUuXG5cdFx0XHRnZXRQcm90byggZWxlbS5jb250ZW50RG9jdW1lbnQgKSApIHtcblxuXHRcdFx0cmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5LCBpT1MgNyBvbmx5LCBBbmRyb2lkIEJyb3dzZXIgPD00LjMgb25seVxuXHRcdC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuXHRcdC8vIGRvbid0IHN1cHBvcnQgaXQuXG5cdFx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0ZW1wbGF0ZVwiICkgKSB7XG5cdFx0XHRlbGVtID0gZWxlbS5jb250ZW50IHx8IGVsZW07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBfaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIHByaW1hcnkgRGVmZXJyZWRcblx0XHRcdHByaW1hcnkgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0cHJpbWFyeS5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgcHJpbWFyeS5kb25lKCB1cGRhdGVGdW5jKCBpICkgKS5yZXNvbHZlLCBwcmltYXJ5LnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIHByaW1hcnkuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHByaW1hcnkudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgcHJpbWFyeS5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcHJpbWFyeS5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIF9rZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIF9hbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxuXG5cbmZ1bmN0aW9uIGFkanVzdENTUyggZWxlbSwgcHJvcCwgdmFsdWVQYXJ0cywgdHdlZW4gKSB7XG5cdHZhciBhZGp1c3RlZCwgc2NhbGUsXG5cdFx0bWF4SXRlcmF0aW9ucyA9IDIwLFxuXHRcdGN1cnJlbnRWYWx1ZSA9IHR3ZWVuID9cblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uY3VyKCk7XG5cdFx0XHR9IDpcblx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5LmNzcyggZWxlbSwgcHJvcCwgXCJcIiApO1xuXHRcdFx0fSxcblx0XHRpbml0aWFsID0gY3VycmVudFZhbHVlKCksXG5cdFx0dW5pdCA9IHZhbHVlUGFydHMgJiYgdmFsdWVQYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRpbml0aWFsSW5Vbml0ID0gZWxlbS5ub2RlVHlwZSAmJlxuXHRcdFx0KCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICtpbml0aWFsICkgJiZcblx0XHRcdHJjc3NOdW0uZXhlYyggalF1ZXJ5LmNzcyggZWxlbSwgcHJvcCApICk7XG5cblx0aWYgKCBpbml0aWFsSW5Vbml0ICYmIGluaXRpYWxJblVuaXRbIDMgXSAhPT0gdW5pdCApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHRcdC8vIEhhbHZlIHRoZSBpdGVyYXRpb24gdGFyZ2V0IHZhbHVlIHRvIHByZXZlbnQgaW50ZXJmZXJlbmNlIGZyb20gQ1NTIHVwcGVyIGJvdW5kcyAoZ2gtMjE0NClcblx0XHRpbml0aWFsID0gaW5pdGlhbCAvIDI7XG5cblx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0dW5pdCA9IHVuaXQgfHwgaW5pdGlhbEluVW5pdFsgMyBdO1xuXG5cdFx0Ly8gSXRlcmF0aXZlbHkgYXBwcm94aW1hdGUgZnJvbSBhIG5vbnplcm8gc3RhcnRpbmcgcG9pbnRcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWwgfHwgMTtcblxuXHRcdHdoaWxlICggbWF4SXRlcmF0aW9ucy0tICkge1xuXG5cdFx0XHQvLyBFdmFsdWF0ZSBhbmQgdXBkYXRlIG91ciBiZXN0IGd1ZXNzIChkb3VibGluZyBndWVzc2VzIHRoYXQgemVybyBvdXQpLlxuXHRcdFx0Ly8gRmluaXNoIGlmIHRoZSBzY2FsZSBlcXVhbHMgb3IgY3Jvc3NlcyAxIChtYWtpbmcgdGhlIG9sZCpuZXcgcHJvZHVjdCBub24tcG9zaXRpdmUpLlxuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXHRcdFx0aWYgKCAoIDEgLSBzY2FsZSApICogKCAxIC0gKCBzY2FsZSA9IGN1cnJlbnRWYWx1ZSgpIC8gaW5pdGlhbCB8fCAwLjUgKSApIDw9IDAgKSB7XG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdFx0fVxuXHRcdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgLyBzY2FsZTtcblxuXHRcdH1cblxuXHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0ICogMjtcblx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgd2UgdXBkYXRlIHRoZSB0d2VlbiBwcm9wZXJ0aWVzIGxhdGVyIG9uXG5cdFx0dmFsdWVQYXJ0cyA9IHZhbHVlUGFydHMgfHwgW107XG5cdH1cblxuXHRpZiAoIHZhbHVlUGFydHMgKSB7XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsSW5Vbml0IHx8ICtpbml0aWFsIHx8IDA7XG5cblx0XHQvLyBBcHBseSByZWxhdGl2ZSBvZmZzZXQgKCs9Ly09KSBpZiBzcGVjaWZpZWRcblx0XHRhZGp1c3RlZCA9IHZhbHVlUGFydHNbIDEgXSA/XG5cdFx0XHRpbml0aWFsSW5Vbml0ICsgKCB2YWx1ZVBhcnRzWyAxIF0gKyAxICkgKiB2YWx1ZVBhcnRzWyAyIF0gOlxuXHRcdFx0K3ZhbHVlUGFydHNbIDIgXTtcblx0XHRpZiAoIHR3ZWVuICkge1xuXHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHR0d2Vlbi5zdGFydCA9IGluaXRpYWxJblVuaXQ7XG5cdFx0XHR0d2Vlbi5lbmQgPSBhZGp1c3RlZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGFkanVzdGVkO1xufVxuXG5cbnZhciBkZWZhdWx0RGlzcGxheU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApIHtcblx0dmFyIHRlbXAsXG5cdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50LFxuXHRcdG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSxcblx0XHRkaXNwbGF5ID0gZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF07XG5cblx0aWYgKCBkaXNwbGF5ICkge1xuXHRcdHJldHVybiBkaXNwbGF5O1xuXHR9XG5cblx0dGVtcCA9IGRvYy5ib2R5LmFwcGVuZENoaWxkKCBkb2MuY3JlYXRlRWxlbWVudCggbm9kZU5hbWUgKSApO1xuXHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggdGVtcCwgXCJkaXNwbGF5XCIgKTtcblxuXHR0ZW1wLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHRlbXAgKTtcblxuXHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdGRpc3BsYXkgPSBcImJsb2NrXCI7XG5cdH1cblx0ZGVmYXVsdERpc3BsYXlNYXBbIG5vZGVOYW1lIF0gPSBkaXNwbGF5O1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLFxuXHRcdHZhbHVlcyA9IFtdLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBlbGVtZW50cy5sZW5ndGg7XG5cblx0Ly8gRGV0ZXJtaW5lIG5ldyBkaXNwbGF5IHZhbHVlIGZvciBlbGVtZW50cyB0aGF0IG5lZWQgdG8gY2hhbmdlXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRkaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5O1xuXHRcdGlmICggc2hvdyApIHtcblxuXHRcdFx0Ly8gU2luY2Ugd2UgZm9yY2UgdmlzaWJpbGl0eSB1cG9uIGNhc2NhZGUtaGlkZGVuIGVsZW1lbnRzLCBhbiBpbW1lZGlhdGUgKGFuZCBzbG93KVxuXHRcdFx0Ly8gY2hlY2sgaXMgcmVxdWlyZWQgaW4gdGhpcyBmaXJzdCBsb29wIHVubGVzcyB3ZSBoYXZlIGEgbm9uZW1wdHkgZGlzcGxheSB2YWx1ZSAoZWl0aGVyXG5cdFx0XHQvLyBpbmxpbmUgb3IgYWJvdXQtdG8tYmUtcmVzdG9yZWQpXG5cdFx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICkgfHwgbnVsbDtcblx0XHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICkge1xuXHRcdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICggZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBnZXREZWZhdWx0RGlzcGxheSggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAoIGRpc3BsYXkgIT09IFwibm9uZVwiICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBcIm5vbmVcIjtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB3aGF0IHdlJ3JlIG92ZXJ3cml0aW5nXG5cdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJkaXNwbGF5XCIsIGRpc3BsYXkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3AgdG8gYXZvaWQgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCB2YWx1ZXNbIGluZGV4IF0gIT0gbnVsbCApIHtcblx0XHRcdGVsZW1lbnRzWyBpbmRleCBdLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZXNbIGluZGV4IF07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRzO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggaXNIaWRkZW5XaXRoaW5UcmVlKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICggL14oPzpjaGVja2JveHxyYWRpbykkL2kgKTtcblxudmFyIHJ0YWdOYW1lID0gKCAvPChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopL2kgKTtcblxudmFyIHJzY3JpcHRUeXBlID0gKCAvXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0Ly8gSUUgPD05IHJlcGxhY2VzIDxvcHRpb24+IHRhZ3Mgd2l0aCB0aGVpciBjb250ZW50cyB3aGVuIGluc2VydGVkIG91dHNpZGUgb2Zcblx0Ly8gdGhlIHNlbGVjdCBlbGVtZW50LlxuXHRkaXYuaW5uZXJIVE1MID0gXCI8b3B0aW9uPjwvb3B0aW9uPlwiO1xuXHRzdXBwb3J0Lm9wdGlvbiA9ICEhZGl2Lmxhc3RDaGlsZDtcbn0gKSgpO1xuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbmlmICggIXN1cHBvcnQub3B0aW9uICkge1xuXHR3cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb24gPSBbIDEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiIF07XG59XG5cblxuZnVuY3Rpb24gZ2V0QWxsKCBjb250ZXh0LCB0YWcgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBVc2UgdHlwZW9mIHRvIGF2b2lkIHplcm8tYXJndW1lbnQgbWV0aG9kIGludm9jYXRpb24gb24gaG9zdCBvYmplY3RzICgjMTUxNTEpXG5cdHZhciByZXQ7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2UgaWYgKCB0eXBlb2YgY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIHtcblx0XHRyZXQgPSBbXTtcblx0fVxuXG5cdGlmICggdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIG5vZGVOYW1lKCBjb250ZXh0LCB0YWcgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbIGNvbnRleHQgXSwgcmV0ICk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5cbi8vIE1hcmsgc2NyaXB0cyBhcyBoYXZpbmcgYWxyZWFkeSBiZWVuIGV2YWx1YXRlZFxuZnVuY3Rpb24gc2V0R2xvYmFsRXZhbCggZWxlbXMsIHJlZkVsZW1lbnRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZGF0YVByaXYuc2V0KFxuXHRcdFx0ZWxlbXNbIGkgXSxcblx0XHRcdFwiZ2xvYmFsRXZhbFwiLFxuXHRcdFx0IXJlZkVsZW1lbnRzIHx8IGRhdGFQcml2LmdldCggcmVmRWxlbWVudHNbIGkgXSwgXCJnbG9iYWxFdmFsXCIgKVxuXHRcdCk7XG5cdH1cbn1cblxuXG52YXIgcmh0bWwgPSAvPHwmIz9cXHcrOy87XG5cbmZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoIGVsZW1zLCBjb250ZXh0LCBzY3JpcHRzLCBzZWxlY3Rpb24sIGlnbm9yZWQgKSB7XG5cdHZhciBlbGVtLCB0bXAsIHRhZywgd3JhcCwgYXR0YWNoZWQsIGosXG5cdFx0ZnJhZ21lbnQgPSBjb250ZXh0LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRub2RlcyA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0aWYgKCBlbGVtIHx8IGVsZW0gPT09IDAgKSB7XG5cblx0XHRcdC8vIEFkZCBub2RlcyBkaXJlY3RseVxuXHRcdFx0aWYgKCB0b1R5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGF0dGFjaGVkID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBhdHRhY2hlZCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxudmFyIHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuLy8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXMsIGV4Y2VwdCB3aGVuIHRoZXkgYXJlIG5vLW9wLlxuLy8gU28gZXhwZWN0IGZvY3VzIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBhY3RpdmUsXG4vLyBhbmQgYmx1ciB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIG5vdCBhbHJlYWR5IGFjdGl2ZS5cbi8vIChmb2N1cyBhbmQgYmx1ciBhcmUgYWx3YXlzIHN5bmNocm9ub3VzIGluIG90aGVyIHN1cHBvcnRlZCBicm93c2Vycyxcbi8vIHRoaXMganVzdCBkZWZpbmVzIHdoZW4gd2UgY2FuIGNvdW50IG9uIGl0KS5cbmZ1bmN0aW9uIGV4cGVjdFN5bmMoIGVsZW0sIHR5cGUgKSB7XG5cdHJldHVybiAoIGVsZW0gPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgKSA9PT0gKCB0eXBlID09PSBcImZvY3VzXCIgKTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIEFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGNhbiB0aHJvdyB1bmV4cGVjdGVkbHlcbi8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM5M1xuZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG5cdH0gY2F0Y2ggKCBlcnIgKSB7IH1cbn1cblxuZnVuY3Rpb24gb24oIGVsZW0sIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIG9uZSApIHtcblx0dmFyIG9yaWdGbiwgdHlwZTtcblxuXHQvLyBUeXBlcyBjYW4gYmUgYSBtYXAgb2YgdHlwZXMvaGFuZGxlcnNcblx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyAoIHR5cGVzLU9iamVjdCwgc2VsZWN0b3IsIGRhdGEgKVxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRkYXRhID0gZGF0YSB8fCBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0b24oIGVsZW0sIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIGRhdGEgPT0gbnVsbCAmJiBmbiA9PSBudWxsICkge1xuXG5cdFx0Ly8gKCB0eXBlcywgZm4gKVxuXHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHR9IGVsc2UgaWYgKCBmbiA9PSBudWxsICkge1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBzZWxlY3RvciwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyAoIHR5cGVzLCBkYXRhLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0fSBlbHNlIGlmICggIWZuICkge1xuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBvbmUgPT09IDEgKSB7XG5cdFx0b3JpZ0ZuID0gZm47XG5cdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0alF1ZXJ5KCkub2ZmKCBldmVudCApO1xuXHRcdFx0cmV0dXJuIG9yaWdGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fTtcblxuXHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0Zm4uZ3VpZCA9IG9yaWdGbi5ndWlkIHx8ICggb3JpZ0ZuLmd1aWQgPSBqUXVlcnkuZ3VpZCsrICk7XG5cdH1cblx0cmV0dXJuIGVsZW0uZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0alF1ZXJ5LmV2ZW50LmFkZCggdGhpcywgdHlwZXMsIGZuLCBkYXRhLCBzZWxlY3RvciApO1xuXHR9ICk7XG59XG5cbi8qXG4gKiBIZWxwZXIgZnVuY3Rpb25zIGZvciBtYW5hZ2luZyBldmVudHMgLS0gbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBpbnRlcmZhY2UuXG4gKiBQcm9wcyB0byBEZWFuIEVkd2FyZHMnIGFkZEV2ZW50IGxpYnJhcnkgZm9yIG1hbnkgb2YgdGhlIGlkZWFzLlxuICovXG5qUXVlcnkuZXZlbnQgPSB7XG5cblx0Z2xvYmFsOiB7fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgZGF0YSwgc2VsZWN0b3IgKSB7XG5cblx0XHR2YXIgaGFuZGxlT2JqSW4sIGV2ZW50SGFuZGxlLCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuZ2V0KCBlbGVtICk7XG5cblx0XHQvLyBPbmx5IGF0dGFjaCBldmVudHMgdG8gb2JqZWN0cyB0aGF0IGFjY2VwdCBkYXRhXG5cdFx0aWYgKCAhYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhbiBvYmplY3Qgb2YgY3VzdG9tIGRhdGEgaW4gbGlldSBvZiB0aGUgaGFuZGxlclxuXHRcdGlmICggaGFuZGxlci5oYW5kbGVyICkge1xuXHRcdFx0aGFuZGxlT2JqSW4gPSBoYW5kbGVyO1xuXHRcdFx0aGFuZGxlciA9IGhhbmRsZU9iakluLmhhbmRsZXI7XG5cdFx0XHRzZWxlY3RvciA9IGhhbmRsZU9iakluLnNlbGVjdG9yO1xuXHRcdH1cblxuXHRcdC8vIEVuc3VyZSB0aGF0IGludmFsaWQgc2VsZWN0b3JzIHRocm93IGV4Y2VwdGlvbnMgYXQgYXR0YWNoIHRpbWVcblx0XHQvLyBFdmFsdWF0ZSBhZ2FpbnN0IGRvY3VtZW50RWxlbWVudCBpbiBjYXNlIGVsZW0gaXMgYSBub24tZWxlbWVudCBub2RlIChlLmcuLCBkb2N1bWVudClcblx0XHRpZiAoIHNlbGVjdG9yICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBkb2N1bWVudEVsZW1lbnQsIHNlbGVjdG9yICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKCBldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgKSApIHtcblx0XHRcdGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyA9IE9iamVjdC5jcmVhdGUoIG51bGwgKTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHR2YXIgaSwgaiwgcmV0LCBtYXRjaGVkLCBoYW5kbGVPYmosIGhhbmRsZXJRdWV1ZSxcblx0XHRcdGFyZ3MgPSBuZXcgQXJyYXkoIGFyZ3VtZW50cy5sZW5ndGggKSxcblxuXHRcdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0XHRldmVudCA9IGpRdWVyeS5ldmVudC5maXgoIG5hdGl2ZUV2ZW50ICksXG5cblx0XHRcdGhhbmRsZXJzID0gKFxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHJldHVyblRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGV4cGVjdFN5bmMgKSB7XG5cblx0Ly8gTWlzc2luZyBleHBlY3RTeW5jIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhZXhwZWN0U3luYyApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdC8vIFNhdmVkIGRhdGEgc2hvdWxkIGJlIGZhbHNlIGluIHN1Y2ggY2FzZXMsIGJ1dCBtaWdodCBiZSBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0XG5cdFx0XHRcdC8vIGZyb20gYW4gYXN5bmMgbmF0aXZlIGhhbmRsZXIgKGdoLTQzNTApXG5cdFx0XHRcdGlmICggIXNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXNcblx0XHRcdFx0XHRub3RBc3luYyA9IGV4cGVjdFN5bmMoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgfHwgbm90QXN5bmMgKSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA4Nitcblx0XHRcdFx0XHRcdC8vIEluIENocm9tZSwgaWYgYW4gZWxlbWVudCBoYXZpbmcgYSBmb2N1c291dCBoYW5kbGVyIGlzIGJsdXJyZWQgYnlcblx0XHRcdFx0XHRcdC8vIGNsaWNraW5nIG91dHNpZGUgb2YgaXQsIGl0IGludm9rZXMgdGhlIGhhbmRsZXIgc3luY2hyb25vdXNseS4gSWZcblx0XHRcdFx0XHRcdC8vIHRoYXQgaGFuZGxlciBjYWxscyBgLnJlbW92ZSgpYCBvbiB0aGUgZWxlbWVudCwgdGhlIGRhdGEgaXMgY2xlYXJlZCxcblx0XHRcdFx0XHRcdC8vIGxlYXZpbmcgYHJlc3VsdGAgdW5kZWZpbmVkLiBXZSBuZWVkIHRvIGd1YXJkIGFnYWluc3QgdGhpcy5cblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHQgJiYgcmVzdWx0LnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZyB0aGVcblx0XHRcdFx0Ly8gbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwge1xuXHRcdFx0XHRcdHZhbHVlOiBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0XHQvLyBFeHRlbmQgd2l0aCB0aGUgcHJvdG90eXBlIHRvIHJlc2V0IHRoZSBhYm92ZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggc2F2ZWRbIDAgXSwgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSApLFxuXHRcdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXHR3aGljaDogdHJ1ZVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSA9IHtcblxuXHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCBleHBlY3RTeW5jICk7XG5cblx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwcmVzcyBuYXRpdmUgZm9jdXMgb3IgYmx1ciBhcyBpdCdzIGFscmVhZHkgYmVpbmcgZmlyZWRcblx0XHQvLyBpbiBsZXZlcmFnZU5hdGl2ZS5cblx0XHRfZGVmYXVsdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCB1ZGF0YU9sZCwgdWRhdGFDdXIsIGV2ZW50cztcblxuXHRpZiAoIGRlc3Qubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gMS4gQ29weSBwcml2YXRlIGRhdGE6IGV2ZW50cywgaGFuZGxlcnMsIGV0Yy5cblx0aWYgKCBkYXRhUHJpdi5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHRwZGF0YU9sZCA9IGRhdGFQcml2LmdldCggc3JjICk7XG5cdFx0ZXZlbnRzID0gcGRhdGFPbGQuZXZlbnRzO1xuXG5cdFx0aWYgKCBldmVudHMgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRlc3QsIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cblx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkZXN0LCB0eXBlLCBldmVudHNbIHR5cGUgXVsgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyAyLiBDb3B5IHVzZXIgZGF0YVxuXHRpZiAoIGRhdGFVc2VyLmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHVkYXRhT2xkID0gZGF0YVVzZXIuYWNjZXNzKCBzcmMgKTtcblx0XHR1ZGF0YUN1ciA9IGpRdWVyeS5leHRlbmQoIHt9LCB1ZGF0YU9sZCApO1xuXG5cdFx0ZGF0YVVzZXIuc2V0KCBkZXN0LCB1ZGF0YUN1ciApO1xuXHR9XG59XG5cbi8vIEZpeCBJRSBidWdzLCBzZWUgc3VwcG9ydCB0ZXN0c1xuZnVuY3Rpb24gZml4SW5wdXQoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIEZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3ggb3IgcmFkaW8gYnV0dG9uLlxuXHRpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgcmNoZWNrYWJsZVR5cGUudGVzdCggc3JjLnR5cGUgKSApIHtcblx0XHRkZXN0LmNoZWNrZWQgPSBzcmMuY2hlY2tlZDtcblxuXHQvLyBGYWlscyB0byByZXR1cm4gdGhlIHNlbGVjdGVkIG9wdGlvbiB0byB0aGUgZGVmYXVsdCBzZWxlY3RlZCBzdGF0ZSB3aGVuIGNsb25pbmcgb3B0aW9uc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGRvbU1hbmlwKCBjb2xsZWN0aW9uLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApIHtcblxuXHQvLyBGbGF0dGVuIGFueSBuZXN0ZWQgYXJyYXlzXG5cdGFyZ3MgPSBmbGF0KCBhcmdzICk7XG5cblx0dmFyIGZyYWdtZW50LCBmaXJzdCwgc2NyaXB0cywgaGFzU2NyaXB0cywgbm9kZSwgZG9jLFxuXHRcdGkgPSAwLFxuXHRcdGwgPSBjb2xsZWN0aW9uLmxlbmd0aCxcblx0XHRpTm9DbG9uZSA9IGwgLSAxLFxuXHRcdHZhbHVlID0gYXJnc1sgMCBdLFxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0Ly8gV2UgY2FuJ3QgY2xvbmVOb2RlIGZyYWdtZW50cyB0aGF0IGNvbnRhaW4gY2hlY2tlZCwgaW4gV2ViS2l0XG5cdGlmICggdmFsdWVJc0Z1bmN0aW9uIHx8XG5cdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc3VwcG9ydC5jaGVja0Nsb25lICYmIHJjaGVja2VkLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gY29sbGVjdGlvbi5lYWNoKCBmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGNvbGxlY3Rpb24uZXEoIGluZGV4ICk7XG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICYmICggbm9kZS50eXBlIHx8IFwiXCIgKS50b0xvd2VyQ2FzZSgpICAhPT0gXCJtb2R1bGVcIiApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBPcHRpb25hbCBBSkFYIGRlcGVuZGVuY3ksIGJ1dCB3b24ndCBydW4gc2NyaXB0cyBpZiBub3QgcHJlc2VudFxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCAmJiAhbm9kZS5ub01vZHVsZSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuX2V2YWxVcmwoIG5vZGUuc3JjLCB7XG5cdFx0XHRcdFx0XHRcdFx0XHRub25jZTogbm9kZS5ub25jZSB8fCBub2RlLmdldEF0dHJpYnV0ZSggXCJub25jZVwiIClcblx0XHRcdFx0XHRcdFx0XHR9LCBkb2MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgbm9kZSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBpc0F0dGFjaGVkKCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbDtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0gaXNBdHRhY2hlZCggZWxlbSApO1xuXG5cdFx0Ly8gRml4IElFIGNsb25pbmcgaXNzdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCAmJiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgZWxlbS5ub2RlVHlwZSA9PT0gMTEgKSAmJlxuXHRcdFx0XHQhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIFdlIGVzY2hldyBTaXp6bGUgaGVyZSBmb3IgcGVyZm9ybWFuY2UgcmVhc29uczogaHR0cHM6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZpeElucHV0KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvcHkgdGhlIGV2ZW50cyBmcm9tIHRoZSBvcmlnaW5hbCB0byB0aGUgY2xvbmVcblx0XHRpZiAoIGRhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRpZiAoIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0XHRzcmNFbGVtZW50cyA9IHNyY0VsZW1lbnRzIHx8IGdldEFsbCggZWxlbSApO1xuXHRcdFx0XHRkZXN0RWxlbWVudHMgPSBkZXN0RWxlbWVudHMgfHwgZ2V0QWxsKCBjbG9uZSApO1xuXG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBzcmNFbGVtZW50c1sgaSBdLCBkZXN0RWxlbWVudHNbIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjbG9uZUNvcHlFdmVudCggZWxlbSwgY2xvbmUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSwgXCJzY3JpcHRcIiApO1xuXHRcdGlmICggZGVzdEVsZW1lbnRzLmxlbmd0aCA+IDAgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCBkZXN0RWxlbWVudHMsICFpblBhZ2UgJiYgZ2V0QWxsKCBlbGVtLCBcInNjcmlwdFwiICkgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gdGhlIGNsb25lZCBzZXRcblx0XHRyZXR1cm4gY2xvbmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cdFx0dmFyIGRhdGEsIGVsZW0sIHR5cGUsXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWwsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9PSB1bmRlZmluZWQ7IGkrKyApIHtcblx0XHRcdGlmICggYWNjZXB0RGF0YSggZWxlbSApICkge1xuXHRcdFx0XHRpZiAoICggZGF0YSA9IGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSApICkge1xuXHRcdFx0XHRcdGlmICggZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCB0eXBlIGluIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWxbIHR5cGUgXSApIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gVGhpcyBpcyBhIHNob3J0Y3V0IHRvIGF2b2lkIGpRdWVyeS5ldmVudC5yZW1vdmUncyBvdmVyaGVhZFxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5yZW1vdmVFdmVudCggZWxlbSwgdHlwZSwgZGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdICkge1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkZXRhY2g6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZTogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yICk7XG5cdH0sXG5cblx0dGV4dDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnRleHQoIHRoaXMgKSA6XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRcdHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdGFwcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHByZXBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoIGVsZW0sIHRhcmdldC5maXJzdENoaWxkICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YWZ0ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSB0aGlzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gUHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdFx0ZWxlbS50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRkYXRhQW5kRXZlbnRzID0gZGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZmFsc2UgOiBkYXRhQW5kRXZlbnRzO1xuXHRcdGRlZXBEYXRhQW5kRXZlbnRzID0gZGVlcERhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGRhdGFBbmRFdmVudHMgOiBkZWVwRGF0YUFuZEV2ZW50cztcblxuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNsb25lKCB0aGlzLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApO1xuXHRcdH0gKTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pbm5lckhUTUw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNlZSBpZiB3ZSBjYW4gdGFrZSBhIHNob3J0Y3V0IGFuZCBqdXN0IHVzZSBpbm5lckhUTUxcblx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmICFybm9Jbm5lcmh0bWwudGVzdCggdmFsdWUgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKCBydGFnTmFtZS5leGVjKCB2YWx1ZSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpIF0gKSB7XG5cblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuaHRtbFByZWZpbHRlciggdmFsdWUgKTtcblxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF0gfHwge307XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdFx0XHRcdFx0ZWxlbS5pbm5lckhUTUwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtID0gMDtcblxuXHRcdFx0XHQvLyBJZiB1c2luZyBpbm5lckhUTUwgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgdXNlIHRoZSBmYWxsYmFjayBtZXRob2Rcblx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdHRoaXMuZW1wdHkoKS5hcHBlbmQoIHZhbHVlICk7XG5cdFx0XHR9XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRyZXBsYWNlV2l0aDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlnbm9yZWQgPSBbXTtcblxuXHRcdC8vIE1ha2UgdGhlIGNoYW5nZXMsIHJlcGxhY2luZyBlYWNoIG5vbi1pZ25vcmVkIGNvbnRleHQgZWxlbWVudCB3aXRoIHRoZSBuZXcgY29udGVudFxuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIHRoaXMsIGlnbm9yZWQgKSA8IDAgKSB7XG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggdGhpcyApICk7XG5cdFx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRcdHBhcmVudC5yZXBsYWNlQ2hpbGQoIGVsZW0sIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gRm9yY2UgY2FsbGJhY2sgaW52b2NhdGlvblxuXHRcdH0sIGlnbm9yZWQgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCgge1xuXHRhcHBlbmRUbzogXCJhcHBlbmRcIixcblx0cHJlcGVuZFRvOiBcInByZXBlbmRcIixcblx0aW5zZXJ0QmVmb3JlOiBcImJlZm9yZVwiLFxuXHRpbnNlcnRBZnRlcjogXCJhZnRlclwiLFxuXHRyZXBsYWNlQWxsOiBcInJlcGxhY2VXaXRoXCJcbn0sIGZ1bmN0aW9uKCBuYW1lLCBvcmlnaW5hbCApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGVsZW1zLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDEsXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8PSBsYXN0OyBpKysgKSB7XG5cdFx0XHRlbGVtcyA9IGkgPT09IGxhc3QgPyB0aGlzIDogdGhpcy5jbG9uZSggdHJ1ZSApO1xuXHRcdFx0alF1ZXJ5KCBpbnNlcnRbIGkgXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdC8vIC5nZXQoKSBiZWNhdXNlIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdHB1c2guYXBwbHkoIHJldCwgZWxlbXMuZ2V0KCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSApO1xudmFyIHJudW1ub25weCA9IG5ldyBSZWdFeHAoIFwiXihcIiArIHBudW0gKyBcIikoPyFweClbYS16JV0rJFwiLCBcImlcIiApO1xuXG52YXIgZ2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHksIEZpcmVmb3ggPD0zMCAoIzE1MDk4LCAjMTQxNTApXG5cdFx0Ly8gSUUgdGhyb3dzIG9uIGVsZW1lbnRzIGNyZWF0ZWQgaW4gcG9wdXBzXG5cdFx0Ly8gRkYgbWVhbndoaWxlIHRocm93cyBvbiBmcmFtZSBlbGVtZW50cyB0aHJvdWdoIFwiZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZVwiXG5cdFx0dmFyIHZpZXcgPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cblx0XHRpZiAoICF2aWV3IHx8ICF2aWV3Lm9wZW5lciApIHtcblx0XHRcdHZpZXcgPSB3aW5kb3c7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSggZWxlbSApO1xuXHR9O1xuXG52YXIgc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjayApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmNhbGwoIGVsZW0gKTtcblxuXHQvLyBSZXZlcnQgdGhlIG9sZCB2YWx1ZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9sZFsgbmFtZSBdO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn07XG5cblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTY0XG5cdFx0Ly8gRG9uJ3QgZ2V0IHRyaWNrZWQgd2hlbiB6b29tIGFmZmVjdHMgb2Zmc2V0V2lkdGggKGdoLTQwMjkpXG5cdFx0ZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuXHRcdHNjcm9sbGJveFNpemVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdi5vZmZzZXRXaWR0aCAvIDMgKSA9PT0gMTI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnNWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEJlaGF2aW9yIGluIElFIDkgaXMgbW9yZSBzdWJ0bGUgdGhhbiBpbiBuZXdlciB2ZXJzaW9ucyAmIGl0IHBhc3Nlc1xuXHRcdC8vIHNvbWUgdmVyc2lvbnMgb2YgdGhpcyB0ZXN0OyBtYWtlIHN1cmUgbm90IHRvIG1ha2UgaXQgcGFzcyB0aGVyZSFcblx0XHQvL1xuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNzArXG5cdFx0Ly8gT25seSBGaXJlZm94IGluY2x1ZGVzIGJvcmRlciB3aWR0aHNcblx0XHQvLyBpbiBjb21wdXRlZCBkaW1lbnNpb25zLiAoZ2gtNDUyOSlcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFibGUsIHRyLCB0ckNoaWxkLCB0clN0eWxlO1xuXHRcdFx0aWYgKCByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR0YWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidGFibGVcIiApO1xuXHRcdFx0XHR0ciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwidHJcIiApO1xuXHRcdFx0XHR0ckNoaWxkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdFx0XHRcdHRhYmxlLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7Ym9yZGVyLWNvbGxhcHNlOnNlcGFyYXRlXCI7XG5cdFx0XHRcdHRyLnN0eWxlLmNzc1RleHQgPSBcImJvcmRlcjoxcHggc29saWRcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgODYrXG5cdFx0XHRcdC8vIEhlaWdodCBzZXQgdGhyb3VnaCBjc3NUZXh0IGRvZXMgbm90IGdldCBhcHBsaWVkLlxuXHRcdFx0XHQvLyBDb21wdXRlZCBoZWlnaHQgdGhlbiBjb21lcyBiYWNrIGFzIDAuXG5cdFx0XHRcdHRyLnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuaGVpZ2h0ID0gXCI5cHhcIjtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDggQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBJbiBvdXIgYm9keUJhY2tncm91bmQuaHRtbCBpZnJhbWUsXG5cdFx0XHRcdC8vIGRpc3BsYXkgZm9yIGFsbCBkaXYgZWxlbWVudHMgaXMgc2V0IHRvIFwiaW5saW5lXCIsXG5cdFx0XHRcdC8vIHdoaWNoIGNhdXNlcyBhIHByb2JsZW0gb25seSBpbiBBbmRyb2lkIDggQ2hyb21lIDg2LlxuXHRcdFx0XHQvLyBFbnN1cmluZyB0aGUgZGl2IGlzIGRpc3BsYXk6IGJsb2NrXG5cdFx0XHRcdC8vIGdldHMgYXJvdW5kIHRoaXMgaXNzdWUuXG5cdFx0XHRcdHRyQ2hpbGQuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnRcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRhYmxlIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyIClcblx0XHRcdFx0XHQuYXBwZW5kQ2hpbGQoIHRyQ2hpbGQgKTtcblxuXHRcdFx0XHR0clN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIHRyICk7XG5cdFx0XHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID0gKCBwYXJzZUludCggdHJTdHlsZS5oZWlnaHQsIDEwICkgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0clN0eWxlLmJvcmRlclRvcFdpZHRoLCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJCb3R0b21XaWR0aCwgMTAgKSApID09PSB0ci5vZmZzZXRIZWlnaHQ7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCB0YWJsZSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsO1xuXHRcdH1cblx0fSApO1xufSApKCk7XG5cblxuZnVuY3Rpb24gY3VyQ1NTKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggNTErXG5cdFx0Ly8gUmV0cmlldmluZyBzdHlsZSBiZWZvcmUgY29tcHV0ZWQgc29tZWhvd1xuXHRcdC8vIGZpeGVzIGFuIGlzc3VlIHdpdGggZ2V0dGluZyB3cm9uZyB2YWx1ZXNcblx0XHQvLyBvbiBkZXRhY2hlZCBlbGVtZW50c1xuXHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdC8vIGdldFByb3BlcnR5VmFsdWUgaXMgbmVlZGVkIGZvcjpcblx0Ly8gICAuY3NzKCdmaWx0ZXInKSAoSUUgOSBvbmx5LCAjMTI1MzcpXG5cdC8vICAgLmNzcygnLS1jdXN0b21Qcm9wZXJ0eSkgKCMzMTQ0KVxuXHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdHJldCA9IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdO1xuXG5cdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWlzQXR0YWNoZWQoIGVsZW0gKSApIHtcblx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEEgdHJpYnV0ZSB0byB0aGUgXCJhd2Vzb21lIGhhY2sgYnkgRGVhbiBFZHdhcmRzXCJcblx0XHQvLyBBbmRyb2lkIEJyb3dzZXIgcmV0dXJucyBwZXJjZW50YWdlIGZvciBzb21lIHZhbHVlcyxcblx0XHQvLyBidXQgd2lkdGggc2VlbXMgdG8gYmUgcmVsaWFibHkgcGl4ZWxzLlxuXHRcdC8vIFRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzpcblx0XHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdGlmICggIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSAmJiBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcmJveFN0eWxlLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0d2lkdGggPSBzdHlsZS53aWR0aDtcblx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHQvLyBQdXQgaW4gdGhlIG5ldyB2YWx1ZXMgdG8gZ2V0IGEgY29tcHV0ZWQgdmFsdWUgb3V0XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0Ly8gUmV2ZXJ0IHRoZSBjaGFuZ2VkIHZhbHVlc1xuXHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRzdHlsZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQgIT09IHVuZGVmaW5lZCA/XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXQgKyBcIlwiIDpcblx0XHRyZXQ7XG59XG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXG5cdC8vIERlZmluZSB0aGUgaG9vaywgd2UnbGwgY2hlY2sgb24gdGhlIGZpcnN0IHJ1biBpZiBpdCdzIHJlYWxseSBuZWVkZWQuXG5cdHJldHVybiB7XG5cdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggY29uZGl0aW9uRm4oKSApIHtcblxuXHRcdFx0XHQvLyBIb29rIG5vdCBuZWVkZWQgKG9yIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBpdCBkdWVcblx0XHRcdFx0Ly8gdG8gbWlzc2luZyBkZXBlbmRlbmN5KSwgcmVtb3ZlIGl0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cdFx0XHRyZXR1cm4gKCB0aGlzLmdldCA9IGhvb2tGbiApLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxudmFyIGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCIgXSxcblx0ZW1wdHlTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKS5zdHlsZSxcblx0dmVuZG9yUHJvcHMgPSB7fTtcblxuLy8gUmV0dXJuIGEgdmVuZG9yLXByZWZpeGVkIHByb3BlcnR5IG9yIHVuZGVmaW5lZFxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB7XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHBvdGVudGlhbGx5LW1hcHBlZCBqUXVlcnkuY3NzUHJvcHMgb3IgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgZmluYWwgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSB8fCB2ZW5kb3JQcm9wc1sgbmFtZSBdO1xuXG5cdGlmICggZmluYWwgKSB7XG5cdFx0cmV0dXJuIGZpbmFsO1xuXHR9XG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cdHJldHVybiB2ZW5kb3JQcm9wc1sgbmFtZSBdID0gdmVuZG9yUHJvcE5hbWUoIG5hbWUgKSB8fCBuYW1lO1xufVxuXG5cbnZhclxuXG5cdC8vIFN3YXBwYWJsZSBpZiBkaXNwbGF5IGlzIG5vbmUgb3Igc3RhcnRzIHdpdGggdGFibGVcblx0Ly8gZXhjZXB0IFwidGFibGVcIiwgXCJ0YWJsZS1jZWxsXCIsIG9yIFwidGFibGUtY2FwdGlvblwiXG5cdC8vIFNlZSBoZXJlIGZvciBkaXNwbGF5IHZhbHVlczogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9DU1MvZGlzcGxheVxuXHRyZGlzcGxheXN3YXAgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sXG5cdHJjdXN0b21Qcm9wID0gL14tLS8sXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9O1xuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggX2VsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblxuXHQvLyBBbnkgcmVsYXRpdmUgKCsvLSkgdmFsdWVzIGhhdmUgYWxyZWFkeSBiZWVuXG5cdC8vIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludFxuXHR2YXIgbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXG5cdFx0Ly8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgXCJzdWJ0cmFjdFwiLCBlLmcuLCB3aGVuIHVzZWQgYXMgaW4gY3NzSG9va3Ncblx0XHRNYXRoLm1heCggMCwgbWF0Y2hlc1sgMiBdIC0gKCBzdWJ0cmFjdCB8fCAwICkgKSArICggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApIDpcblx0XHR2YWx1ZTtcbn1cblxuZnVuY3Rpb24gYm94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIGJveCwgaXNCb3JkZXJCb3gsIHN0eWxlcywgY29tcHV0ZWRWYWwgKSB7XG5cdHZhciBpID0gZGltZW5zaW9uID09PSBcIndpZHRoXCIgPyAxIDogMCxcblx0XHRleHRyYSA9IDAsXG5cdFx0ZGVsdGEgPSAwO1xuXG5cdC8vIEFkanVzdG1lbnQgbWF5IG5vdCBiZSBuZWNlc3Nhcnlcblx0aWYgKCBib3ggPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblxuXHRcdC8vIEJvdGggYm94IG1vZGVscyBleGNsdWRlIG1hcmdpblxuXHRcdGlmICggYm94ID09PSBcIm1hcmdpblwiICkge1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgYm94ICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBjb250ZW50LWJveCwgd2UncmUgc2Vla2luZyBcInBhZGRpbmdcIiBvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCJcblx0XHRpZiAoICFpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gQWRkIHBhZGRpbmdcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBGb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiLCBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEJ1dCBzdGlsbCBrZWVwIHRyYWNrIG9mIGl0IG90aGVyd2lzZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXh0cmEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdC8vIElmIHdlIGdldCBoZXJlIHdpdGggYSBib3JkZXItYm94IChjb250ZW50ICsgcGFkZGluZyArIGJvcmRlciksIHdlJ3JlIHNlZWtpbmcgXCJjb250ZW50XCIgb3Jcblx0XHQvLyBcInBhZGRpbmdcIiBvciBcIm1hcmdpblwiXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiLCBzdWJ0cmFjdCBwYWRkaW5nXG5cdFx0XHRpZiAoIGJveCA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIgb3IgXCJwYWRkaW5nXCIsIHN1YnRyYWN0IGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdGRlbHRhIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWNjb3VudCBmb3IgcG9zaXRpdmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlciB3aGVuIHJlcXVlc3RlZCBieSBwcm92aWRpbmcgY29tcHV0ZWRWYWxcblx0aWYgKCAhaXNCb3JkZXJCb3ggJiYgY29tcHV0ZWRWYWwgPj0gMCApIHtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyBhIHJvdW5kZWQgc3VtIG9mIGNvbnRlbnQsIHBhZGRpbmcsIHNjcm9sbCBndXR0ZXIsIGFuZCBib3JkZXJcblx0XHQvLyBBc3N1bWluZyBpbnRlZ2VyIHNjcm9sbCBndXR0ZXIsIHN1YnRyYWN0IHRoZSByZXN0IGFuZCByb3VuZCBkb3duXG5cdFx0ZGVsdGEgKz0gTWF0aC5tYXgoIDAsIE1hdGguY2VpbChcblx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRjb21wdXRlZFZhbCAtXG5cdFx0XHRkZWx0YSAtXG5cdFx0XHRleHRyYSAtXG5cdFx0XHQwLjVcblxuXHRcdC8vIElmIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBpcyB1bmtub3duLCB0aGVuIHdlIGNhbid0IGRldGVybWluZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyXG5cdFx0Ly8gVXNlIGFuIGV4cGxpY2l0IHplcm8gdG8gYXZvaWQgTmFOIChnaC0zOTY0KVxuXHRcdCkgKSB8fCAwO1xuXHR9XG5cblx0cmV0dXJuIGRlbHRhO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtNDMyMikuXG5cdFx0Ly8gRmFrZSBjb250ZW50LWJveCB1bnRpbCB3ZSBrbm93IGl0J3MgbmVlZGVkIHRvIGtub3cgdGhlIHRydWUgdmFsdWUuXG5cdFx0Ym94U2l6aW5nTmVlZGVkID0gIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSB8fCBleHRyYSxcblx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3gsXG5cblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0b2Zmc2V0UHJvcCA9IFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICk7XG5cblx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdC8vIFJldHVybiBhIGNvbmZvdW5kaW5nIG5vbi1waXhlbCB2YWx1ZSBvciBmZWlnbiBpZ25vcmFuY2UsIGFzIGFwcHJvcHJpYXRlLlxuXHRpZiAoIHJudW1ub25weC50ZXN0KCB2YWwgKSApIHtcblx0XHRpZiAoICFleHRyYSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHRcdHZhbCA9IFwiYXV0b1wiO1xuXHR9XG5cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBVc2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciB3aGVuIGJveCBzaXppbmcgaXMgdW5yZWxpYWJsZS5cblx0Ly8gSW4gdGhvc2UgY2FzZXMsIHRoZSBjb21wdXRlZCB2YWx1ZSBjYW4gYmUgdHJ1c3RlZCB0byBiZSBib3JkZXItYm94LlxuXHRpZiAoICggIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSAmJiBpc0JvcmRlckJveCB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTAgLSAxMSssIEVkZ2UgMTUgLSAxOCtcblx0XHQvLyBJRS9FZGdlIG1pc3JlcG9ydCBgZ2V0Q29tcHV0ZWRTdHlsZWAgb2YgdGFibGUgcm93cyB3aXRoIHdpZHRoL2hlaWdodFxuXHRcdC8vIHNldCBpbiBDU1Mgd2hpbGUgYG9mZnNldCpgIHByb3BlcnRpZXMgcmVwb3J0IGNvcnJlY3QgdmFsdWVzLlxuXHRcdC8vIEludGVyZXN0aW5nbHksIGluIHNvbWUgY2FzZXMgSUUgOSBkb2Vzbid0IHN1ZmZlciBmcm9tIHRoaXMgaXNzdWUuXG5cdFx0IXN1cHBvcnQucmVsaWFibGVUckRpbWVuc2lvbnMoKSAmJiBub2RlTmFtZSggZWxlbSwgXCJ0clwiICkgfHxcblxuXHRcdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHRcdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIC0gNC4zIG9ubHlcblx0XHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRcdCFwYXJzZUZsb2F0KCB2YWwgKSAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImlubGluZVwiICkgJiZcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlICYgY29ubmVjdGVkXG5cdFx0ZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblxuXHRcdGlzQm9yZGVyQm94ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHRcdC8vIFdoZXJlIGF2YWlsYWJsZSwgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGFwcHJveGltYXRlIGJvcmRlciBib3ggZGltZW5zaW9ucy5cblx0XHQvLyBXaGVyZSBub3QgYXZhaWxhYmxlIChlLmcuLCBTVkcpLCBhc3N1bWUgdW5yZWxpYWJsZSBib3gtc2l6aW5nIGFuZCBpbnRlcnByZXQgdGhlXG5cdFx0Ly8gcmV0cmlldmVkIHZhbHVlIGFzIGEgY29udGVudCBib3ggZGltZW5zaW9uLlxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBvZmZzZXRQcm9wIGluIGVsZW07XG5cdFx0aWYgKCB2YWx1ZUlzQm9yZGVyQm94ICkge1xuXHRcdFx0dmFsID0gZWxlbVsgb2Zmc2V0UHJvcCBdO1xuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBcIlwiIGFuZCBhdXRvXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gQWRqdXN0IGZvciB0aGUgZWxlbWVudCdzIGJveCBtb2RlbFxuXHRyZXR1cm4gKCB2YWwgK1xuXHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdGVsZW0sXG5cdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRleHRyYSB8fCAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICksXG5cdFx0XHR2YWx1ZUlzQm9yZGVyQm94LFxuXHRcdFx0c3R5bGVzLFxuXG5cdFx0XHQvLyBQcm92aWRlIHRoZSBjdXJyZW50IGNvbXB1dGVkIHNpemUgdG8gcmVxdWVzdCBzY3JvbGwgZ3V0dGVyIGNhbGN1bGF0aW9uIChnaC0zNTg5KVxuXHRcdFx0dmFsXG5cdFx0KVxuXHQpICsgXCJweFwiO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQWRkIGluIHN0eWxlIHByb3BlcnR5IGhvb2tzIGZvciBvdmVycmlkaW5nIHRoZSBkZWZhdWx0XG5cdC8vIGJlaGF2aW9yIG9mIGdldHRpbmcgYW5kIHNldHRpbmcgYSBzdHlsZSBwcm9wZXJ0eVxuXHRjc3NIb29rczoge1xuXHRcdG9wYWNpdHk6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHRydWUsXG5cdFx0XCJjb2x1bW5Db3VudFwiOiB0cnVlLFxuXHRcdFwiZmlsbE9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcImZsZXhHcm93XCI6IHRydWUsXG5cdFx0XCJmbGV4U2hyaW5rXCI6IHRydWUsXG5cdFx0XCJmb250V2VpZ2h0XCI6IHRydWUsXG5cdFx0XCJncmlkQXJlYVwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtbkVuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZENvbHVtblN0YXJ0XCI6IHRydWUsXG5cdFx0XCJncmlkUm93XCI6IHRydWUsXG5cdFx0XCJncmlkUm93RW5kXCI6IHRydWUsXG5cdFx0XCJncmlkUm93U3RhcnRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblxuXHRcdC8vIERvbid0IHNldCBzdHlsZXMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4IHx8ICFlbGVtLnN0eWxlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdHZhciByZXQsIHR5cGUsIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdC8vIFRoZSBpc0N1c3RvbVByb3AgY2hlY2sgY2FuIGJlIHJlbW92ZWQgaW4galF1ZXJ5IDQuMCB3aGVuIHdlIG9ubHkgYXV0by1hcHBlbmRcblx0XHRcdC8vIFwicHhcIiB0byBhIGZldyBoYXJkY29kZWQgdmFsdWVzLlxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdHZhbHVlICs9IHJldCAmJiByZXRbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIG9yaWdOYW1lIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGJhY2tncm91bmQtKiBwcm9wcyBhZmZlY3Qgb3JpZ2luYWwgY2xvbmUncyB2YWx1ZXNcblx0XHRcdGlmICggIXN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlICYmIHZhbHVlID09PSBcIlwiICYmIG5hbWUuaW5kZXhPZiggXCJiYWNrZ3JvdW5kXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fFxuXHRcdFx0XHQoIHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0aWYgKCBpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRcdFx0c3R5bGUuc2V0UHJvcGVydHkoIG5hbWUsIHZhbHVlICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgZmFsc2UsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE90aGVyd2lzZSBqdXN0IGdldCB0aGUgdmFsdWUgZnJvbSB0aGUgc3R5bGUgb2JqZWN0XG5cdFx0XHRyZXR1cm4gc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0Y3NzOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZXh0cmEsIHN0eWxlcyApIHtcblx0XHR2YXIgdmFsLCBudW0sIGhvb2tzLFxuXHRcdFx0b3JpZ05hbWUgPSBjYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIF9pLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0XHR2YXIgbWF0Y2hlcyxcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHRcdFx0Ly8gT25seSByZWFkIHN0eWxlcy5wb3NpdGlvbiBpZiB0aGUgdGVzdCBoYXMgYSBjaGFuY2UgdG8gZmFpbFxuXHRcdFx0XHQvLyB0byBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LlxuXHRcdFx0XHRzY3JvbGxib3hTaXplQnVnZ3kgPSAhc3VwcG9ydC5zY3JvbGxib3hTaXplKCkgJiZcblx0XHRcdFx0XHRzdHlsZXMucG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIixcblxuXHRcdFx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC0zOTkxKVxuXHRcdFx0XHRib3hTaXppbmdOZWVkZWQgPSBzY3JvbGxib3hTaXplQnVnZ3kgfHwgZXh0cmEsXG5cdFx0XHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSA/XG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdFx0aXNCb3JkZXJCb3gsXG5cdFx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0XHQpIDpcblx0XHRcdFx0XHQwO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB1bnJlbGlhYmxlIGJvcmRlci1ib3ggZGltZW5zaW9ucyBieSBjb21wYXJpbmcgb2Zmc2V0KiB0byBjb21wdXRlZCBhbmRcblx0XHRcdC8vIGZha2luZyBhIGNvbnRlbnQtYm94IHRvIGdldCBib3JkZXIgYW5kIHBhZGRpbmcgKGdoLTM2OTkpXG5cdFx0XHRpZiAoIGlzQm9yZGVyQm94ICYmIHNjcm9sbGJveFNpemVCdWdneSApIHtcblx0XHRcdFx0c3VidHJhY3QgLT0gTWF0aC5jZWlsKFxuXHRcdFx0XHRcdGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXSAtXG5cdFx0XHRcdFx0cGFyc2VGbG9hdCggc3R5bGVzWyBkaW1lbnNpb24gXSApIC1cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgXCJib3JkZXJcIiwgZmFsc2UsIHN0eWxlcyApIC1cblx0XHRcdFx0XHQwLjVcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSA9IHZhbHVlO1xuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5jc3MoIGVsZW0sIGRpbWVuc2lvbiApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApO1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LFxuXHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdHJldHVybiAoIHBhcnNlRmxvYXQoIGN1ckNTUyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIgKSApIHx8XG5cdFx0XHRcdGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCAtXG5cdFx0XHRcdFx0c3dhcCggZWxlbSwgeyBtYXJnaW5MZWZ0OiAwIH0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcblx0XHRcdFx0XHR9IClcblx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKCB7XG5cdHNsaWRlRG93bjogZ2VuRngoIFwic2hvd1wiICksXG5cdHNsaWRlVXA6IGdlbkZ4KCBcImhpZGVcIiApLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoIFwidG9nZ2xlXCIgKSxcblx0ZmFkZUluOiB7IG9wYWNpdHk6IFwic2hvd1wiIH0sXG5cdGZhZGVPdXQ6IHsgb3BhY2l0eTogXCJoaWRlXCIgfSxcblx0ZmFkZVRvZ2dsZTogeyBvcGFjaXR5OiBcInRvZ2dsZVwiIH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBwcm9wcyApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYW5pbWF0ZSggcHJvcHMsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHRpID0gMCxcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzO1xuXG5cdGZ4Tm93ID0gRGF0ZS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgcmV0LCBoYW5kbGUsXG5cdFx0XHRsb3dlcmNhc2VOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cblx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdGhhbmRsZSA9IGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXTtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IHJldDtcblx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0bG93ZXJjYXNlTmFtZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSBoYW5kbGU7XG5cdFx0fVxuXHRcdHJldHVybiByZXQ7XG5cdH07XG59ICk7XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmNsaWNrYWJsZSA9IC9eKD86YXxhcmVhKSQvaTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGVsZXRlIHRoaXNbIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSBdO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdO1xuXHR9LFxuXG5cdHByb3BIb29rczoge1xuXHRcdHRhYkluZGV4OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlXG5cdFx0XHRcdC8vIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxNDExMTYyMzMzNDcvaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0aWYgKCB0YWJpbmRleCApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGFyc2VJbnQoIHRhYmluZGV4LCAxMCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8XG5cdFx0XHRcdFx0cmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiZcblx0XHRcdFx0XHRlbGVtLmhyZWZcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fVxufSApO1xuXG4vLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcbi8vIEFjY2Vzc2luZyB0aGUgc2VsZWN0ZWRJbmRleCBwcm9wZXJ0eVxuLy8gZm9yY2VzIHRoZSBicm93c2VyIHRvIHJlc3BlY3Qgc2V0dGluZyBzZWxlY3RlZFxuLy8gb24gdGhlIG9wdGlvblxuLy8gVGhlIGdldHRlciBlbnN1cmVzIGEgZGVmYXVsdCBvcHRpb24gaXMgc2VsZWN0ZWRcbi8vIHdoZW4gaW4gYW4gb3B0Z3JvdXBcbi8vIGVzbGludCBydWxlIFwibm8tdW51c2VkLWV4cHJlc3Npb25zXCIgaXMgZGlzYWJsZWQgZm9yIHRoaXMgY29kZVxuLy8gc2luY2UgaXQgY29uc2lkZXJzIHN1Y2ggYWNjZXNzaW9ucyBub29wXG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICYmIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaCggW1xuXHRcInRhYkluZGV4XCIsXG5cdFwicmVhZE9ubHlcIixcblx0XCJtYXhMZW5ndGhcIixcblx0XCJjZWxsU3BhY2luZ1wiLFxuXHRcImNlbGxQYWRkaW5nXCIsXG5cdFwicm93U3BhblwiLFxuXHRcImNvbFNwYW5cIixcblx0XCJ1c2VNYXBcIixcblx0XCJmcmFtZUJvcmRlclwiLFxuXHRcImNvbnRlbnRFZGl0YWJsZVwiXG5dLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnByb3BGaXhbIHRoaXMudG9Mb3dlckNhc2UoKSBdID0gdGhpcztcbn0gKTtcblxuXG5cblxuXHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZSBhY2NvcmRpbmcgdG8gSFRNTCBzcGVjXG5cdC8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2UtYXNjaWktd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VzVG9BcnJheSggdmFsdWUgKSB7XG5cdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gdmFsdWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuYXR0ciggXCJjbGFzc1wiLCBcIlwiICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZSxcblx0XHRcdGlzVmFsaWRWYWx1ZSA9IHR5cGUgPT09IFwic3RyaW5nXCIgfHwgQXJyYXkuaXNBcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiBpc1ZhbGlkVmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoXG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggdGhpcywgaSwgZ2V0Q2xhc3MoIHRoaXMgKSwgc3RhdGVWYWwgKSxcblx0XHRcdFx0XHRzdGF0ZVZhbFxuXHRcdFx0XHQpO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNsYXNzTmFtZSwgaSwgc2VsZiwgY2xhc3NOYW1lcztcblxuXHRcdFx0aWYgKCBpc1ZhbGlkVmFsdWUgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0XHRcdHdoaWxlICggKCBjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGNsYXNzTmFtZSA9IGdldENsYXNzKCB0aGlzICk7XG5cdFx0XHRcdGlmICggY2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIGNsYXNzTmFtZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGVsZW1lbnQgaGFzIGEgY2xhc3MgbmFtZSBvciBpZiB3ZSdyZSBwYXNzZWQgYGZhbHNlYCxcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHRpZiAoIHRoaXMuc2V0QXR0cmlidXRlICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUgfHwgdmFsdWUgPT09IGZhbHNlID9cblx0XHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApIClbIGV2ZW50LnR5cGUgXSAmJlxuXHRcdFx0XHRkYXRhUHJpdi5nZXQoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBhY2NlcHREYXRhKCBjdXIgKSApIHtcblx0XHRcdFx0ZXZlbnQucmVzdWx0ID0gaGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0ZXZlbnQudHlwZSA9IHR5cGU7XG5cblx0XHQvLyBJZiBub2JvZHkgcHJldmVudGVkIHRoZSBkZWZhdWx0IGFjdGlvbiwgZG8gaXQgbm93XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSApIHtcblxuXHRcdFx0aWYgKCAoICFzcGVjaWFsLl9kZWZhdWx0IHx8XG5cdFx0XHRcdHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSApICYmXG5cdFx0XHRcdGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGV2ZW50LlxuXHRcdFx0XHQvLyBEb24ndCBkbyBkZWZhdWx0IGFjdGlvbnMgb24gd2luZG93LCB0aGF0J3Mgd2hlcmUgZ2xvYmFsIHZhcmlhYmxlcyBiZSAoIzYxNzApXG5cdFx0XHRcdGlmICggb250eXBlICYmIGlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcmUtdHJpZ2dlciBhbiBvbkZPTyBldmVudCB3aGVuIHdlIGNhbGwgaXRzIEZPTygpIG1ldGhvZFxuXHRcdFx0XHRcdHRtcCA9IGVsZW1bIG9udHlwZSBdO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IG51bGw7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUHJldmVudCByZS10cmlnZ2VyaW5nIG9mIHRoZSBzYW1lIGV2ZW50LCBzaW5jZSB3ZSBhbHJlYWR5IGJ1YmJsZWQgaXQgYWJvdmVcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdHlwZTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gdG1wO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0Ly8gUGlnZ3liYWNrIG9uIGEgZG9ub3IgZXZlbnQgdG8gc2ltdWxhdGUgYSBkaWZmZXJlbnQgb25lXG5cdC8vIFVzZWQgb25seSBmb3IgYGZvY3VzKGluIHwgb3V0KWAgZXZlbnRzXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQgKSB7XG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlXG5cdFx0XHR9XG5cdFx0KTtcblxuXHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBlLCBudWxsLCBlbGVtICk7XG5cdH1cblxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0gKTtcblx0fSxcblx0dHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBlbGVtID0gdGhpc1sgMCBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSApO1xuXG5cbi8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00NFxuLy8gRmlyZWZveCBkb2Vzbid0IGhhdmUgZm9jdXMoaW4gfCBvdXQpIGV2ZW50c1xuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02ODc3ODdcbi8vXG4vLyBTdXBwb3J0OiBDaHJvbWUgPD00OCAtIDQ5LCBTYWZhcmkgPD05LjAgLSA5LjFcbi8vIGZvY3VzKGluIHwgb3V0KSBldmVudHMgZmlyZSBhZnRlciBmb2N1cyAmIGJsdXIgZXZlbnRzLFxuLy8gd2hpY2ggaXMgc3BlYyB2aW9sYXRpb24gLSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1mb2N1c2V2ZW50LWV2ZW50LW9yZGVyXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ0OTg1N1xuaWYgKCAhc3VwcG9ydC5mb2N1c2luICkge1xuXHRqUXVlcnkuZWFjaCggeyBmb2N1czogXCJmb2N1c2luXCIsIGJsdXI6IFwiZm9jdXNvdXRcIiB9LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXG5cdFx0Ly8gQXR0YWNoIGEgc2luZ2xlIGNhcHR1cmluZyBoYW5kbGVyIG9uIHRoZSBkb2N1bWVudCB3aGlsZSBzb21lb25lIHdhbnRzIGZvY3VzaW4vZm9jdXNvdXRcblx0XHR2YXIgaGFuZGxlciA9IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggZml4LCBldmVudC50YXJnZXQsIGpRdWVyeS5ldmVudC5maXgoIGV2ZW50ICkgKTtcblx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIEhhbmRsZTogcmVndWxhciBub2RlcyAodmlhIGB0aGlzLm93bmVyRG9jdW1lbnRgKSwgd2luZG93XG5cdFx0XHRcdC8vICh2aWEgYHRoaXMuZG9jdW1lbnRgKSAmIGRvY3VtZW50ICh2aWEgYHRoaXNgKS5cblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IHsgZ3VpZDogRGF0ZS5ub3coKSB9O1xuXG52YXIgcnF1ZXJ5ID0gKCAvXFw/LyApO1xuXG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWwsIHBhcnNlckVycm9yRWxlbTtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge31cblxuXHRwYXJzZXJFcnJvckVsZW0gPSB4bWwgJiYgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKVsgMCBdO1xuXHRpZiAoICF4bWwgfHwgcGFyc2VyRXJyb3JFbGVtICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyAoXG5cdFx0XHRwYXJzZXJFcnJvckVsZW0gP1xuXHRcdFx0XHRqUXVlcnkubWFwKCBwYXJzZXJFcnJvckVsZW0uY2hpbGROb2RlcywgZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0XHRcdHJldHVybiBlbC50ZXh0Q29udGVudDtcblx0XHRcdFx0fSApLmpvaW4oIFwiXFxuXCIgKSA6XG5cdFx0XHRcdGRhdGFcblx0XHQpICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKS5tYXAoIGZ1bmN0aW9uKCBfaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxub3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZS5ndWlkKysgKSArXG5cdFx0XHRcdFx0dW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVzZSBhIG5vb3AgY29udmVydGVyIGZvciBtaXNzaW5nIHNjcmlwdCBidXQgbm90IGlmIGpzb25wXG5cdFx0XHRpZiAoICFpc1N1Y2Nlc3MgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwic2NyaXB0XCIsIHMuZGF0YVR5cGVzICkgPiAtMSAmJlxuXHRcdFx0XHRqUXVlcnkuaW5BcnJheSggXCJqc29uXCIsIHMuZGF0YVR5cGVzICkgPCAwICkge1xuXHRcdFx0XHRzLmNvbnZlcnRlcnNbIFwidGV4dCBzY3JpcHRcIiBdID0gZnVuY3Rpb24oKSB7fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggX2ksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHR2YXIgaTtcblx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0aWYgKCBpLnRvTG93ZXJDYXNlKCkgPT09IFwiY29udGVudC10eXBlXCIgKSB7XG5cdFx0XHRzLmNvbnRlbnRUeXBlID0gcy5oZWFkZXJzWyBpIF0gfHwgXCJcIjtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsLCBvcHRpb25zLCBkb2MgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucywgZG9jICk7XG5cdFx0fVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIG9yIGZvcmNlZC1ieS1hdHRycyByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gfHwgcy5zY3JpcHRBdHRycyApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIHMuc2NyaXB0QXR0cnMgfHwge30gKVxuXHRcdFx0XHRcdC5wcm9wKCB7IGNoYXJzZXQ6IHMuc2NyaXB0Q2hhcnNldCwgc3JjOiBzLnVybCB9IClcblx0XHRcdFx0XHQub24oIFwibG9hZCBlcnJvclwiLCBjYWxsYmFjayA9IGZ1bmN0aW9uKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHQucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayA9IG51bGw7XG5cdFx0XHRcdFx0XHRpZiAoIGV2dCApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIGV2dC50eXBlID09PSBcImVycm9yXCIgPyA0MDQgOiAyMDAsIGV2dC50eXBlICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHRbIDAgXSApO1xuXHRcdFx0fSxcblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UuZ3VpZCsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0gaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzWyBcInNjcmlwdCBqc29uXCIgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIEZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBJZiBwcmV2aW91cyB2YWx1ZSBkaWRuJ3QgZXhpc3QgLSByZW1vdmUgaXRcblx0XHRcdGlmICggb3ZlcndyaXR0ZW4gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0alF1ZXJ5KCB3aW5kb3cgKS5yZW1vdmVQcm9wKCBjYWxsYmFja05hbWUgKTtcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHJlc3RvcmUgcHJlZXhpc3RpbmcgdmFsdWVcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBvdmVyd3JpdHRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2F2ZSBiYWNrIGFzIGZyZWVcblx0XHRcdGlmICggc1sgY2FsbGJhY2tOYW1lIF0gKSB7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBTYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSApO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogU2FmYXJpIDggb25seVxuLy8gSW4gU2FmYXJpIDggZG9jdW1lbnRzIGNyZWF0ZWQgdmlhIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudFxuLy8gY29sbGFwc2Ugc2libGluZyBmb3JtczogdGhlIHNlY29uZCBvbmUgYmVjb21lcyBhIGNoaWxkIG9mIHRoZSBmaXJzdCBvbmUuXG4vLyBCZWNhdXNlIG9mIHRoYXQsIHRoaXMgc2VjdXJpdHkgbWVhc3VyZSBoYXMgdG8gYmUgZGlzYWJsZWQgaW4gU2FmYXJpIDguXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzM3XG5zdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCA9ICggZnVuY3Rpb24oKSB7XG5cdHZhciBib2R5ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICkuYm9keTtcblx0Ym9keS5pbm5lckhUTUwgPSBcIjxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+XCI7XG5cdHJldHVybiBib2R5LmNoaWxkTm9kZXMubGVuZ3RoID09PSAyO1xufSApKCk7XG5cblxuLy8gQXJndW1lbnQgXCJkYXRhXCIgc2hvdWxkIGJlIHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsXG4vLyBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0a2VlcFNjcmlwdHMgPSBjb250ZXh0O1xuXHRcdGNvbnRleHQgPSBmYWxzZTtcblx0fVxuXG5cdHZhciBiYXNlLCBwYXJzZWQsIHNjcmlwdHM7XG5cblx0aWYgKCAhY29udGV4dCApIHtcblxuXHRcdC8vIFN0b3Agc2NyaXB0cyBvciBpbmxpbmUgZXZlbnQgaGFuZGxlcnMgZnJvbSBiZWluZyBleGVjdXRlZCBpbW1lZGlhdGVseVxuXHRcdC8vIGJ5IHVzaW5nIGRvY3VtZW50LmltcGxlbWVudGF0aW9uXG5cdFx0aWYgKCBzdXBwb3J0LmNyZWF0ZUhUTUxEb2N1bWVudCApIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKTtcblxuXHRcdFx0Ly8gU2V0IHRoZSBiYXNlIGhyZWYgZm9yIHRoZSBjcmVhdGVkIGRvY3VtZW50XG5cdFx0XHQvLyBzbyBhbnkgcGFyc2VkIGVsZW1lbnRzIHdpdGggVVJMc1xuXHRcdFx0Ly8gYXJlIGJhc2VkIG9uIHRoZSBkb2N1bWVudCdzIFVSTCAoZ2gtMjk2NSlcblx0XHRcdGJhc2UgPSBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiYmFzZVwiICk7XG5cdFx0XHRiYXNlLmhyZWYgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmO1xuXHRcdFx0Y29udGV4dC5oZWFkLmFwcGVuZENoaWxkKCBiYXNlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRleHQgPSBkb2N1bWVudDtcblx0XHR9XG5cdH1cblxuXHRwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKTtcblx0c2NyaXB0cyA9ICFrZWVwU2NyaXB0cyAmJiBbXTtcblxuXHQvLyBTaW5nbGUgdGFnXG5cdGlmICggcGFyc2VkICkge1xuXHRcdHJldHVybiBbIGNvbnRleHQuY3JlYXRlRWxlbWVudCggcGFyc2VkWyAxIF0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0gYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLyoqXG4gKiBMb2FkIGEgdXJsIGludG8gYSBwYWdlXG4gKi9cbmpRdWVyeS5mbi5sb2FkID0gZnVuY3Rpb24oIHVybCwgcGFyYW1zLCBjYWxsYmFjayApIHtcblx0dmFyIHNlbGVjdG9yLCB0eXBlLCByZXNwb25zZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZiggXCIgXCIgKTtcblxuXHRpZiAoIG9mZiA+IC0xICkge1xuXHRcdHNlbGVjdG9yID0gc3RyaXBBbmRDb2xsYXBzZSggdXJsLnNsaWNlKCBvZmYgKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBpc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHRpb25zICkgKSB7XG5cblx0XHRcdC8vIFVzZSBqUXVlcnkuZXh0ZW5kIGhlcmUgdG8gYWxsb3cgbW9kaWZpY2F0aW9uIG9mIGNvb3JkaW5hdGVzIGFyZ3VtZW50IChnaC0xODQ4KVxuXHRcdFx0b3B0aW9ucyA9IG9wdGlvbnMuY2FsbCggZWxlbSwgaSwgalF1ZXJ5LmV4dGVuZCgge30sIGN1ck9mZnNldCApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHRpb25zLnRvcCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMudG9wID0gKCBvcHRpb25zLnRvcCAtIGN1ck9mZnNldC50b3AgKSArIGN1clRvcDtcblx0XHR9XG5cdFx0aWYgKCBvcHRpb25zLmxlZnQgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLmxlZnQgPSAoIG9wdGlvbnMubGVmdCAtIGN1ck9mZnNldC5sZWZ0ICkgKyBjdXJMZWZ0O1xuXHRcdH1cblxuXHRcdGlmICggXCJ1c2luZ1wiIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRvcHRpb25zLnVzaW5nLmNhbGwoIGVsZW0sIHByb3BzICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggX2ksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHtcblx0XHRwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLFxuXHRcdGNvbnRlbnQ6IHR5cGUsXG5cdFx0XCJcIjogXCJvdXRlclwiICsgbmFtZVxuXHR9LCBmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwiYWpheFN0YXJ0XCIsXG5cdFwiYWpheFN0b3BcIixcblx0XCJhamF4Q29tcGxldGVcIixcblx0XCJhamF4RXJyb3JcIixcblx0XCJhamF4U3VjY2Vzc1wiLFxuXHRcImFqYXhTZW5kXCJcbl0sIGZ1bmN0aW9uKCBfaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH0sXG5cblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKFxuXHQoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXG5cdFx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0XHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0XHR9O1xuXHR9XG4pO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcbi8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxudmFyIHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG4vLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcbi8vIGFyZ3VtZW50cy5cbi8vIGpRdWVyeS5wcm94eSBpcyBkZXByZWNhdGVkIHRvIHByb21vdGUgc3RhbmRhcmRzIChzcGVjaWZpY2FsbHkgRnVuY3Rpb24jYmluZClcbi8vIEhvd2V2ZXIsIGl0IGlzIG5vdCBzbGF0ZWQgZm9yIHJlbW92YWwgYW55IHRpbWUgc29vblxualF1ZXJ5LnByb3h5ID0gZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHR2YXIgdG1wLCBhcmdzLCBwcm94eTtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0Y29udGV4dCA9IGZuO1xuXHRcdGZuID0gdG1wO1xuXHR9XG5cblx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0Ly8gdGhpcyB0aHJvd3MgYSBUeXBlRXJyb3IsIGJ1dCB3ZSB3aWxsIGp1c3QgcmV0dXJuIHVuZGVmaW5lZC5cblx0aWYgKCAhaXNGdW5jdGlvbiggZm4gKSApIHtcblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0Ly8gU2ltdWxhdGVkIGJpbmRcblx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBmbi5hcHBseSggY29udGV4dCB8fCB0aGlzLCBhcmdzLmNvbmNhdCggc2xpY2UuY2FsbCggYXJndW1lbnRzICkgKSApO1xuXHR9O1xuXG5cdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRwcm94eS5ndWlkID0gZm4uZ3VpZCA9IGZuLmd1aWQgfHwgalF1ZXJ5Lmd1aWQrKztcblxuXHRyZXR1cm4gcHJveHk7XG59O1xuXG5qUXVlcnkuaG9sZFJlYWR5ID0gZnVuY3Rpb24oIGhvbGQgKSB7XG5cdGlmICggaG9sZCApIHtcblx0XHRqUXVlcnkucmVhZHlXYWl0Kys7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnJlYWR5KCB0cnVlICk7XG5cdH1cbn07XG5qUXVlcnkuaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5qUXVlcnkucGFyc2VKU09OID0gSlNPTi5wYXJzZTtcbmpRdWVyeS5ub2RlTmFtZSA9IG5vZGVOYW1lO1xualF1ZXJ5LmlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uO1xualF1ZXJ5LmlzV2luZG93ID0gaXNXaW5kb3c7XG5qUXVlcnkuY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xualF1ZXJ5LnR5cGUgPSB0b1R5cGU7XG5cbmpRdWVyeS5ub3cgPSBEYXRlLm5vdztcblxualF1ZXJ5LmlzTnVtZXJpYyA9IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0Ly8gQXMgb2YgalF1ZXJ5IDMuMCwgaXNOdW1lcmljIGlzIGxpbWl0ZWQgdG9cblx0Ly8gc3RyaW5ncyBhbmQgbnVtYmVycyAocHJpbWl0aXZlcyBvciBvYmplY3RzKVxuXHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHR2YXIgdHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblx0cmV0dXJuICggdHlwZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlID09PSBcInN0cmluZ1wiICkgJiZcblxuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdC8vIC4uLmJ1dCBtaXNpbnRlcnByZXRzIGxlYWRpbmctbnVtYmVyIHN0cmluZ3MsIHBhcnRpY3VsYXJseSBoZXggbGl0ZXJhbHMgKFwiMHguLi5cIilcblx0XHQvLyBzdWJ0cmFjdGlvbiBmb3JjZXMgaW5maW5pdGllcyB0byBOYU5cblx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG59O1xuXG5qUXVlcnkudHJpbSA9IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcIlwiIDpcblx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcbn07XG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0gKTtcbn1cblxuXG5cblxudmFyXG5cblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluIEFNRFxuLy8gKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdHdpbmRvdy5qUXVlcnkgPSB3aW5kb3cuJCA9IGpRdWVyeTtcbn1cblxuXG5cblxucmV0dXJuIGpRdWVyeTtcbn0gKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIpO1xuaWYoY29udGVudC5fX2VzTW9kdWxlKSBjb250ZW50ID0gY29udGVudC5kZWZhdWx0O1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjZlMWMzMTZjXCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmXCIpO1xuICAgICBpZihuZXdDb250ZW50Ll9fZXNNb2R1bGUpIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LmRlZmF1bHQ7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRkFRcXVlc3Rpb24udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NGIwNDQ5MWMmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiKTtcbmlmKGNvbnRlbnQuX19lc01vZHVsZSkgY29udGVudCA9IGNvbnRlbnQuZGVmYXVsdDtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCJiZTFmOTJkNlwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0ZBUXF1ZXN0aW9uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTRiMDQ0OTFjJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0ZBUXF1ZXN0aW9uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTRiMDQ0OTFjJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIik7XG4gICAgIGlmKG5ld0NvbnRlbnQuX19lc01vZHVsZSkgbmV3Q29udGVudCA9IG5ld0NvbnRlbnQuZGVmYXVsdDtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Gb290ZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9YTRlNzMzYWEmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiKTtcbmlmKGNvbnRlbnQuX19lc01vZHVsZSkgY29udGVudCA9IGNvbnRlbnQuZGVmYXVsdDtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI1NGNhYjllNVwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0Zvb3Rlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1hNGU3MzNhYSZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Gb290ZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9YTRlNzMzYWEmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiKTtcbiAgICAgaWYobmV3Q29udGVudC5fX2VzTW9kdWxlKSBuZXdDb250ZW50ID0gbmV3Q29udGVudC5kZWZhdWx0O1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0hlYWRlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD02MjgyNmJjNiZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIpO1xuaWYoY29udGVudC5fX2VzTW9kdWxlKSBjb250ZW50ID0gY29udGVudC5kZWZhdWx0O1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjA2MWY4ZDE5XCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vSGVhZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTYyODI2YmM2Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0hlYWRlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD02MjgyNmJjNiZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIpO1xuICAgICBpZihuZXdDb250ZW50Ll9fZXNNb2R1bGUpIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LmRlZmF1bHQ7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTmF2TWVudS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1mMmIxMzM3YyZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIpO1xuaWYoY29udGVudC5fX2VzTW9kdWxlKSBjb250ZW50ID0gY29udGVudC5kZWZhdWx0O1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjIyN2U2MWRhXCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTmF2TWVudS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1mMmIxMzM3YyZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9OYXZNZW51LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWYyYjEzMzdjJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIik7XG4gICAgIGlmKG5ld0NvbnRlbnQuX19lc01vZHVsZSkgbmV3Q29udGVudCA9IG5ld0NvbnRlbnQuZGVmYXVsdDtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9UZWFtTWVtYmVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTE3ZTNiNWU3Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIik7XG5pZihjb250ZW50Ll9fZXNNb2R1bGUpIGNvbnRlbnQgPSBjb250ZW50LmRlZmF1bHQ7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNGYxMzgzYTlcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9UZWFtTWVtYmVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTE3ZTNiNWU3Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1RlYW1NZW1iZXIudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MTdlM2I1ZTcmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiKTtcbiAgICAgaWYobmV3Q29udGVudC5fX2VzTW9kdWxlKSBuZXdDb250ZW50ID0gbmV3Q29udGVudC5kZWZhdWx0O1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0ZBUS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1jY2I1MWRmYyZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIpO1xuaWYoY29udGVudC5fX2VzTW9kdWxlKSBjb250ZW50ID0gY29udGVudC5kZWZhdWx0O1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjM5NjJmZTZlXCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRkFRLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWNjYjUxZGZjJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0ZBUS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1jY2I1MWRmYyZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIpO1xuICAgICBpZihuZXdDb250ZW50Ll9fZXNNb2R1bGUpIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LmRlZmF1bHQ7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGFuZGluZy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD03N2ZiNzE4MyZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIpO1xuaWYoY29udGVudC5fX2VzTW9kdWxlKSBjb250ZW50ID0gY29udGVudC5kZWZhdWx0O1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjQyNzMyZjFkXCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTGFuZGluZy52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD03N2ZiNzE4MyZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9MYW5kaW5nLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTc3ZmI3MTgzJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIik7XG4gICAgIGlmKG5ld0NvbnRlbnQuX19lc01vZHVsZSkgbmV3Q29udGVudCA9IG5ld0NvbnRlbnQuZGVmYXVsdDtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9SYXJpdHkudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ZWQzMjI4MjImbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiKTtcbmlmKGNvbnRlbnQuX19lc01vZHVsZSkgY29udGVudCA9IGNvbnRlbnQuZGVmYXVsdDtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCIxMGMzMjdjNFwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1Jhcml0eS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1lZDMyMjgyMiZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9SYXJpdHkudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ZWQzMjI4MjImbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiKTtcbiAgICAgaWYobmV3Q29udGVudC5fX2VzTW9kdWxlKSBuZXdDb250ZW50ID0gbmV3Q29udGVudC5kZWZhdWx0O1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JvYWRtYXAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ZjA2YTIxYjAmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiKTtcbmlmKGNvbnRlbnQuX19lc01vZHVsZSkgY29udGVudCA9IGNvbnRlbnQuZGVmYXVsdDtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI0MmFiMjBmNlwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JvYWRtYXAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ZjA2YTIxYjAmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vUm9hZG1hcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1mMDZhMjFiMCZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIpO1xuICAgICBpZihuZXdDb250ZW50Ll9fZXNNb2R1bGUpIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LmRlZmF1bHQ7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vVGVhbS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD00ZjQzZDJiZSZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIpO1xuaWYoY29udGVudC5fX2VzTW9kdWxlKSBjb250ZW50ID0gY29udGVudC5kZWZhdWx0O1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcImNjNTU4MjdjXCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vVGVhbS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD00ZjQzZDJiZSZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9UZWFtLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTRmNDNkMmJlJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIik7XG4gICAgIGlmKG5ld0NvbnRlbnQuX19lc01vZHVsZSkgbmV3Q29udGVudCA9IG5ld0NvbnRlbnQuZGVmYXVsdDtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59IiwiLyoqXG4gKiBUcmFuc2xhdGVzIHRoZSBsaXN0IGZvcm1hdCBwcm9kdWNlZCBieSBjc3MtbG9hZGVyIGludG8gc29tZXRoaW5nXG4gKiBlYXNpZXIgdG8gbWFuaXB1bGF0ZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChwYXJlbnRJZCwgbGlzdCkge1xuICB2YXIgc3R5bGVzID0gW11cbiAgdmFyIG5ld1N0eWxlcyA9IHt9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXVxuICAgIHZhciBpZCA9IGl0ZW1bMF1cbiAgICB2YXIgY3NzID0gaXRlbVsxXVxuICAgIHZhciBtZWRpYSA9IGl0ZW1bMl1cbiAgICB2YXIgc291cmNlTWFwID0gaXRlbVszXVxuICAgIHZhciBwYXJ0ID0ge1xuICAgICAgaWQ6IHBhcmVudElkICsgJzonICsgaSxcbiAgICAgIGNzczogY3NzLFxuICAgICAgbWVkaWE6IG1lZGlhLFxuICAgICAgc291cmNlTWFwOiBzb3VyY2VNYXBcbiAgICB9XG4gICAgaWYgKCFuZXdTdHlsZXNbaWRdKSB7XG4gICAgICBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0geyBpZDogaWQsIHBhcnRzOiBbcGFydF0gfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpXG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZXNcbn1cbiIsIi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiAgTW9kaWZpZWQgYnkgRXZhbiBZb3UgQHl5eDk5MDgwM1xuKi9cblxuaW1wb3J0IGxpc3RUb1N0eWxlcyBmcm9tICcuL2xpc3RUb1N0eWxlcydcblxudmFyIGhhc0RvY3VtZW50ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuXG5pZiAodHlwZW9mIERFQlVHICE9PSAndW5kZWZpbmVkJyAmJiBERUJVRykge1xuICBpZiAoIWhhc0RvY3VtZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2dWUtc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQuICcgK1xuICAgIFwiVXNlIHsgdGFyZ2V0OiAnbm9kZScgfSBpbiB5b3VyIFdlYnBhY2sgY29uZmlnIHRvIGluZGljYXRlIGEgc2VydmVyLXJlbmRlcmluZyBlbnZpcm9ubWVudC5cIlxuICApIH1cbn1cblxuLypcbnR5cGUgU3R5bGVPYmplY3QgPSB7XG4gIGlkOiBudW1iZXI7XG4gIHBhcnRzOiBBcnJheTxTdHlsZU9iamVjdFBhcnQ+XG59XG5cbnR5cGUgU3R5bGVPYmplY3RQYXJ0ID0ge1xuICBjc3M6IHN0cmluZztcbiAgbWVkaWE6IHN0cmluZztcbiAgc291cmNlTWFwOiA/c3RyaW5nXG59XG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7LypcbiAgW2lkOiBudW1iZXJdOiB7XG4gICAgaWQ6IG51bWJlcixcbiAgICByZWZzOiBudW1iZXIsXG4gICAgcGFydHM6IEFycmF5PChvYmo/OiBTdHlsZU9iamVjdFBhcnQpID0+IHZvaWQ+XG4gIH1cbiovfVxuXG52YXIgaGVhZCA9IGhhc0RvY3VtZW50ICYmIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0pXG52YXIgc2luZ2xldG9uRWxlbWVudCA9IG51bGxcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMFxudmFyIGlzUHJvZHVjdGlvbiA9IGZhbHNlXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9XG52YXIgb3B0aW9ucyA9IG51bGxcbnZhciBzc3JJZEtleSA9ICdkYXRhLXZ1ZS1zc3ItaWQnXG5cbi8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxudmFyIGlzT2xkSUUgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvbXNpZSBbNi05XVxcYi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZFN0eWxlc0NsaWVudCAocGFyZW50SWQsIGxpc3QsIF9pc1Byb2R1Y3Rpb24sIF9vcHRpb25zKSB7XG4gIGlzUHJvZHVjdGlvbiA9IF9pc1Byb2R1Y3Rpb25cblxuICBvcHRpb25zID0gX29wdGlvbnMgfHwge31cblxuICB2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKHBhcmVudElkLCBsaXN0KVxuICBhZGRTdHlsZXNUb0RvbShzdHlsZXMpXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuICAgIHZhciBtYXlSZW1vdmUgPSBbXVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXVxuICAgICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF1cbiAgICAgIGRvbVN0eWxlLnJlZnMtLVxuICAgICAgbWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpXG4gICAgfVxuICAgIGlmIChuZXdMaXN0KSB7XG4gICAgICBzdHlsZXMgPSBsaXN0VG9TdHlsZXMocGFyZW50SWQsIG5ld0xpc3QpXG4gICAgICBhZGRTdHlsZXNUb0RvbShzdHlsZXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlcyA9IFtdXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV1cbiAgICAgIGlmIChkb21TdHlsZS5yZWZzID09PSAwKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXSgpXG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzIC8qIEFycmF5PFN0eWxlT2JqZWN0PiAqLykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gc3R5bGVzW2ldXG4gICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF1cbiAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgIGRvbVN0eWxlLnJlZnMrK1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKVxuICAgICAgfVxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSkpXG4gICAgICB9XG4gICAgICBpZiAoZG9tU3R5bGUucGFydHMubGVuZ3RoID4gaXRlbS5wYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMubGVuZ3RoID0gaXRlbS5wYXJ0cy5sZW5ndGhcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnRzID0gW11cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0pKVxuICAgICAgfVxuICAgICAgc3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7IGlkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHMgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKCkge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKVxuICBzdHlsZUVsZW1lbnQudHlwZSA9ICd0ZXh0L2NzcydcbiAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpXG4gIHJldHVybiBzdHlsZUVsZW1lbnRcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiAvKiBTdHlsZU9iamVjdFBhcnQgKi8pIHtcbiAgdmFyIHVwZGF0ZSwgcmVtb3ZlXG4gIHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzdHlsZVsnICsgc3NySWRLZXkgKyAnfj1cIicgKyBvYmouaWQgKyAnXCJdJylcblxuICBpZiAoc3R5bGVFbGVtZW50KSB7XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgLy8gaGFzIFNTUiBzdHlsZXMgYW5kIGluIHByb2R1Y3Rpb24gbW9kZS5cbiAgICAgIC8vIHNpbXBseSBkbyBub3RoaW5nLlxuICAgICAgcmV0dXJuIG5vb3BcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaGFzIFNTUiBzdHlsZXMgYnV0IGluIGRldiBtb2RlLlxuICAgICAgLy8gZm9yIHNvbWUgcmVhc29uIENocm9tZSBjYW4ndCBoYW5kbGUgc291cmNlIG1hcCBpbiBzZXJ2ZXItcmVuZGVyZWRcbiAgICAgIC8vIHN0eWxlIHRhZ3MgLSBzb3VyY2UgbWFwcyBpbiA8c3R5bGU+IG9ubHkgd29ya3MgaWYgdGhlIHN0eWxlIHRhZyBpc1xuICAgICAgLy8gY3JlYXRlZCBhbmQgaW5zZXJ0ZWQgZHluYW1pY2FsbHkuIFNvIHdlIHJlbW92ZSB0aGUgc2VydmVyIHJlbmRlcmVkXG4gICAgICAvLyBzdHlsZXMgYW5kIGluamVjdCBuZXcgb25lcy5cbiAgICAgIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudClcbiAgICB9XG4gIH1cblxuICBpZiAoaXNPbGRJRSkge1xuICAgIC8vIHVzZSBzaW5nbGV0b24gbW9kZSBmb3IgSUU5LlxuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrXG4gICAgc3R5bGVFbGVtZW50ID0gc2luZ2xldG9uRWxlbWVudCB8fCAoc2luZ2xldG9uRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudCgpKVxuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIGZhbHNlKVxuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIHRydWUpXG4gIH0gZWxzZSB7XG4gICAgLy8gdXNlIG11bHRpLXN0eWxlLXRhZyBtb2RlIGluIGFsbCBvdGhlciBjYXNlc1xuICAgIHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudCgpXG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudClcbiAgICByZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKG9iailcblxuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaiAvKiBTdHlsZU9iamVjdFBhcnQgKi8pIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuICAgICAgICAgIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG4gICAgICAgICAgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpXG4gICAgfVxuICB9XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXVxuXG4gIHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJylcbiAgfVxufSkoKVxuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZUVsZW1lbnQsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmouY3NzXG5cbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpXG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpXG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZUVsZW1lbnQuY2hpbGROb2Rlc1xuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKVxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGVFbGVtZW50Lmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSlcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGNzc05vZGUpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlRWxlbWVudCwgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzXG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcFxuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpXG4gIH1cbiAgaWYgKG9wdGlvbnMuc3NySWQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKHNzcklkS2V5LCBvYmouaWQpXG4gIH1cblxuICBpZiAoc291cmNlTWFwKSB7XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kZXZ0b29scy9kb2NzL2phdmFzY3JpcHQtZGVidWdnaW5nXG4gICAgLy8gdGhpcyBtYWtlcyBzb3VyY2UgbWFwcyBpbnNpZGUgc3R5bGUgdGFncyB3b3JrIHByb3Blcmx5IGluIENocm9tZVxuICAgIGNzcyArPSAnXFxuLyojIHNvdXJjZVVSTD0nICsgc291cmNlTWFwLnNvdXJjZXNbMF0gKyAnICovJ1xuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG4gICAgY3NzICs9ICdcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LCcgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgJyAqLydcbiAgfVxuXG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3NcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZClcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpXG4gIH1cbn1cbiIsInZhciBtYXAgPSB7XG5cdFwiLi9Db2RlX05ld19Sb21hbl9OZXJkX0ZvbnRfQ29tcGxldGVfTW9uby5vdGZcIjogNzEyLFxuXHRcIi4vQ29kZV9OZXdfUm9tYW5fTmVyZF9Gb250X0NvbXBsZXRlX01vbm8udHRmXCI6IDYzNixcblx0XCIuL0pldEJyYWlucyBNb25vIFJlZ3VsYXIgTmVyZCBGb250IENvbXBsZXRlIE1vbm8gV2luZG93cyBDb21wYXRpYmxlLnR0ZlwiOiAwLFxuXHRcIi4vTWlrZS5qcGdcIjogNTUxLFxuXHRcIi4vTm9vYnkuanBnXCI6IDYxNFxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDE2MDsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ4MjY6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCIvKiFcbiAqIFZ1ZS5qcyB2Mi42LjE0XG4gKiAoYykgMjAxNC0yMDIxIEV2YW4gWW91XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbi8qICAqL1xuXG52YXIgZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuLy8gVGhlc2UgaGVscGVycyBwcm9kdWNlIGJldHRlciBWTSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4vLyBleHBsaWNpdG5lc3MgYW5kIGZ1bmN0aW9uIGlubGluaW5nLlxuZnVuY3Rpb24gaXNVbmRlZiAodikge1xuICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNEZWYgKHYpIHtcbiAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzVHJ1ZSAodikge1xuICByZXR1cm4gdiA9PT0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBpc0ZhbHNlICh2KSB7XG4gIHJldHVybiB2ID09PSBmYWxzZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZS5cbiAqL1xuZnVuY3Rpb24gaXNQcmltaXRpdmUgKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbidcbiAgKVxufVxuXG4vKipcbiAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZVxuICogaXMgYSBKU09OLWNvbXBsaWFudCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHJhdyB0eXBlIHN0cmluZyBvZiBhIHZhbHVlLCBlLmcuLCBbb2JqZWN0IE9iamVjdF0uXG4gKi9cbnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiB0b1Jhd1R5cGUgKHZhbHVlKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpXG59XG5cbi8qKlxuICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJ1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cCAodikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsIGlzIGEgdmFsaWQgYXJyYXkgaW5kZXguXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRBcnJheUluZGV4ICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KFN0cmluZyh2YWwpKTtcbiAgcmV0dXJuIG4gPj0gMCAmJiBNYXRoLmZsb29yKG4pID09PSBuICYmIGlzRmluaXRlKHZhbClcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIChcbiAgICBpc0RlZih2YWwpICYmXG4gICAgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHZhbC5jYXRjaCA9PT0gJ2Z1bmN0aW9uJ1xuICApXG59XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogQXJyYXkuaXNBcnJheSh2YWwpIHx8IChpc1BsYWluT2JqZWN0KHZhbCkgJiYgdmFsLnRvU3RyaW5nID09PSBfdG9TdHJpbmcpXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcbiAgICAgIDogU3RyaW5nKHZhbClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGlucHV0IHZhbHVlIHRvIGEgbnVtYmVyIGZvciBwZXJzaXN0ZW5jZS5cbiAqIElmIHRoZSBjb252ZXJzaW9uIGZhaWxzLCByZXR1cm4gb3JpZ2luYWwgc3RyaW5nLlxuICovXG5mdW5jdGlvbiB0b051bWJlciAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuXG59XG5cbi8qKlxuICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gKiBpcyBpbiB0aGF0IG1hcC5cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcCAoXG4gIHN0cixcbiAgZXhwZWN0c0xvd2VyQ2FzZVxuKSB7XG4gIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbGlzdCA9IHN0ci5zcGxpdCgnLCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBleHBlY3RzTG93ZXJDYXNlXG4gICAgPyBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOyB9XG4gICAgOiBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsXTsgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLlxuICovXG52YXIgaXNCdWlsdEluVGFnID0gbWFrZU1hcCgnc2xvdCxjb21wb25lbnQnLCB0cnVlKTtcblxuLyoqXG4gKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gKi9cbnZhciBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5LlxuICovXG5mdW5jdGlvbiByZW1vdmUgKGFyciwgaXRlbSkge1xuICBpZiAoYXJyLmxlbmd0aCkge1xuICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGFuIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXG4gIH0pXG59XG5cbi8qKlxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG59KTtcblxuLyoqXG4gKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQsXG4gKiBlLmcuLCBQaGFudG9tSlMgMS54LiBUZWNobmljYWxseSwgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmVcbiAqIHNpbmNlIG5hdGl2ZSBiaW5kIGlzIG5vdyBwZXJmb3JtYW50IGVub3VnaCBpbiBtb3N0IGJyb3dzZXJzLlxuICogQnV0IHJlbW92aW5nIGl0IHdvdWxkIG1lYW4gYnJlYWtpbmcgY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpblxuICogUGhhbnRvbUpTIDEueCwgc28gdGhpcyBtdXN0IGJlIGtlcHQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIHBvbHlmaWxsQmluZCAoZm4sIGN0eCkge1xuICBmdW5jdGlvbiBib3VuZEZuIChhKSB7XG4gICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHJldHVybiBsXG4gICAgICA/IGwgPiAxXG4gICAgICAgID8gZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpXG4gICAgICAgIDogZm4uY2FsbChjdHgsIGEpXG4gICAgICA6IGZuLmNhbGwoY3R4KVxuICB9XG5cbiAgYm91bmRGbi5fbGVuZ3RoID0gZm4ubGVuZ3RoO1xuICByZXR1cm4gYm91bmRGblxufVxuXG5mdW5jdGlvbiBuYXRpdmVCaW5kIChmbiwgY3R4KSB7XG4gIHJldHVybiBmbi5iaW5kKGN0eClcbn1cblxudmFyIGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuICA/IG5hdGl2ZUJpbmRcbiAgOiBwb2x5ZmlsbEJpbmQ7XG5cbi8qKlxuICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkgKGxpc3QsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodG8sIF9mcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgIHRvW2tleV0gPSBfZnJvbVtrZXldO1xuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIE1lcmdlIGFuIEFycmF5IG9mIE9iamVjdHMgaW50byBhIHNpbmdsZSBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHRvT2JqZWN0IChhcnIpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJbaV0pIHtcbiAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBQZXJmb3JtIG5vIG9wZXJhdGlvbi5cbiAqIFN0dWJiaW5nIGFyZ3MgdG8gbWFrZSBGbG93IGhhcHB5IHdpdGhvdXQgbGVhdmluZyB1c2VsZXNzIHRyYW5zcGlsZWQgY29kZVxuICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pLlxuICovXG5mdW5jdGlvbiBub29wIChhLCBiLCBjKSB7fVxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbnZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFJldHVybiB0aGUgc2FtZSB2YWx1ZS5cbiAqL1xudmFyIGlkZW50aXR5ID0gZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH07XG5cbi8qKlxuICogQ2hlY2sgaWYgdHdvIHZhbHVlcyBhcmUgbG9vc2VseSBlcXVhbCAtIHRoYXQgaXMsXG4gKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/XG4gKi9cbmZ1bmN0aW9uIGxvb3NlRXF1YWwgKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QoYSk7XG4gIHZhciBpc09iamVjdEIgPSBpc09iamVjdChiKTtcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGlzQXJyYXlBID0gQXJyYXkuaXNBcnJheShhKTtcbiAgICAgIHZhciBpc0FycmF5QiA9IEFycmF5LmlzQXJyYXkoYik7XG4gICAgICBpZiAoaXNBcnJheUEgJiYgaXNBcnJheUIpIHtcbiAgICAgICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIERhdGUgJiYgYiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKVxuICAgICAgfSBlbHNlIGlmICghaXNBcnJheUEgJiYgIWlzQXJyYXlCKSB7XG4gICAgICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuICAgICAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhiKTtcbiAgICAgICAgcmV0dXJuIGtleXNBLmxlbmd0aCA9PT0ga2V5c0IubGVuZ3RoICYmIGtleXNBLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGZpcnN0IGluZGV4IGF0IHdoaWNoIGEgbG9vc2VseSBlcXVhbCB2YWx1ZSBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBhcnJheSAoaWYgdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QsIHRoZSBhcnJheSBtdXN0XG4gKiBjb250YWluIGFuIG9iamVjdCBvZiB0aGUgc2FtZSBzaGFwZSksIG9yIC0xIGlmIGl0IGlzIG5vdCBwcmVzZW50LlxuICovXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICovXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgU1NSX0FUVFIgPSAnZGF0YS1zZXJ2ZXItcmVuZGVyZWQnO1xuXG52YXIgQVNTRVRfVFlQRVMgPSBbXG4gICdjb21wb25lbnQnLFxuICAnZGlyZWN0aXZlJyxcbiAgJ2ZpbHRlcidcbl07XG5cbnZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbXG4gICdiZWZvcmVDcmVhdGUnLFxuICAnY3JlYXRlZCcsXG4gICdiZWZvcmVNb3VudCcsXG4gICdtb3VudGVkJyxcbiAgJ2JlZm9yZVVwZGF0ZScsXG4gICd1cGRhdGVkJyxcbiAgJ2JlZm9yZURlc3Ryb3knLFxuICAnZGVzdHJveWVkJyxcbiAgJ2FjdGl2YXRlZCcsXG4gICdkZWFjdGl2YXRlZCcsXG4gICdlcnJvckNhcHR1cmVkJyxcbiAgJ3NlcnZlclByZWZldGNoJ1xuXTtcblxuLyogICovXG5cblxuXG52YXIgY29uZmlnID0gKHtcbiAgLyoqXG4gICAqIE9wdGlvbiBtZXJnZSBzdHJhdGVnaWVzICh1c2VkIGluIGNvcmUvdXRpbC9vcHRpb25zKVxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIG9wdGlvbk1lcmdlU3RyYXRlZ2llczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogV2hldGhlciB0byBzdXBwcmVzcyB3YXJuaW5ncy5cbiAgICovXG4gIHNpbGVudDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFNob3cgcHJvZHVjdGlvbiBtb2RlIHRpcCBtZXNzYWdlIG9uIGJvb3Q/XG4gICAqL1xuICBwcm9kdWN0aW9uVGlwOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBkZXZ0b29sc1xuICAgKi9cbiAgZGV2dG9vbHM6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcmVjb3JkIHBlcmZcbiAgICovXG4gIHBlcmZvcm1hbmNlOiBmYWxzZSxcblxuICAvKipcbiAgICogRXJyb3IgaGFuZGxlciBmb3Igd2F0Y2hlciBlcnJvcnNcbiAgICovXG4gIGVycm9ySGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogV2FybiBoYW5kbGVyIGZvciB3YXRjaGVyIHdhcm5zXG4gICAqL1xuICB3YXJuSGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogSWdub3JlIGNlcnRhaW4gY3VzdG9tIGVsZW1lbnRzXG4gICAqL1xuICBpZ25vcmVkRWxlbWVudHM6IFtdLFxuXG4gIC8qKlxuICAgKiBDdXN0b20gdXNlciBrZXkgYWxpYXNlcyBmb3Igdi1vblxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGtleUNvZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSByZWdpc3RlcmVkIGFzIGFcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZFRhZzogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSB1c2VkIGFzIGEgY29tcG9uZW50XG4gICAqIHByb3AuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkQXR0cjogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgaXNVbmtub3duRWxlbWVudDogbm8sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZXNwYWNlIG9mIGFuIGVsZW1lbnRcbiAgICovXG4gIGdldFRhZ05hbWVzcGFjZTogbm9vcCxcblxuICAvKipcbiAgICogUGFyc2UgdGhlIHJlYWwgdGFnIG5hbWUgZm9yIHRoZSBzcGVjaWZpYyBwbGF0Zm9ybS5cbiAgICovXG4gIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgbXVzdFVzZVByb3A6IG5vLFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIHVwZGF0ZXMgYXN5bmNocm9ub3VzbHkuIEludGVuZGVkIHRvIGJlIHVzZWQgYnkgVnVlIFRlc3QgVXRpbHNcbiAgICogVGhpcyB3aWxsIHNpZ25pZmljYW50bHkgcmVkdWNlIHBlcmZvcm1hbmNlIGlmIHNldCB0byBmYWxzZS5cbiAgICovXG4gIGFzeW5jOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciBsZWdhY3kgcmVhc29uc1xuICAgKi9cbiAgX2xpZmVjeWNsZUhvb2tzOiBMSUZFQ1lDTEVfSE9PS1Ncbn0pO1xuXG4vKiAgKi9cblxuLyoqXG4gKiB1bmljb2RlIGxldHRlcnMgdXNlZCBmb3IgcGFyc2luZyBodG1sIHRhZ3MsIGNvbXBvbmVudCBuYW1lcyBhbmQgcHJvcGVydHkgcGF0aHMuXG4gKiB1c2luZyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUzL3NlbWFudGljcy1zY3JpcHRpbmcuaHRtbCNwb3RlbnRpYWxjdXN0b21lbGVtZW50bmFtZVxuICogc2tpcHBpbmcgXFx1MTAwMDAtXFx1RUZGRkYgZHVlIHRvIGl0IGZyZWV6aW5nIHVwIFBoYW50b21KU1xuICovXG52YXIgdW5pY29kZVJlZ0V4cCA9IC9hLXpBLVpcXHUwMEI3XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjAzRi1cXHUyMDQwXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZELztcblxuLyoqXG4gKiBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCAkIG9yIF9cbiAqL1xuZnVuY3Rpb24gaXNSZXNlcnZlZCAoc3RyKSB7XG4gIHZhciBjID0gKHN0ciArICcnKS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gYyA9PT0gMHgyNCB8fCBjID09PSAweDVGXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGRlZiAob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICB2YWx1ZTogdmFsLFxuICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2Ugc2ltcGxlIHBhdGguXG4gKi9cbnZhciBiYWlsUkUgPSBuZXcgUmVnRXhwKChcIlteXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCIuJF9cXFxcZF1cIikpO1xuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIGlmIChiYWlsUkUudGVzdChwYXRoKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIW9iaikgeyByZXR1cm4gfVxuICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIG9ialxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBjYW4gd2UgdXNlIF9fcHJvdG9fXz9cbnZhciBoYXNQcm90byA9ICdfX3Byb3RvX18nIGluIHt9O1xuXG4vLyBCcm93c2VyIGVudmlyb25tZW50IHNuaWZmaW5nXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgaW5XZWV4ID0gdHlwZW9mIFdYRW52aXJvbm1lbnQgIT09ICd1bmRlZmluZWQnICYmICEhV1hFbnZpcm9ubWVudC5wbGF0Zm9ybTtcbnZhciB3ZWV4UGxhdGZvcm0gPSBpbldlZXggJiYgV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gKFVBICYmIFVBLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDApIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdhbmRyb2lkJyk7XG52YXIgaXNJT1MgPSAoVUEgJiYgL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KFVBKSkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2lvcycpO1xudmFyIGlzQ2hyb21lID0gVUEgJiYgL2Nocm9tZVxcL1xcZCsvLnRlc3QoVUEpICYmICFpc0VkZ2U7XG52YXIgaXNQaGFudG9tSlMgPSBVQSAmJiAvcGhhbnRvbWpzLy50ZXN0KFVBKTtcbnZhciBpc0ZGID0gVUEgJiYgVUEubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKTtcblxuLy8gRmlyZWZveCBoYXMgYSBcIndhdGNoXCIgZnVuY3Rpb24gb24gT2JqZWN0LnByb3RvdHlwZS4uLlxudmFyIG5hdGl2ZVdhdGNoID0gKHt9KS53YXRjaDtcblxudmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuaWYgKGluQnJvd3Nlcikge1xuICB0cnkge1xuICAgIHZhciBvcHRzID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdHMsICdwYXNzaXZlJywgKHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbnZhciBfaXNTZXJ2ZXI7XG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5Ccm93c2VyICYmICFpbldlZXggJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGRldGVjdCBwcmVzZW5jZSBvZiB2dWUtc2VydmVyLXJlbmRlcmVyIGFuZCBhdm9pZFxuICAgICAgLy8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xuICAgICAgX2lzU2VydmVyID0gZ2xvYmFsWydwcm9jZXNzJ10gJiYgZ2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlYgPT09ICdzZXJ2ZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaXNTZXJ2ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9pc1NlcnZlclxufTtcblxuLy8gZGV0ZWN0IGRldnRvb2xzXG52YXIgZGV2dG9vbHMgPSBpbkJyb3dzZXIgJiYgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBpc05hdGl2ZSAoQ3Rvcikge1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KEN0b3IudG9TdHJpbmcoKSlcbn1cblxudmFyIGhhc1N5bWJvbCA9XG4gIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFN5bWJvbCkgJiZcbiAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFJlZmxlY3Qub3duS2V5cyk7XG5cbnZhciBfU2V0O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovIC8vICRmbG93LWRpc2FibGUtbGluZVxuaWYgKHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFNldCkpIHtcbiAgLy8gdXNlIG5hdGl2ZSBTZXQgd2hlbiBhdmFpbGFibGUuXG4gIF9TZXQgPSBTZXQ7XG59IGVsc2Uge1xuICAvLyBhIG5vbi1zdGFuZGFyZCBTZXQgcG9seWZpbGwgdGhhdCBvbmx5IHdvcmtzIHdpdGggcHJpbWl0aXZlIGtleXMuXG4gIF9TZXQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXQgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZVxuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGtleSkge1xuICAgICAgdGhpcy5zZXRba2V5XSA9IHRydWU7XG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2V0O1xuICB9KCkpO1xufVxuXG4vKiAgKi9cblxudmFyIHdhcm4gPSBub29wO1xudmFyIHRpcCA9IG5vb3A7XG52YXIgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IChub29wKTsgLy8gd29yayBhcm91bmQgZmxvdyBjaGVja1xudmFyIGZvcm1hdENvbXBvbmVudE5hbWUgPSAobm9vcCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBoYXNDb25zb2xlID0gdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnO1xuICB2YXIgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFxcdykvZztcbiAgdmFyIGNsYXNzaWZ5ID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoY2xhc3NpZnlSRSwgZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudG9VcHBlckNhc2UoKTsgfSlcbiAgICAucmVwbGFjZSgvWy1fXS9nLCAnJyk7IH07XG5cbiAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgdmFyIHRyYWNlID0gdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnO1xuXG4gICAgaWYgKGNvbmZpZy53YXJuSGFuZGxlcikge1xuICAgICAgY29uZmlnLndhcm5IYW5kbGVyLmNhbGwobnVsbCwgbXNnLCB2bSwgdHJhY2UpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIltWdWUgd2Fybl06IFwiICsgbXNnICsgdHJhY2UpKTtcbiAgICB9XG4gIH07XG5cbiAgdGlwID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJbVnVlIHRpcF06IFwiICsgbXNnICsgKFxuICAgICAgICB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJydcbiAgICAgICkpO1xuICAgIH1cbiAgfTtcblxuICBmb3JtYXRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKHZtLCBpbmNsdWRlRmlsZSkge1xuICAgIGlmICh2bS4kcm9vdCA9PT0gdm0pIHtcbiAgICAgIHJldHVybiAnPFJvb3Q+J1xuICAgIH1cbiAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiB2bSA9PT0gJ2Z1bmN0aW9uJyAmJiB2bS5jaWQgIT0gbnVsbFxuICAgICAgPyB2bS5vcHRpb25zXG4gICAgICA6IHZtLl9pc1Z1ZVxuICAgICAgICA/IHZtLiRvcHRpb25zIHx8IHZtLmNvbnN0cnVjdG9yLm9wdGlvbnNcbiAgICAgICAgOiB2bTtcbiAgICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSB8fCBvcHRpb25zLl9jb21wb25lbnRUYWc7XG4gICAgdmFyIGZpbGUgPSBvcHRpb25zLl9fZmlsZTtcbiAgICBpZiAoIW5hbWUgJiYgZmlsZSkge1xuICAgICAgdmFyIG1hdGNoID0gZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC52dWUkLyk7XG4gICAgICBuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIChuYW1lID8gKFwiPFwiICsgKGNsYXNzaWZ5KG5hbWUpKSArIFwiPlwiKSA6IFwiPEFub255bW91cz5cIikgK1xuICAgICAgKGZpbGUgJiYgaW5jbHVkZUZpbGUgIT09IGZhbHNlID8gKFwiIGF0IFwiICsgZmlsZSkgOiAnJylcbiAgICApXG4gIH07XG5cbiAgdmFyIHJlcGVhdCA9IGZ1bmN0aW9uIChzdHIsIG4pIHtcbiAgICB2YXIgcmVzID0gJyc7XG4gICAgd2hpbGUgKG4pIHtcbiAgICAgIGlmIChuICUgMiA9PT0gMSkgeyByZXMgKz0gc3RyOyB9XG4gICAgICBpZiAobiA+IDEpIHsgc3RyICs9IHN0cjsgfVxuICAgICAgbiA+Pj0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9O1xuXG4gIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSBmdW5jdGlvbiAodm0pIHtcbiAgICBpZiAodm0uX2lzVnVlICYmIHZtLiRwYXJlbnQpIHtcbiAgICAgIHZhciB0cmVlID0gW107XG4gICAgICB2YXIgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgIHdoaWxlICh2bSkge1xuICAgICAgICBpZiAodHJlZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGxhc3QgPSB0cmVlW3RyZWUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKGxhc3QuY29uc3RydWN0b3IgPT09IHZtLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UrKztcbiAgICAgICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPiAwKSB7XG4gICAgICAgICAgICB0cmVlW3RyZWUubGVuZ3RoIC0gMV0gPSBbbGFzdCwgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlXTtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyZWUucHVzaCh2bSk7XG4gICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnXFxuXFxuZm91bmQgaW5cXG5cXG4nICsgdHJlZVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh2bSwgaSkgeyByZXR1cm4gKFwiXCIgKyAoaSA9PT0gMCA/ICctLS0+ICcgOiByZXBlYXQoJyAnLCA1ICsgaSAqIDIpKSArIChBcnJheS5pc0FycmF5KHZtKVxuICAgICAgICAgICAgPyAoKGZvcm1hdENvbXBvbmVudE5hbWUodm1bMF0pKSArIFwiLi4uIChcIiArICh2bVsxXSkgKyBcIiByZWN1cnNpdmUgY2FsbHMpXCIpXG4gICAgICAgICAgICA6IGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSk7IH0pXG4gICAgICAgIC5qb2luKCdcXG4nKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFwiXFxuXFxuKGZvdW5kIGluIFwiICsgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiKVwiKVxuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQgPSAwO1xuXG4vKipcbiAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAqL1xudmFyIERlcCA9IGZ1bmN0aW9uIERlcCAoKSB7XG4gIHRoaXMuaWQgPSB1aWQrKztcbiAgdGhpcy5zdWJzID0gW107XG59O1xuXG5EZXAucHJvdG90eXBlLmFkZFN1YiA9IGZ1bmN0aW9uIGFkZFN1YiAoc3ViKSB7XG4gIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG4gIHJlbW92ZSh0aGlzLnN1YnMsIHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgRGVwLnRhcmdldC5hZGREZXAodGhpcyk7XG4gIH1cbn07XG5cbkRlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5ICgpIHtcbiAgLy8gc3RhYmlsaXplIHRoZSBzdWJzY3JpYmVyIGxpc3QgZmlyc3RcbiAgdmFyIHN1YnMgPSB0aGlzLnN1YnMuc2xpY2UoKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgIC8vIHN1YnMgYXJlbid0IHNvcnRlZCBpbiBzY2hlZHVsZXIgaWYgbm90IHJ1bm5pbmcgYXN5bmNcbiAgICAvLyB3ZSBuZWVkIHRvIHNvcnQgdGhlbSBub3cgdG8gbWFrZSBzdXJlIHRoZXkgZmlyZSBpbiBjb3JyZWN0XG4gICAgLy8gb3JkZXJcbiAgICBzdWJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3Vic1tpXS51cGRhdGUoKTtcbiAgfVxufTtcblxuLy8gVGhlIGN1cnJlbnQgdGFyZ2V0IHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkLlxuLy8gVGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSBvbmx5IG9uZSB3YXRjaGVyXG4vLyBjYW4gYmUgZXZhbHVhdGVkIGF0IGEgdGltZS5cbkRlcC50YXJnZXQgPSBudWxsO1xudmFyIHRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKHRhcmdldCkge1xuICB0YXJnZXRTdGFjay5wdXNoKHRhcmdldCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIHRhcmdldFN0YWNrLnBvcCgpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0U3RhY2tbdGFyZ2V0U3RhY2subGVuZ3RoIC0gMV07XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgLy8gIzc5NzVcbiAgICAvLyBjbG9uZSBjaGlsZHJlbiBhcnJheSB0byBhdm9pZCBtdXRhdGluZyBvcmlnaW5hbCBpbiBjYXNlIG9mIGNsb25pbmdcbiAgICAvLyBhIGNoaWxkLlxuICAgIHZub2RlLmNoaWxkcmVuICYmIHZub2RlLmNoaWxkcmVuLnNsaWNlKCksXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5hc3luY01ldGEgPSB2bm9kZS5hc3luY01ldGE7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtcblxudmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAncHVzaCcsXG4gICdwb3AnLFxuICAnc2hpZnQnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnLFxuICAnc29ydCcsXG4gICdyZXZlcnNlJ1xuXTtcblxuLyoqXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAqL1xubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbnZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgaWYgKGhhc1Byb3RvKSB7XG4gICAgICBwcm90b0F1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcHlBdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgfVxuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBhbmQgY29udmVydCB0aGVtIGludG9cbiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEob2JqLCBrZXlzW2ldKTtcbiAgfVxufTtcblxuLyoqXG4gKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgfVxufTtcblxuLy8gaGVscGVyc1xuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgZGVmaW5pbmdcbiAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcbiAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICovXG5mdW5jdGlvbiBvYnNlcnZlICh2YWx1ZSwgYXNSb290RGF0YSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iO1xuICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBzaG91bGRPYnNlcnZlICYmXG4gICAgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiZcbiAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmXG4gICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiZcbiAgICAhdmFsdWUuX2lzVnVlXG4gICkge1xuICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgfVxuICBpZiAoYXNSb290RGF0YSAmJiBvYikge1xuICAgIG9iLnZtQ291bnQrKztcbiAgfVxuICByZXR1cm4gb2Jcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlJCQxIChcbiAgb2JqLFxuICBrZXksXG4gIHZhbCxcbiAgY3VzdG9tU2V0dGVyLFxuICBzaGFsbG93XG4pIHtcbiAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcblxuICB2YXIgcHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGNhdGVyIGZvciBwcmUtZGVmaW5lZCBnZXR0ZXIvc2V0dGVyc1xuICB2YXIgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuICBpZiAoKCFnZXR0ZXIgfHwgc2V0dGVyKSAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgdmFsID0gb2JqW2tleV07XG4gIH1cblxuICB2YXIgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUodmFsKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlciAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgZGVwLmRlcGVuZCgpO1xuICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGN1c3RvbVNldHRlcikge1xuICAgICAgICBjdXN0b21TZXR0ZXIoKTtcbiAgICAgIH1cbiAgICAgIC8vICM3OTgxOiBmb3IgYWNjZXNzb3IgcHJvcGVydGllcyB3aXRob3V0IHNldHRlclxuICAgICAgaWYgKGdldHRlciAmJiAhc2V0dGVyKSB7IHJldHVybiB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUkJDEob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3QgZGVsZXRlIHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcblxuICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgID8gUmVmbGVjdC5vd25LZXlzKGZyb20pXG4gICAgOiBPYmplY3Qua2V5cyhmcm9tKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIC8vIGluIGNhc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IG9ic2VydmVkLi4uXG4gICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgIHRvVmFsID0gdG9ba2V5XTtcbiAgICBmcm9tVmFsID0gZnJvbVtrZXldO1xuICAgIGlmICghaGFzT3duKHRvLCBrZXkpKSB7XG4gICAgICBzZXQodG8sIGtleSwgZnJvbVZhbCk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHRvVmFsICE9PSBmcm9tVmFsICYmXG4gICAgICBpc1BsYWluT2JqZWN0KHRvVmFsKSAmJlxuICAgICAgaXNQbGFpbk9iamVjdChmcm9tVmFsKVxuICAgICkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5mdW5jdGlvbiBtZXJnZURhdGFPckZuIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IGNoaWxkVmFsLFxuICAgICAgICB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWxcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IHBhcmVudFZhbDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgdmFyIHJlcyA9IGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbDtcbiAgcmV0dXJuIHJlc1xuICAgID8gZGVkdXBlSG9va3MocmVzKVxuICAgIDogcmVzXG59XG5cbmZ1bmN0aW9uIGRlZHVwZUhvb2tzIChob29rcykge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocmVzLmluZGV4T2YoaG9va3NbaV0pID09PSAtMSkge1xuICAgICAgcmVzLnB1c2goaG9va3NbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkxJRkVDWUNMRV9IT09LUy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gIHN0cmF0c1tob29rXSA9IG1lcmdlSG9vaztcbn0pO1xuXG4vKipcbiAqIEFzc2V0c1xuICpcbiAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAqIGEgdGhyZWUtd2F5IG1lcmdlIGJldHdlZW4gY29uc3RydWN0b3Igb3B0aW9ucywgaW5zdGFuY2VcbiAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBtZXJnZUFzc2V0cyAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCk7XG4gIGlmIChjaGlsZFZhbCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gICAgcmV0dXJuIGV4dGVuZChyZXMsIGNoaWxkVmFsKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5BU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gIHN0cmF0c1t0eXBlICsgJ3MnXSA9IG1lcmdlQXNzZXRzO1xufSk7XG5cbi8qKlxuICogV2F0Y2hlcnMuXG4gKlxuICogV2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZVxuICogYW5vdGhlciwgc28gd2UgbWVyZ2UgdGhlbSBhcyBhcnJheXMuXG4gKi9cbnN0cmF0cy53YXRjaCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIC8vIHdvcmsgYXJvdW5kIEZpcmVmb3gncyBPYmplY3QucHJvdG90eXBlLndhdGNoLi4uXG4gIGlmIChwYXJlbnRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IHBhcmVudFZhbCA9IHVuZGVmaW5lZDsgfVxuICBpZiAoY2hpbGRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IGNoaWxkVmFsID0gdW5kZWZpbmVkOyB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNoaWxkVmFsKSB7IHJldHVybiBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKSB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IHt9O1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZFZhbCkge1xuICAgIHZhciBwYXJlbnQgPSByZXRba2V5JDFdO1xuICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleSQxXTtcbiAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgIH1cbiAgICByZXRba2V5JDFdID0gcGFyZW50XG4gICAgICA/IHBhcmVudC5jb25jYXQoY2hpbGQpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGQpID8gY2hpbGQgOiBbY2hpbGRdO1xuICB9XG4gIHJldHVybiByZXRcbn07XG5cbi8qKlxuICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cbiAqL1xuc3RyYXRzLnByb3BzID1cbnN0cmF0cy5tZXRob2RzID1cbnN0cmF0cy5pbmplY3QgPVxuc3RyYXRzLmNvbXB1dGVkID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgaWYgKGNoaWxkVmFsICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgaWYgKGNoaWxkVmFsKSB7IGV4dGVuZChyZXQsIGNoaWxkVmFsKTsgfVxuICByZXR1cm4gcmV0XG59O1xuc3RyYXRzLnByb3ZpZGUgPSBtZXJnZURhdGFPckZuO1xuXG4vKipcbiAqIERlZmF1bHQgc3RyYXRlZ3kuXG4gKi9cbnZhciBkZWZhdWx0U3RyYXQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZFxuICAgID8gcGFyZW50VmFsXG4gICAgOiBjaGlsZFZhbFxufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcbiAqL1xuZnVuY3Rpb24gY2hlY2tDb21wb25lbnRzIChvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoa2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUgKG5hbWUpIHtcbiAgaWYgKCFuZXcgUmVnRXhwKChcIl5bYS16QS1aXVtcXFxcLVxcXFwuMC05X1wiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiXSokXCIpKS50ZXN0KG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAnc2hvdWxkIGNvbmZvcm0gdG8gdmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZSBpbiBodG1sNSBzcGVjaWZpY2F0aW9uLidcbiAgICApO1xuICB9XG4gIGlmIChpc0J1aWx0SW5UYWcobmFtZSkgfHwgY29uZmlnLmlzUmVzZXJ2ZWRUYWcobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAnaWQ6ICcgKyBuYW1lXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZVxuICogT2JqZWN0LWJhc2VkIGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmICghcHJvcHMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgaSwgdmFsLCBuYW1lO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhbCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5hbWUgPSBjYW1lbGl6ZSh2YWwpO1xuICAgICAgICByZXNbbmFtZV0gPSB7IHR5cGU6IG51bGwgfTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKCdwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguJyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICB2YWwgPSBwcm9wc1trZXldO1xuICAgICAgbmFtZSA9IGNhbWVsaXplKGtleSk7XG4gICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiB7IHR5cGU6IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJwcm9wc1xcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShwcm9wcykpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYWxsIGluamVjdGlvbnMgaW50byBPYmplY3QtYmFzZWQgZm9ybWF0XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdCAob3B0aW9ucywgdm0pIHtcbiAgdmFyIGluamVjdCA9IG9wdGlvbnMuaW5qZWN0O1xuICBpZiAoIWluamVjdCkgeyByZXR1cm4gfVxuICB2YXIgbm9ybWFsaXplZCA9IG9wdGlvbnMuaW5qZWN0ID0ge307XG4gIGlmIChBcnJheS5pc0FycmF5KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluamVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgbm9ybWFsaXplZFtpbmplY3RbaV1dID0geyBmcm9tOiBpbmplY3RbaV0gfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChpbmplY3QpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGluamVjdCkge1xuICAgICAgdmFyIHZhbCA9IGluamVjdFtrZXldO1xuICAgICAgbm9ybWFsaXplZFtrZXldID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gZXh0ZW5kKHsgZnJvbToga2V5IH0sIHZhbClcbiAgICAgICAgOiB7IGZyb206IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJpbmplY3RcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUoaW5qZWN0KSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSByYXcgZnVuY3Rpb24gZGlyZWN0aXZlcyBpbnRvIG9iamVjdCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMgKG9wdGlvbnMpIHtcbiAgdmFyIGRpcnMgPSBvcHRpb25zLmRpcmVjdGl2ZXM7XG4gIGlmIChkaXJzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRpcnMpIHtcbiAgICAgIHZhciBkZWYkJDEgPSBkaXJzW2tleV07XG4gICAgICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkaXJzW2tleV0gPSB7IGJpbmQ6IGRlZiQkMSwgdXBkYXRlOiBkZWYkJDEgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZSAobmFtZSwgdmFsdWUsIHZtKSB7XG4gIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcIlwiICsgbmFtZSArIFwiXFxcIjogZXhwZWN0ZWQgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHZhbHVlKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHR3byBvcHRpb24gb2JqZWN0cyBpbnRvIGEgbmV3IG9uZS5cbiAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyAoXG4gIHBhcmVudCxcbiAgY2hpbGQsXG4gIHZtXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgfVxuXG4gIG5vcm1hbGl6ZVByb3BzKGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZUluamVjdChjaGlsZCwgdm0pO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcblxuICAvLyBBcHBseSBleHRlbmRzIGFuZCBtaXhpbnMgb24gdGhlIGNoaWxkIG9wdGlvbnMsXG4gIC8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3RcbiAgLy8gdGhlIHJlc3VsdCBvZiBhbm90aGVyIG1lcmdlT3B0aW9ucyBjYWxsLlxuICAvLyBPbmx5IG1lcmdlZCBvcHRpb25zIGhhcyB0aGUgX2Jhc2UgcHJvcGVydHkuXG4gIGlmICghY2hpbGQuX2Jhc2UpIHtcbiAgICBpZiAoY2hpbGQuZXh0ZW5kcykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQuZXh0ZW5kcywgdm0pO1xuICAgIH1cbiAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgbWVyZ2VGaWVsZChrZXkpO1xuICB9XG4gIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlRmllbGQgKGtleSkge1xuICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcbiAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGFuIGFzc2V0LlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXG4gKiB0byBhc3NldHMgZGVmaW5lZCBpbiBpdHMgYW5jZXN0b3IgY2hhaW4uXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCAoXG4gIG9wdGlvbnMsXG4gIHR5cGUsXG4gIGlkLFxuICB3YXJuTWlzc2luZ1xuKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBhc3NldHMgPSBvcHRpb25zW3R5cGVdO1xuICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICBpZiAoaGFzT3duKGFzc2V0cywgaWQpKSB7IHJldHVybiBhc3NldHNbaWRdIH1cbiAgdmFyIGNhbWVsaXplZElkID0gY2FtZWxpemUoaWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cbiAgdmFyIFBhc2NhbENhc2VJZCA9IGNhcGl0YWxpemUoY2FtZWxpemVkSWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgUGFzY2FsQ2FzZUlkKSkgeyByZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF0gfVxuICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbiAgdmFyIHJlcyA9IGFzc2V0c1tpZF0gfHwgYXNzZXRzW2NhbWVsaXplZElkXSB8fCBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgIHdhcm4oXG4gICAgICAnRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGJvb2xlYW4gY2FzdGluZ1xuICB2YXIgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XG4gIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmXG4gICAgICAvLyBib29sZWFuIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRPYnNlcnZlID0gc2hvdWxkT2JzZXJ2ZTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTtcbiAgfVxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIC8vIHNraXAgdmFsaWRhdGlvbiBmb3Igd2VleCByZWN5Y2xlLWxpc3QgY2hpbGQgY29tcG9uZW50IHByb3BzXG4gICAgIShmYWxzZSlcbiAgKSB7XG4gICAgYXNzZXJ0UHJvcChwcm9wLCBrZXksIHZhbHVlLCB2bSwgYWJzZW50KTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwcm9wLlxuICovXG5mdW5jdGlvbiBnZXRQcm9wRGVmYXVsdFZhbHVlICh2bSwgcHJvcCwga2V5KSB7XG4gIC8vIG5vIGRlZmF1bHQsIHJldHVybiB1bmRlZmluZWRcbiAgaWYgKCFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuICB2YXIgZGVmID0gcHJvcC5kZWZhdWx0O1xuICAvLyB3YXJuIGFnYWluc3Qgbm9uLWZhY3RvcnkgZGVmYXVsdHMgZm9yIE9iamVjdCAmIEFycmF5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzT2JqZWN0KGRlZikpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgZGVmYXVsdCB2YWx1ZSBmb3IgcHJvcCBcIicgKyBrZXkgKyAnXCI6ICcgK1xuICAgICAgJ1Byb3BzIHdpdGggdHlwZSBPYmplY3QvQXJyYXkgbXVzdCB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uICcgK1xuICAgICAgJ3RvIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZS4nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHRoZSByYXcgcHJvcCB2YWx1ZSB3YXMgYWxzbyB1bmRlZmluZWQgZnJvbSBwcmV2aW91cyByZW5kZXIsXG4gIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxuICBpZiAodm0gJiYgdm0uJG9wdGlvbnMucHJvcHNEYXRhICYmXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhW2tleV0gPT09IHVuZGVmaW5lZCAmJlxuICAgIHZtLl9wcm9wc1trZXldICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgcmV0dXJuIHZtLl9wcm9wc1trZXldXG4gIH1cbiAgLy8gY2FsbCBmYWN0b3J5IGZ1bmN0aW9uIGZvciBub24tRnVuY3Rpb24gdHlwZXNcbiAgLy8gYSB2YWx1ZSBpcyBGdW5jdGlvbiBpZiBpdHMgcHJvdG90eXBlIGlzIGZ1bmN0aW9uIGV2ZW4gYWNyb3NzIGRpZmZlcmVudCBleGVjdXRpb24gY29udGV4dFxuICByZXR1cm4gdHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBnZXRUeXBlKHByb3AudHlwZSkgIT09ICdGdW5jdGlvbidcbiAgICA/IGRlZi5jYWxsKHZtKVxuICAgIDogZGVmXG59XG5cbi8qKlxuICogQXNzZXJ0IHdoZXRoZXIgYSBwcm9wIGlzIHZhbGlkLlxuICovXG5mdW5jdGlvbiBhc3NlcnRQcm9wIChcbiAgcHJvcCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIHZtLFxuICBhYnNlbnRcbikge1xuICBpZiAocHJvcC5yZXF1aXJlZCAmJiBhYnNlbnQpIHtcbiAgICB3YXJuKFxuICAgICAgJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdHlwZSA9IHByb3AudHlwZTtcbiAgdmFyIHZhbGlkID0gIXR5cGUgfHwgdHlwZSA9PT0gdHJ1ZTtcbiAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgaWYgKHR5cGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgIHR5cGUgPSBbdHlwZV07XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGggJiYgIXZhbGlkOyBpKyspIHtcbiAgICAgIHZhciBhc3NlcnRlZFR5cGUgPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlW2ldLCB2bSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cblxuICB2YXIgaGF2ZUV4cGVjdGVkVHlwZXMgPSBleHBlY3RlZFR5cGVzLnNvbWUoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQ7IH0pO1xuICBpZiAoIXZhbGlkICYmIGhhdmVFeHBlY3RlZFR5cGVzKSB7XG4gICAgd2FybihcbiAgICAgIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2x8QmlnSW50KSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSwgdm0pIHtcbiAgdmFyIHZhbGlkO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgaWYgKHNpbXBsZUNoZWNrUkUudGVzdChleHBlY3RlZFR5cGUpKSB7XG4gICAgdmFyIHQgPSB0eXBlb2YgdmFsdWU7XG4gICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAvLyBmb3IgcHJpbWl0aXZlIHdyYXBwZXIgb2JqZWN0c1xuICAgIGlmICghdmFsaWQgJiYgdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XG4gICAgdmFsaWQgPSBpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcbiAgICB2YWxpZCA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB3YXJuKCdJbnZhbGlkIHByb3AgdHlwZTogXCInICsgU3RyaW5nKHR5cGUpICsgJ1wiIGlzIG5vdCBhIGNvbnN0cnVjdG9yJywgdm0pO1xuICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG52YXIgZnVuY3Rpb25UeXBlQ2hlY2tSRSA9IC9eXFxzKmZ1bmN0aW9uIChcXHcrKS87XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goZnVuY3Rpb25UeXBlQ2hlY2tSRSk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgZXhwZWN0ZWQgdmFsdWVcbiAgaWYgKFxuICAgIGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmXG4gICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICBpc0V4cGxpY2FibGUodHlwZW9mIHZhbHVlKSAmJlxuICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpXG4gICkge1xuICAgIG1lc3NhZ2UgKz0gXCIgd2l0aCB2YWx1ZSBcIiArIChzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpKTtcbiAgfVxuICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgKHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSkpICsgXCIuXCI7XG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2Vcbn1cblxuZnVuY3Rpb24gc3R5bGVWYWx1ZSAodmFsdWUsIHR5cGUpIHtcbiAgaWYgKHR5cGUgPT09ICdTdHJpbmcnKSB7XG4gICAgcmV0dXJuIChcIlxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICByZXR1cm4gKFwiXCIgKyAoTnVtYmVyKHZhbHVlKSkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIlwiICsgdmFsdWUpXG4gIH1cbn1cblxudmFyIEVYUExJQ0FCTEVfVFlQRVMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuZnVuY3Rpb24gaXNFeHBsaWNhYmxlICh2YWx1ZSkge1xuICByZXR1cm4gRVhQTElDQUJMRV9UWVBFUy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKCkge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvaXNzdWVzLzE1MDVcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIGlmICh2bSkge1xuICAgICAgdmFyIGN1ciA9IHZtO1xuICAgICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7XG4gICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZVdpdGhFcnJvckhhbmRsaW5nIChcbiAgaGFuZGxlcixcbiAgY29udGV4dCxcbiAgYXJncyxcbiAgdm0sXG4gIGluZm9cbikge1xuICB2YXIgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGFyZ3MgPyBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpIDogaGFuZGxlci5jYWxsKGNvbnRleHQpO1xuICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkge1xuICAgICAgcmVzLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArIFwiIChQcm9taXNlL2FzeW5jKVwiKTsgfSk7XG4gICAgICAvLyBpc3N1ZSAjOTUxMVxuICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xuICAgICAgcmVzLl9oYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWYgdGhlIHVzZXIgaW50ZW50aW9uYWxseSB0aHJvd3MgdGhlIG9yaWdpbmFsIGVycm9yIGluIHRoZSBoYW5kbGVyLFxuICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZVxuICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1VzaW5nTWljcm9UYXNrID0gZmFsc2U7XG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7XG5cbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4vLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbi8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbi8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaG5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCxCaWdJbnQsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciB3YXJuUmVzZXJ2ZWRQcmVmaXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbXVzdCBiZSBhY2Nlc3NlZCB3aXRoIFxcXCIkZGF0YS5cIiArIGtleSArIFwiXFxcIiBiZWNhdXNlIFwiICtcbiAgICAgICdwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggXCIkXCIgb3IgXCJfXCIgYXJlIG5vdCBwcm94aWVkIGluIHRoZSBWdWUgaW5zdGFuY2UgdG8gJyArXG4gICAgICAncHJldmVudCBjb25mbGljdHMgd2l0aCBWdWUgaW50ZXJuYWxzLiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2FwaS8jZGF0YScsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciBoYXNQcm94eSA9XG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm94eSk7XG5cbiAgaWYgKGhhc1Byb3h5KSB7XG4gICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHxcbiAgICAgICAgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5jaGFyQXQoMCkgPT09ICdfJyAmJiAhKGtleSBpbiB0YXJnZXQuJGRhdGEpKTtcbiAgICAgIGlmICghaGFzICYmICFpc0FsbG93ZWQpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRba2V5XVxuICAgIH1cbiAgfTtcblxuICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkgKHZtKSB7XG4gICAgaWYgKGhhc1Byb3h5KSB7XG4gICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2VcbiAgICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gICAgICB2YXIgaGFuZGxlcnMgPSBvcHRpb25zLnJlbmRlciAmJiBvcHRpb25zLnJlbmRlci5fd2l0aFN0cmlwcGVkXG4gICAgICAgID8gZ2V0SGFuZGxlclxuICAgICAgICA6IGhhc0hhbmRsZXI7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSBuZXcgUHJveHkodm0sIGhhbmRsZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSBhbiBvYmplY3QgdG8gZXZva2UgYWxsIGNvbnZlcnRlZFxuICogZ2V0dGVycywgc28gdGhhdCBldmVyeSBuZXN0ZWQgcHJvcGVydHkgaW5zaWRlIHRoZSBvYmplY3RcbiAqIGlzIGNvbGxlY3RlZCBhcyBhIFwiZGVlcFwiIGRlcGVuZGVuY3kuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlICh2YWwpIHtcbiAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpO1xuICBzZWVuT2JqZWN0cy5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiBfdHJhdmVyc2UgKHZhbCwgc2Vlbikge1xuICB2YXIgaSwga2V5cztcbiAgdmFyIGlzQSA9IEFycmF5LmlzQXJyYXkodmFsKTtcbiAgaWYgKCghaXNBICYmICFpc09iamVjdCh2YWwpKSB8fCBPYmplY3QuaXNGcm96ZW4odmFsKSB8fCB2YWwgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWwuX19vYl9fKSB7XG4gICAgdmFyIGRlcElkID0gdmFsLl9fb2JfXy5kZXAuaWQ7XG4gICAgaWYgKHNlZW4uaGFzKGRlcElkKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHNlZW4uYWRkKGRlcElkKTtcbiAgfVxuICBpZiAoaXNBKSB7XG4gICAgaSA9IHZhbC5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2ldLCBzZWVuKTsgfVxuICB9IGVsc2Uge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxba2V5c1tpXV0sIHNlZW4pOyB9XG4gIH1cbn1cblxudmFyIG1hcms7XG52YXIgbWVhc3VyZTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHBlcmYgPSBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIHBlcmYgJiZcbiAgICBwZXJmLm1hcmsgJiZcbiAgICBwZXJmLm1lYXN1cmUgJiZcbiAgICBwZXJmLmNsZWFyTWFya3MgJiZcbiAgICBwZXJmLmNsZWFyTWVhc3VyZXNcbiAgKSB7XG4gICAgbWFyayA9IGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHBlcmYubWFyayh0YWcpOyB9O1xuICAgIG1lYXN1cmUgPSBmdW5jdGlvbiAobmFtZSwgc3RhcnRUYWcsIGVuZFRhZykge1xuICAgICAgcGVyZi5tZWFzdXJlKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhlbmRUYWcpO1xuICAgICAgLy8gcGVyZi5jbGVhck1lYXN1cmVzKG5hbWUpXG4gICAgfTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIG5vcm1hbGl6ZUV2ZW50ID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciBwYXNzaXZlID0gbmFtZS5jaGFyQXQoMCkgPT09ICcmJztcbiAgbmFtZSA9IHBhc3NpdmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIG9uY2UkJDEgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0XG4gIG5hbWUgPSBvbmNlJCQxID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBjYXB0dXJlID0gbmFtZS5jaGFyQXQoMCkgPT09ICchJztcbiAgbmFtZSA9IGNhcHR1cmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIG9uY2U6IG9uY2UkJDEsXG4gICAgY2FwdHVyZTogY2FwdHVyZSxcbiAgICBwYXNzaXZlOiBwYXNzaXZlXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVGbkludm9rZXIgKGZucywgdm0pIHtcbiAgZnVuY3Rpb24gaW52b2tlciAoKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZucyA9IGludm9rZXIuZm5zO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZucykpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBmbnMuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNsb25lZFtpXSwgbnVsbCwgYXJndW1lbnRzJDEsIHZtLCBcInYtb24gaGFuZGxlclwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmV0dXJuIGhhbmRsZXIgcmV0dXJuIHZhbHVlIGZvciBzaW5nbGUgaGFuZGxlcnNcbiAgICAgIHJldHVybiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhmbnMsIG51bGwsIGFyZ3VtZW50cywgdm0sIFwidi1vbiBoYW5kbGVyXCIpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICBjcmVhdGVPbmNlSGFuZGxlcixcbiAgdm1cbikge1xuICB2YXIgbmFtZSwgZGVmJCQxLCBjdXIsIG9sZCwgZXZlbnQ7XG4gIGZvciAobmFtZSBpbiBvbikge1xuICAgIGRlZiQkMSA9IGN1ciA9IG9uW25hbWVdO1xuICAgIG9sZCA9IG9sZE9uW25hbWVdO1xuICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgaWYgKGlzVW5kZWYoY3VyKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXFxcIlwiICsgKGV2ZW50Lm5hbWUpICsgXCJcXFwiOiBnb3QgXCIgKyBTdHJpbmcoY3VyKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZCkpIHtcbiAgICAgIGlmIChpc1VuZGVmKGN1ci5mbnMpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlRm5JbnZva2VyKGN1ciwgdm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzVHJ1ZShldmVudC5vbmNlKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZU9uY2VIYW5kbGVyKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSk7XG4gICAgICB9XG4gICAgICBhZGQoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlLCBldmVudC5wYXNzaXZlLCBldmVudC5wYXJhbXMpO1xuICAgIH0gZWxzZSBpZiAoY3VyICE9PSBvbGQpIHtcbiAgICAgIG9sZC5mbnMgPSBjdXI7XG4gICAgICBvbltuYW1lXSA9IG9sZDtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG9sZE9uKSB7XG4gICAgaWYgKGlzVW5kZWYob25bbmFtZV0pKSB7XG4gICAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgICAgcmVtb3ZlJCQxKGV2ZW50Lm5hbWUsIG9sZE9uW25hbWVdLCBldmVudC5jYXB0dXJlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG1lcmdlVk5vZGVIb29rIChkZWYsIGhvb2tLZXksIGhvb2spIHtcbiAgaWYgKGRlZiBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgZGVmID0gZGVmLmRhdGEuaG9vayB8fCAoZGVmLmRhdGEuaG9vayA9IHt9KTtcbiAgfVxuICB2YXIgaW52b2tlcjtcbiAgdmFyIG9sZEhvb2sgPSBkZWZbaG9va0tleV07XG5cbiAgZnVuY3Rpb24gd3JhcHBlZEhvb2sgKCkge1xuICAgIGhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAvLyBpbXBvcnRhbnQ6IHJlbW92ZSBtZXJnZWQgaG9vayB0byBlbnN1cmUgaXQncyBjYWxsZWQgb25seSBvbmNlXG4gICAgLy8gYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAgICByZW1vdmUoaW52b2tlci5mbnMsIHdyYXBwZWRIb29rKTtcbiAgfVxuXG4gIGlmIChpc1VuZGVmKG9sZEhvb2spKSB7XG4gICAgLy8gbm8gZXhpc3RpbmcgaG9va1xuICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW3dyYXBwZWRIb29rXSk7XG4gIH0gZWxzZSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzRGVmKG9sZEhvb2suZm5zKSAmJiBpc1RydWUob2xkSG9vay5tZXJnZWQpKSB7XG4gICAgICAvLyBhbHJlYWR5IGEgbWVyZ2VkIGludm9rZXJcbiAgICAgIGludm9rZXIgPSBvbGRIb29rO1xuICAgICAgaW52b2tlci5mbnMucHVzaCh3cmFwcGVkSG9vayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIHBsYWluIGhvb2tcbiAgICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW29sZEhvb2ssIHdyYXBwZWRIb29rXSk7XG4gICAgfVxuICB9XG5cbiAgaW52b2tlci5tZXJnZWQgPSB0cnVlO1xuICBkZWZbaG9va0tleV0gPSBpbnZva2VyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSAoXG4gIGRhdGEsXG4gIEN0b3IsXG4gIHRhZ1xuKSB7XG4gIC8vIHdlIGFyZSBvbmx5IGV4dHJhY3RpbmcgcmF3IHZhbHVlcyBoZXJlLlxuICAvLyB2YWxpZGF0aW9uIGFuZCBkZWZhdWx0IHZhbHVlcyBhcmUgaGFuZGxlZCBpbiB0aGUgY2hpbGRcbiAgLy8gY29tcG9uZW50IGl0c2VsZi5cbiAgdmFyIHByb3BPcHRpb25zID0gQ3Rvci5vcHRpb25zLnByb3BzO1xuICBpZiAoaXNVbmRlZihwcm9wT3B0aW9ucykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBhdHRycyA9IGRhdGEuYXR0cnM7XG4gIHZhciBwcm9wcyA9IGRhdGEucHJvcHM7XG4gIGlmIChpc0RlZihhdHRycykgfHwgaXNEZWYocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICB2YXIgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIga2V5SW5Mb3dlckNhc2UgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSAhPT0ga2V5SW5Mb3dlckNhc2UgJiZcbiAgICAgICAgICBhdHRycyAmJiBoYXNPd24oYXR0cnMsIGtleUluTG93ZXJDYXNlKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aXAoXG4gICAgICAgICAgICBcIlByb3AgXFxcIlwiICsga2V5SW5Mb3dlckNhc2UgKyBcIlxcXCIgaXMgcGFzc2VkIHRvIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh0YWcgfHwgQ3RvcikpICsgXCIsIGJ1dCB0aGUgZGVjbGFyZWQgcHJvcCBuYW1lIGlzXCIgK1xuICAgICAgICAgICAgXCIgXFxcIlwiICsga2V5ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIGNhbWVsQ2FzZWQgXCIgK1xuICAgICAgICAgICAgXCJwcm9wcyBuZWVkIHRvIHVzZSB0aGVpciBrZWJhYi1jYXNlIGVxdWl2YWxlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIFwiICtcbiAgICAgICAgICAgIFwidGVtcGxhdGVzLiBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyBhbHRLZXkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaGVja1Byb3AocmVzLCBwcm9wcywga2V5LCBhbHRLZXksIHRydWUpIHx8XG4gICAgICBjaGVja1Byb3AocmVzLCBhdHRycywga2V5LCBhbHRLZXksIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja1Byb3AgKFxuICByZXMsXG4gIGhhc2gsXG4gIGtleSxcbiAgYWx0S2V5LFxuICBwcmVzZXJ2ZVxuKSB7XG4gIGlmIChpc0RlZihoYXNoKSkge1xuICAgIGlmIChoYXNPd24oaGFzaCwga2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoaGFzT3duKGhhc2gsIGFsdEtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFthbHRLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG4vLyBUaGUgdGVtcGxhdGUgY29tcGlsZXIgYXR0ZW1wdHMgdG8gbWluaW1pemUgdGhlIG5lZWQgZm9yIG5vcm1hbGl6YXRpb24gYnlcbi8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuXG4vL1xuLy8gRm9yIHBsYWluIEhUTUwgbWFya3VwLCBub3JtYWxpemF0aW9uIGNhbiBiZSBjb21wbGV0ZWx5IHNraXBwZWQgYmVjYXVzZSB0aGVcbi8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmVcbi8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDpcblxuLy8gMS4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29tcG9uZW50cyAtIGJlY2F1c2UgYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxuLy8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuLy8gbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXG4vLyB0aGluZyB3aXRoIEFycmF5LnByb3RvdHlwZS5jb25jYXQuIEl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgb25seSAxLWxldmVsIGRlZXBcbi8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cbmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgY2hpbGRyZW4pXG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZHJlblxufVxuXG4vLyAyLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb25zdHJ1Y3RzIHRoYXQgYWx3YXlzIGdlbmVyYXRlZCBuZXN0ZWQgQXJyYXlzLFxuLy8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyXG4vLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uXG4vLyBpcyBuZWVkZWQgdG8gY2F0ZXIgdG8gYWxsIHBvc3NpYmxlIHR5cGVzIG9mIGNoaWxkcmVuIHZhbHVlcy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pXG4gICAgPyBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV1cbiAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBpc1RleHROb2RlIChub2RlKSB7XG4gIHJldHVybiBpc0RlZihub2RlKSAmJiBpc0RlZihub2RlLnRleHQpICYmIGlzRmFsc2Uobm9kZS5pc0NvbW1lbnQpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4gKGNoaWxkcmVuLCBuZXN0ZWRJbmRleCkge1xuICB2YXIgcmVzID0gW107XG4gIHZhciBpLCBjLCBsYXN0SW5kZXgsIGxhc3Q7XG4gIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoaXNVbmRlZihjKSB8fCB0eXBlb2YgYyA9PT0gJ2Jvb2xlYW4nKSB7IGNvbnRpbnVlIH1cbiAgICBsYXN0SW5kZXggPSByZXMubGVuZ3RoIC0gMTtcbiAgICBsYXN0ID0gcmVzW2xhc3RJbmRleF07XG4gICAgLy8gIG5lc3RlZFxuICAgIGlmIChBcnJheS5pc0FycmF5KGMpKSB7XG4gICAgICBpZiAoYy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGMgPSBub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsICgobmVzdGVkSW5kZXggfHwgJycpICsgXCJfXCIgKyBpKSk7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgaWYgKGlzVGV4dE5vZGUoY1swXSkgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIChjWzBdKS50ZXh0KTtcbiAgICAgICAgICBjLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBjKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBTU1IgaHlkcmF0aW9uIGJlY2F1c2UgdGV4dCBub2RlcyBhcmVcbiAgICAgICAgLy8gZXNzZW50aWFsbHkgbWVyZ2VkIHdoZW4gcmVuZGVyZWQgdG8gSFRNTCBzdHJpbmdzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMpO1xuICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykge1xuICAgICAgICAvLyBjb252ZXJ0IHByaW1pdGl2ZSB0byB2bm9kZVxuICAgICAgICByZXMucHVzaChjcmVhdGVUZXh0Vk5vZGUoYykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShjKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYy50ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpXG4gICAgICAgIGlmIChpc1RydWUoY2hpbGRyZW4uX2lzVkxpc3QpICYmXG4gICAgICAgICAgaXNEZWYoYy50YWcpICYmXG4gICAgICAgICAgaXNVbmRlZihjLmtleSkgJiZcbiAgICAgICAgICBpc0RlZihuZXN0ZWRJbmRleCkpIHtcbiAgICAgICAgICBjLmtleSA9IFwiX192bGlzdFwiICsgbmVzdGVkSW5kZXggKyBcIl9cIiArIGkgKyBcIl9fXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRQcm92aWRlICh2bSkge1xuICB2YXIgcHJvdmlkZSA9IHZtLiRvcHRpb25zLnByb3ZpZGU7XG4gIGlmIChwcm92aWRlKSB7XG4gICAgdm0uX3Byb3ZpZGVkID0gdHlwZW9mIHByb3ZpZGUgPT09ICdmdW5jdGlvbidcbiAgICAgID8gcHJvdmlkZS5jYWxsKHZtKVxuICAgICAgOiBwcm92aWRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRJbmplY3Rpb25zICh2bSkge1xuICB2YXIgcmVzdWx0ID0gcmVzb2x2ZUluamVjdCh2bS4kb3B0aW9ucy5pbmplY3QsIHZtKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGFuIGluamVjdGVkIHZhbHVlIGRpcmVjdGx5IHNpbmNlIHRoZSBjaGFuZ2VzIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcHJvdmlkZWQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiaW5qZWN0aW9uIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUluamVjdCAoaW5qZWN0LCB2bSkge1xuICBpZiAoaW5qZWN0KSB7XG4gICAgLy8gaW5qZWN0IGlzIDphbnkgYmVjYXVzZSBmbG93IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gZmlndXJlIG91dCBjYWNoZWRcbiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgICAgPyBSZWZsZWN0Lm93bktleXMoaW5qZWN0KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIC8vICM2NTc0IGluIGNhc2UgdGhlIGluamVjdCBvYmplY3QgaXMgb2JzZXJ2ZWQuLi5cbiAgICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duKHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV0uZGVmYXVsdDtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgOiBwcm92aWRlRGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybigoXCJJbmplY3Rpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIG5vdCBmb3VuZFwiKSwgdm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyByYXcgY2hpbGRyZW4gVk5vZGVzIGludG8gYSBzbG90IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVNsb3RzIChcbiAgY2hpbGRyZW4sXG4gIGNvbnRleHRcbikge1xuICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuICB2YXIgc2xvdHMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICB2YXIgZGF0YSA9IGNoaWxkLmRhdGE7XG4gICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xuICAgIH1cbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdHMgKFxuICBzbG90cyxcbiAgbm9ybWFsU2xvdHMsXG4gIHByZXZTbG90c1xuKSB7XG4gIHZhciByZXM7XG4gIHZhciBoYXNOb3JtYWxTbG90cyA9IE9iamVjdC5rZXlzKG5vcm1hbFNsb3RzKS5sZW5ndGggPiAwO1xuICB2YXIgaXNTdGFibGUgPSBzbG90cyA/ICEhc2xvdHMuJHN0YWJsZSA6ICFoYXNOb3JtYWxTbG90cztcbiAgdmFyIGtleSA9IHNsb3RzICYmIHNsb3RzLiRrZXk7XG4gIGlmICghc2xvdHMpIHtcbiAgICByZXMgPSB7fTtcbiAgfSBlbHNlIGlmIChzbG90cy5fbm9ybWFsaXplZCkge1xuICAgIC8vIGZhc3QgcGF0aCAxOiBjaGlsZCBjb21wb25lbnQgcmUtcmVuZGVyIG9ubHksIHBhcmVudCBkaWQgbm90IGNoYW5nZVxuICAgIHJldHVybiBzbG90cy5fbm9ybWFsaXplZFxuICB9IGVsc2UgaWYgKFxuICAgIGlzU3RhYmxlICYmXG4gICAgcHJldlNsb3RzICYmXG4gICAgcHJldlNsb3RzICE9PSBlbXB0eU9iamVjdCAmJlxuICAgIGtleSA9PT0gcHJldlNsb3RzLiRrZXkgJiZcbiAgICAhaGFzTm9ybWFsU2xvdHMgJiZcbiAgICAhcHJldlNsb3RzLiRoYXNOb3JtYWxcbiAgKSB7XG4gICAgLy8gZmFzdCBwYXRoIDI6IHN0YWJsZSBzY29wZWQgc2xvdHMgdy8gbm8gbm9ybWFsIHNsb3RzIHRvIHByb3h5LFxuICAgIC8vIG9ubHkgbmVlZCB0byBub3JtYWxpemUgb25jZVxuICAgIHJldHVybiBwcmV2U2xvdHNcbiAgfSBlbHNlIHtcbiAgICByZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkkMSBpbiBzbG90cykge1xuICAgICAgaWYgKHNsb3RzW2tleSQxXSAmJiBrZXkkMVswXSAhPT0gJyQnKSB7XG4gICAgICAgIHJlc1trZXkkMV0gPSBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXkkMSwgc2xvdHNba2V5JDFdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gZXhwb3NlIG5vcm1hbCBzbG90cyBvbiBzY29wZWRTbG90c1xuICBmb3IgKHZhciBrZXkkMiBpbiBub3JtYWxTbG90cykge1xuICAgIGlmICghKGtleSQyIGluIHJlcykpIHtcbiAgICAgIHJlc1trZXkkMl0gPSBwcm94eU5vcm1hbFNsb3Qobm9ybWFsU2xvdHMsIGtleSQyKTtcbiAgICB9XG4gIH1cbiAgLy8gYXZvcmlheiBzZWVtcyB0byBtb2NrIGEgbm9uLWV4dGVuc2libGUgJHNjb3BlZFNsb3RzIG9iamVjdFxuICAvLyBhbmQgd2hlbiB0aGF0IGlzIHBhc3NlZCBkb3duIHRoaXMgd291bGQgY2F1c2UgYW4gZXJyb3JcbiAgaWYgKHNsb3RzICYmIE9iamVjdC5pc0V4dGVuc2libGUoc2xvdHMpKSB7XG4gICAgKHNsb3RzKS5fbm9ybWFsaXplZCA9IHJlcztcbiAgfVxuICBkZWYocmVzLCAnJHN0YWJsZScsIGlzU3RhYmxlKTtcbiAgZGVmKHJlcywgJyRrZXknLCBrZXkpO1xuICBkZWYocmVzLCAnJGhhc05vcm1hbCcsIGhhc05vcm1hbFNsb3RzKTtcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXksIGZuKSB7XG4gIHZhciBub3JtYWxpemVkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXMgPSBhcmd1bWVudHMubGVuZ3RoID8gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSA6IGZuKHt9KTtcbiAgICByZXMgPSByZXMgJiYgdHlwZW9mIHJlcyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkocmVzKVxuICAgICAgPyBbcmVzXSAvLyBzaW5nbGUgdm5vZGVcbiAgICAgIDogbm9ybWFsaXplQ2hpbGRyZW4ocmVzKTtcbiAgICB2YXIgdm5vZGUgPSByZXMgJiYgcmVzWzBdO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgIXZub2RlIHx8XG4gICAgICAocmVzLmxlbmd0aCA9PT0gMSAmJiB2bm9kZS5pc0NvbW1lbnQgJiYgIWlzQXN5bmNQbGFjZWhvbGRlcih2bm9kZSkpIC8vICM5NjU4LCAjMTAzOTFcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2tSZW5kZXIsXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHtcbiAgICAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc09iamVjdChiaW5kT2JqZWN0KSkge1xuICAgICAgICB3YXJuKCdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JywgdGhpcyk7XG4gICAgICB9XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIG5vZGVzID1cbiAgICAgIHNjb3BlZFNsb3RGbihwcm9wcykgfHxcbiAgICAgICh0eXBlb2YgZmFsbGJhY2tSZW5kZXIgPT09ICdmdW5jdGlvbicgPyBmYWxsYmFja1JlbmRlcigpIDogZmFsbGJhY2tSZW5kZXIpO1xuICB9IGVsc2Uge1xuICAgIG5vZGVzID1cbiAgICAgIHRoaXMuJHNsb3RzW25hbWVdIHx8XG4gICAgICAodHlwZW9mIGZhbGxiYWNrUmVuZGVyID09PSAnZnVuY3Rpb24nID8gZmFsbGJhY2tSZW5kZXIoKSA6IGZhbGxiYWNrUmVuZGVyKTtcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG4gIHJldHVybiBldmVudEtleUNvZGUgPT09IHVuZGVmaW5lZFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgbWVyZ2luZyB2LWJpbmQ9XCJvYmplY3RcIiBpbnRvIGEgVk5vZGUncyBkYXRhLlxuICovXG5mdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMgKFxuICBkYXRhLFxuICB0YWcsXG4gIHZhbHVlLFxuICBhc1Byb3AsXG4gIGlzU3luY1xuKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNoO1xuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSA9PT0gJ2NsYXNzJyB8fFxuICAgICAgICAgIGtleSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICBoYXNoID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuICAgICAgICAgIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmICghKGNhbWVsaXplZEtleSBpbiBoYXNoKSAmJiAhKGh5cGhlbmF0ZWRLZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7XG4gIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTtcbiAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiB0cmVlXG4gIH1cbiAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICB0cmVlID0gY2FjaGVkW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKFxuICAgIHRoaXMuX3JlbmRlclByb3h5LFxuICAgIG51bGwsXG4gICAgdGhpcyAvLyBmb3IgcmVuZGVyIGZucyBnZW5lcmF0ZWQgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRlbXBsYXRlc1xuICApO1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAqL1xuZnVuY3Rpb24gbWFya09uY2UgKFxuICB0cmVlLFxuICBpbmRleCxcbiAga2V5XG4pIHtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX29uY2VfX1wiICsgaW5kZXggKyAoa2V5ID8gKFwiX1wiICsga2V5KSA6IFwiXCIpKSwgdHJ1ZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICB0cmVlLFxuICBrZXksXG4gIGlzT25jZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgKGtleSArIFwiX1wiICsgaSksIGlzT25jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gIG5vZGUua2V5ID0ga2V5O1xuICBub2RlLmlzT25jZSA9IGlzT25jZTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMgKGRhdGEsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvbiA9IGRhdGEub24gPSBkYXRhLm9uID8gZXh0ZW5kKHt9LCBkYXRhLm9uKSA6IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHZhciBleGlzdGluZyA9IG9uW2tleV07XG4gICAgICAgIHZhciBvdXJzID0gdmFsdWVba2V5XTtcbiAgICAgICAgb25ba2V5XSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBvdXJzKSA6IG91cnM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlcyxcbiAgLy8gdGhlIGZvbGxvd2luZyBhcmUgYWRkZWQgaW4gMi42XG4gIGhhc0R5bmFtaWNLZXlzLFxuICBjb250ZW50SGFzaEtleVxuKSB7XG4gIHJlcyA9IHJlcyB8fCB7ICRzdGFibGU6ICFoYXNEeW5hbWljS2V5cyB9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzbG90ID0gZm5zW2ldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNsb3QpKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoc2xvdCwgcmVzLCBoYXNEeW5hbWljS2V5cyk7XG4gICAgfSBlbHNlIGlmIChzbG90KSB7XG4gICAgICAvLyBtYXJrZXIgZm9yIHJldmVyc2UgcHJveHlpbmcgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgICAgIGlmIChzbG90LnByb3h5KSB7XG4gICAgICAgIHNsb3QuZm4ucHJveHkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmVzW3Nsb3Qua2V5XSA9IHNsb3QuZm47XG4gICAgfVxuICB9XG4gIGlmIChjb250ZW50SGFzaEtleSkge1xuICAgIChyZXMpLiRrZXkgPSBjb250ZW50SGFzaEtleTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kRHluYW1pY0tleXMgKGJhc2VPYmosIHZhbHVlcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBrZXkgPSB2YWx1ZXNbaV07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleSkge1xuICAgICAgYmFzZU9ialt2YWx1ZXNbaV1dID0gdmFsdWVzW2kgKyAxXTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ICE9PSAnJyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgIC8vIG51bGwgaXMgYSBzcGVjaWFsIHZhbHVlIGZvciBleHBsaWNpdGx5IHJlbW92aW5nIGEgYmluZGluZ1xuICAgICAgd2FybihcbiAgICAgICAgKFwiSW52YWxpZCB2YWx1ZSBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgKGV4cGVjdGVkIHN0cmluZyBvciBudWxsKTogXCIgKyBrZXkpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmFzZU9ialxufVxuXG4vLyBoZWxwZXIgdG8gZHluYW1pY2FsbHkgYXBwZW5kIG1vZGlmaWVyIHJ1bnRpbWUgbWFya2VycyB0byBldmVudCBuYW1lcy5cbi8vIGVuc3VyZSBvbmx5IGFwcGVuZCB3aGVuIHZhbHVlIGlzIGFscmVhZHkgc3RyaW5nLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBjYXN0XG4vLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXIgKHZhbHVlLCBzeW1ib2wpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzeW1ib2wgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbnN0YWxsUmVuZGVySGVscGVycyAodGFyZ2V0KSB7XG4gIHRhcmdldC5fbyA9IG1hcmtPbmNlO1xuICB0YXJnZXQuX24gPSB0b051bWJlcjtcbiAgdGFyZ2V0Ll9zID0gdG9TdHJpbmc7XG4gIHRhcmdldC5fbCA9IHJlbmRlckxpc3Q7XG4gIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7XG4gIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7XG4gIHRhcmdldC5faSA9IGxvb3NlSW5kZXhPZjtcbiAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljO1xuICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyO1xuICB0YXJnZXQuX2sgPSBjaGVja0tleUNvZGVzO1xuICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTtcbiAgdGFyZ2V0Ll9lID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzO1xuICB0YXJnZXQuX2QgPSBiaW5kRHluYW1pY0tleXM7XG4gIHRhcmdldC5fcCA9IHByZXBlbmRNb2RpZmllcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IChcbiAgZGF0YSxcbiAgcHJvcHMsXG4gIGNoaWxkcmVuLFxuICBwYXJlbnQsXG4gIEN0b3Jcbikge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG4gIHZhciBjb250ZXh0Vm07XG4gIGlmIChoYXNPd24ocGFyZW50LCAnX3VpZCcpKSB7XG4gICAgY29udGV4dFZtID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIGNvbnRleHRWbS5fb3JpZ2luYWwgPSBwYXJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNvbnRleHQgdm0gcGFzc2VkIGluIGlzIGEgZnVuY3Rpb25hbCBjb250ZXh0IGFzIHdlbGwuXG4gICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlXG4gICAgLy8gcmVhbCBjb250ZXh0IGluc3RhbmNlLlxuICAgIGNvbnRleHRWbSA9IHBhcmVudDtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBwYXJlbnQgPSBwYXJlbnQuX29yaWdpbmFsO1xuICB9XG4gIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTtcbiAgdmFyIG5lZWROb3JtYWxpemF0aW9uID0gIWlzQ29tcGlsZWQ7XG5cbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmxpc3RlbmVycyA9IGRhdGEub24gfHwgZW1wdHlPYmplY3Q7XG4gIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7XG4gIHRoaXMuc2xvdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzJDEuJHNsb3RzKSB7XG4gICAgICBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdGhpcyQxLiRzbG90cyA9IHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMkMS4kc2xvdHNcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Njb3BlZFNsb3RzJywgKHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLnNsb3RzKCkpXG4gICAgfVxuICB9KSk7XG5cbiAgLy8gc3VwcG9ydCBmb3IgY29tcGlsZWQgZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoaXNDb21waWxlZCkge1xuICAgIC8vIGV4cG9zaW5nICRvcHRpb25zIGZvciByZW5kZXJTdGF0aWMoKVxuICAgIHRoaXMuJG9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KClcbiAgICB0aGlzLiRzbG90cyA9IHRoaXMuc2xvdHMoKTtcbiAgICB0aGlzLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuJHNsb3RzKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLl9zY29wZUlkKSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pO1xuICAgICAgaWYgKHZub2RlICYmICFBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB2bm9kZS5mblNjb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgICB2bm9kZS5mbkNvbnRleHQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTsgfTtcbiAgfVxufVxuXG5pbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgcHJvcHNEYXRhLFxuICBkYXRhLFxuICBjb250ZXh0Vm0sXG4gIGNoaWxkcmVuXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIgcHJvcE9wdGlvbnMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoaXNEZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSB8fCBlbXB0eU9iamVjdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0RlZihkYXRhLmF0dHJzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLmF0dHJzKTsgfVxuICAgIGlmIChpc0RlZihkYXRhLnByb3BzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLnByb3BzKTsgfVxuICB9XG5cbiAgdmFyIHJlbmRlckNvbnRleHQgPSBuZXcgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoXG4gICAgZGF0YSxcbiAgICBwcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBjb250ZXh0Vm0sXG4gICAgQ3RvclxuICApO1xuXG4gIHZhciB2bm9kZSA9IG9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCwgcmVuZGVyQ29udGV4dC5fYywgcmVuZGVyQ29udGV4dCk7XG5cbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm4gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICB2YXIgdm5vZGVzID0gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpIHx8IFtdO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tpXSA9IGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGVzW2ldLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0ICh2bm9kZSwgZGF0YSwgY29udGV4dFZtLCBvcHRpb25zLCByZW5kZXJDb250ZXh0KSB7XG4gIC8vICM3ODE3IGNsb25lIG5vZGUgYmVmb3JlIHNldHRpbmcgZm5Db250ZXh0LCBvdGhlcndpc2UgaWYgdGhlIG5vZGUgaXMgcmV1c2VkXG4gIC8vIChlLmcuIGl0IHdhcyBmcm9tIGEgY2FjaGVkIG5vcm1hbCBzbG90KSB0aGUgZm5Db250ZXh0IGNhdXNlcyBuYW1lZCBzbG90c1xuICAvLyB0aGF0IHNob3VsZCBub3QgYmUgbWF0Y2hlZCB0byBtYXRjaC5cbiAgdmFyIGNsb25lID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gIGNsb25lLmZuQ29udGV4dCA9IGNvbnRleHRWbTtcbiAgY2xvbmUuZm5PcHRpb25zID0gb3B0aW9ucztcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAoY2xvbmUuZGV2dG9vbHNNZXRhID0gY2xvbmUuZGV2dG9vbHNNZXRhIHx8IHt9KS5yZW5kZXJDb250ZXh0ID0gcmVuZGVyQ29udGV4dDtcbiAgfVxuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGlubGluZSBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoXG52YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZVxuICAgICAgKTtcbiAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gICAgfVxuICB9LFxuXG4gIHByZXBhdGNoOiBmdW5jdGlvbiBwcmVwYXRjaCAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgdXBkYXRlQ2hpbGRDb21wb25lbnQoXG4gICAgICBjaGlsZCxcbiAgICAgIG9wdGlvbnMucHJvcHNEYXRhLCAvLyB1cGRhdGVkIHByb3BzXG4gICAgICBvcHRpb25zLmxpc3RlbmVycywgLy8gdXBkYXRlZCBsaXN0ZW5lcnNcbiAgICAgIHZub2RlLCAvLyBuZXcgcGFyZW50IHZub2RlXG4gICAgICBvcHRpb25zLmNoaWxkcmVuIC8vIG5ldyBjaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQgKHZub2RlKSB7XG4gICAgdmFyIGNvbnRleHQgPSB2bm9kZS5jb250ZXh0O1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCkge1xuICAgICAgY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCA9IHRydWU7XG4gICAgICBjYWxsSG9vayhjb21wb25lbnRJbnN0YW5jZSwgJ21vdW50ZWQnKTtcbiAgICB9XG4gICAgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICBpZiAoY29udGV4dC5faXNNb3VudGVkKSB7XG4gICAgICAgIC8vIHZ1ZS1yb3V0ZXIjMTIxMlxuICAgICAgICAvLyBEdXJpbmcgdXBkYXRlcywgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCdzIGNoaWxkIGNvbXBvbmVudHMgbWF5XG4gICAgICAgIC8vIGNoYW5nZSwgc28gZGlyZWN0bHkgd2Fsa2luZyB0aGUgdHJlZSBoZXJlIG1heSBjYWxsIGFjdGl2YXRlZCBob29rc1xuICAgICAgICAvLyBvbiBpbmNvcnJlY3QgY2hpbGRyZW4uIEluc3RlYWQgd2UgcHVzaCB0aGVtIGludG8gYSBxdWV1ZSB3aGljaCB3aWxsXG4gICAgICAgIC8vIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgd2hvbGUgcGF0Y2ggcHJvY2VzcyBlbmRlZC5cbiAgICAgICAgcXVldWVBY3RpdmF0ZWRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkKSB7XG4gICAgICBpZiAoIXZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICAgIGNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciBob29rc1RvTWVyZ2UgPSBPYmplY3Qua2V5cyhjb21wb25lbnRWTm9kZUhvb2tzKTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIGlmIChpc1VuZGVmKEN0b3IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgYmFzZUN0b3IgPSBjb250ZXh0LiRvcHRpb25zLl9iYXNlO1xuXG4gIC8vIHBsYWluIG9wdGlvbnMgb2JqZWN0OiB0dXJuIGl0IGludG8gYSBjb25zdHJ1Y3RvclxuICBpZiAoaXNPYmplY3QoQ3RvcikpIHtcbiAgICBDdG9yID0gYmFzZUN0b3IuZXh0ZW5kKEN0b3IpO1xuICB9XG5cbiAgLy8gaWYgYXQgdGhpcyBzdGFnZSBpdCdzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIGFuIGFzeW5jIGNvbXBvbmVudCBmYWN0b3J5LFxuICAvLyByZWplY3QuXG4gIGlmICh0eXBlb2YgQ3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuKChcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiICsgKFN0cmluZyhDdG9yKSkpLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBhc3luYyBjb21wb25lbnRcbiAgdmFyIGFzeW5jRmFjdG9yeTtcbiAgaWYgKGlzVW5kZWYoQ3Rvci5jaWQpKSB7XG4gICAgYXN5bmNGYWN0b3J5ID0gQ3RvcjtcbiAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KGFzeW5jRmFjdG9yeSwgYmFzZUN0b3IpO1xuICAgIGlmIChDdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIG5vZGUgZm9yIGFzeW5jIGNvbXBvbmVudCwgd2hpY2ggaXMgcmVuZGVyZWRcbiAgICAgIC8vIGFzIGEgY29tbWVudCBub2RlIGJ1dCBwcmVzZXJ2ZXMgYWxsIHRoZSByYXcgaW5mb3JtYXRpb24gZm9yIHRoZSBub2RlLlxuICAgICAgLy8gdGhlIGluZm9ybWF0aW9uIHdpbGwgYmUgdXNlZCBmb3IgYXN5bmMgc2VydmVyLXJlbmRlcmluZyBhbmQgaHlkcmF0aW9uLlxuICAgICAgcmV0dXJuIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIoXG4gICAgICAgIGFzeW5jRmFjdG9yeSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHRhZ1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuXG4gIC8vIHJlc29sdmUgY29uc3RydWN0b3Igb3B0aW9ucyBpbiBjYXNlIGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQgYWZ0ZXJcbiAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXG4gIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvcik7XG5cbiAgLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGRhdGEgaW50byBwcm9wcyAmIGV2ZW50c1xuICBpZiAoaXNEZWYoZGF0YS5tb2RlbCkpIHtcbiAgICB0cmFuc2Zvcm1Nb2RlbChDdG9yLm9wdGlvbnMsIGRhdGEpO1xuICB9XG5cbiAgLy8gZXh0cmFjdCBwcm9wc1xuICB2YXIgcHJvcHNEYXRhID0gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YShkYXRhLCBDdG9yLCB0YWcpO1xuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgZGF0YSA9IHt9O1xuICAgIGlmIChzbG90KSB7XG4gICAgICBkYXRhLnNsb3QgPSBzbG90O1xuICAgIH1cbiAgfVxuXG4gIC8vIGluc3RhbGwgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcblxuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSAoXG4gIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICB2bm9kZSxcbiAgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4gIHBhcmVudFxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIHBhcmVudDogcGFyZW50XG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICB2YXIgZXhpc3RpbmcgPSBob29rc1trZXldO1xuICAgIHZhciB0b01lcmdlID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XG4gICAgICBob29rc1trZXldID0gZXhpc3RpbmcgPyBtZXJnZUhvb2skMSh0b01lcmdlLCBleGlzdGluZykgOiB0b01lcmdlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2skMSAoZjEsIGYyKSB7XG4gIHZhciBtZXJnZWQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnlcbiAgICBmMShhLCBiKTtcbiAgICBmMihhLCBiKTtcbiAgfTtcbiAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlO1xuICByZXR1cm4gbWVyZ2VkXG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCdcbiAgOyhkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pKVtwcm9wXSA9IGRhdGEubW9kZWwudmFsdWU7XG4gIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcbiAgdmFyIGNhbGxiYWNrID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgaWYgKGlzRGVmKGV4aXN0aW5nKSkge1xuICAgIGlmIChcbiAgICAgIEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpXG4gICAgICAgID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xXG4gICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrXG4gICAgKSB7XG4gICAgICBvbltldmVudF0gPSBbY2FsbGJhY2tdLmNvbmNhdChleGlzdGluZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9uW2V2ZW50XSA9IGNhbGxiYWNrO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoKGRhdGEpLl9fb2JfXykpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmRcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEuaXMpKSB7XG4gICAgdGFnID0gZGF0YS5pcztcbiAgfVxuICBpZiAoIXRhZykge1xuICAgIC8vIGluIGNhc2Ugb2YgY29tcG9uZW50IDppcyBzZXQgdG8gZmFsc3kgdmFsdWVcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1wcmltaXRpdmUga2V5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEubmF0aXZlT24pICYmIGRhdGEudGFnICE9PSAnY29tcG9uZW50Jykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlRoZSAubmF0aXZlIG1vZGlmaWVyIGZvciB2LW9uIGlzIG9ubHkgdmFsaWQgb24gY29tcG9uZW50cyBidXQgaXQgd2FzIHVzZWQgb24gPFwiICsgdGFnICsgXCI+LlwiKSxcbiAgICAgICAgICBjb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCghZGF0YSB8fCAhZGF0YS5wcmUpICYmIGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gIH1cbn1cblxudmFyIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHJlbmRlck1peGluIChWdWUpIHtcbiAgLy8gaW5zdGFsbCBydW50aW1lIGNvbnZlbmllbmNlIGhlbHBlcnNcbiAgaW5zdGFsbFJlbmRlckhlbHBlcnMoVnVlLnByb3RvdHlwZSk7XG5cbiAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHJlZiA9IHZtLiRvcHRpb25zO1xuICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgIHZhciBfcGFyZW50Vm5vZGUgPSByZWYuX3BhcmVudFZub2RlO1xuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSkge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB2bS4kc2xvdHMsXG4gICAgICAgIHZtLiRzY29wZWRTbG90c1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG4gICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgIC8vIHJlbmRlciBzZWxmXG4gICAgdmFyIHZub2RlO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gbWFpbnRhaW4gYSBzdGFjayBiZWNhdXNlIGFsbCByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHNlcGFyYXRlbHkgZnJvbSBvbmUgYW5vdGhlci4gTmVzdGVkIGNvbXBvbmVudCdzIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gd2hlbiBwYXJlbnQgY29tcG9uZW50IGlzIHBhdGNoZWQuXG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSB2bTtcbiAgICAgIHZub2RlID0gcmVuZGVyLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyXCIpO1xuICAgICAgLy8gcmV0dXJuIGVycm9yIHJlbmRlciByZXN1bHQsXG4gICAgICAvLyBvciBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdm5vZGUgPSB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyRXJyb3JcIik7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgcmV0dXJuZWQgYXJyYXkgY29udGFpbnMgb25seSBhIHNpbmdsZSBub2RlLCBhbGxvdyBpdFxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZub2RlID0gdm5vZGVbMF07XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVuc3VyZUN0b3IgKGNvbXAsIGJhc2UpIHtcbiAgaWYgKFxuICAgIGNvbXAuX19lc01vZHVsZSB8fFxuICAgIChoYXNTeW1ib2wgJiYgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbiAgKSB7XG4gICAgY29tcCA9IGNvbXAuZGVmYXVsdDtcbiAgfVxuICByZXR1cm4gaXNPYmplY3QoY29tcClcbiAgICA/IGJhc2UuZXh0ZW5kKGNvbXApXG4gICAgOiBjb21wXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIgKFxuICBmYWN0b3J5LFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgdmFyIG5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gIG5vZGUuYXN5bmNGYWN0b3J5ID0gZmFjdG9yeTtcbiAgbm9kZS5hc3luY01ldGEgPSB7IGRhdGE6IGRhdGEsIGNvbnRleHQ6IGNvbnRleHQsIGNoaWxkcmVuOiBjaGlsZHJlbiwgdGFnOiB0YWcgfTtcbiAgcmV0dXJuIG5vZGVcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUFzeW5jQ29tcG9uZW50IChcbiAgZmFjdG9yeSxcbiAgYmFzZUN0b3Jcbikge1xuICBpZiAoaXNUcnVlKGZhY3RvcnkuZXJyb3IpICYmIGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmVycm9yQ29tcFxuICB9XG5cbiAgaWYgKGlzRGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxuXG4gIHZhciBvd25lciA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgaWYgKG93bmVyICYmIGlzRGVmKGZhY3Rvcnkub3duZXJzKSAmJiBmYWN0b3J5Lm93bmVycy5pbmRleE9mKG93bmVyKSA9PT0gLTEpIHtcbiAgICAvLyBhbHJlYWR5IHBlbmRpbmdcbiAgICBmYWN0b3J5Lm93bmVycy5wdXNoKG93bmVyKTtcbiAgfVxuXG4gIGlmIChpc1RydWUoZmFjdG9yeS5sb2FkaW5nKSAmJiBpc0RlZihmYWN0b3J5LmxvYWRpbmdDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdDb21wXG4gIH1cblxuICBpZiAob3duZXIgJiYgIWlzRGVmKGZhY3Rvcnkub3duZXJzKSkge1xuICAgIHZhciBvd25lcnMgPSBmYWN0b3J5Lm93bmVycyA9IFtvd25lcl07XG4gICAgdmFyIHN5bmMgPSB0cnVlO1xuICAgIHZhciB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgIHZhciB0aW1lclRpbWVvdXQgPSBudWxsXG5cbiAgICA7KG93bmVyKS4kb24oJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKG93bmVycywgb3duZXIpOyB9KTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb3duZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAob3duZXJzW2ldKS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKHRpbWVyTG9hZGluZyAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lckxvYWRpbmcpO1xuICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVyVGltZW91dCAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lclRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIC8vIGNhY2hlIHJlc29sdmVkXG4gICAgICBmYWN0b3J5LnJlc29sdmVkID0gZW5zdXJlQ3RvcihyZXMsIGJhc2VDdG9yKTtcbiAgICAgIC8vIGludm9rZSBjYWxsYmFja3Mgb25seSBpZiB0aGlzIGlzIG5vdCBhIHN5bmNocm9ub3VzIHJlc29sdmVcbiAgICAgIC8vIChhc3luYyByZXNvbHZlcyBhcmUgc2hpbW1lZCBhcyBzeW5jaHJvbm91cyBkdXJpbmcgU1NSKVxuICAgICAgaWYgKCFzeW5jKSB7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVqZWN0ID0gb25jZShmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50OiBcIiArIChTdHJpbmcoZmFjdG9yeSkpICtcbiAgICAgICAgKHJlYXNvbiA/IChcIlxcblJlYXNvbjogXCIgKyByZWFzb24pIDogJycpXG4gICAgICApO1xuICAgICAgaWYgKGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgICAgICBmYWN0b3J5LmVycm9yID0gdHJ1ZTtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcbiAgICAgIGlmIChpc1Byb21pc2UocmVzKSkge1xuICAgICAgICAvLyAoKSA9PiBQcm9taXNlXG4gICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2UocmVzLmNvbXBvbmVudCkpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZXMuZGVsYXkgfHwgMjAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLnRpbWVvdXQpKSB7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb24oZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDEgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9mZihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoZXZlbnQsIGZuKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0O1xuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIF90YXJnZXQuJG9mZihldmVudCwgb25jZUhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMgKFxuICB2bSxcbiAgbGlzdGVuZXJzLFxuICBvbGRMaXN0ZW5lcnNcbikge1xuICB0YXJnZXQgPSB2bTtcbiAgdXBkYXRlTGlzdGVuZXJzKGxpc3RlbmVycywgb2xkTGlzdGVuZXJzIHx8IHt9LCBhZGQsIHJlbW92ZSQxLCBjcmVhdGVPbmNlSGFuZGxlciwgdm0pO1xuICB0YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdm0uJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGFsbFxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gYXJyYXkgb2YgZXZlbnRzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpJDEgPCBsOyBpJDErKykge1xuICAgICAgICB2bS4kb2ZmKGV2ZW50W2kkMV0sIGZuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBldmVudFxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoIWNicykge1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIGlmICghZm4pIHtcbiAgICAgIHZtLl9ldmVudHNbZXZlbnRdID0gbnVsbDtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgdmFyIGNiO1xuICAgIHZhciBpID0gY2JzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjYiA9IGNic1tpXTtcbiAgICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICAgIGNicy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgdmFyIGluZm8gPSBcImV2ZW50IGhhbmRsZXIgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiXCI7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2JzW2ldLCB2bSwgYXJncywgdm0sIGluZm8pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHNldEFjdGl2ZUluc3RhbmNlKHZtKSB7XG4gIHZhciBwcmV2QWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZTtcbiAgYWN0aXZlSW5zdGFuY2UgPSB2bTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TGlmZWN5Y2xlICh2bSkge1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuXG4gIC8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50XG4gIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgaWYgKHBhcmVudCAmJiAhb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHdoaWxlIChwYXJlbnQuJG9wdGlvbnMuYWJzdHJhY3QgJiYgcGFyZW50LiRwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO1xuICB9XG5cbiAgdm0uJHBhcmVudCA9IHBhcmVudDtcbiAgdm0uJHJvb3QgPSBwYXJlbnQgPyBwYXJlbnQuJHJvb3QgOiB2bTtcblxuICB2bS4kY2hpbGRyZW4gPSBbXTtcbiAgdm0uJHJlZnMgPSB7fTtcblxuICB2bS5fd2F0Y2hlciA9IG51bGw7XG4gIHZtLl9pbmFjdGl2ZSA9IG51bGw7XG4gIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICB2bS5faXNNb3VudGVkID0gZmFsc2U7XG4gIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBsaWZlY3ljbGVNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHZtKTtcbiAgICB2bS5fdm5vZGUgPSB2bm9kZTtcbiAgICAvLyBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyBpcyBpbmplY3RlZCBpbiBlbnRyeSBwb2ludHNcbiAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cbiAgICBpZiAoIXByZXZWbm9kZSkge1xuICAgICAgLy8gaW5pdGlhbCByZW5kZXJcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyh2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGVzXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgIC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSB2bTtcbiAgICB9XG4gICAgLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbFxuICAgIGlmICh2bS4kdm5vZGUgJiYgdm0uJHBhcmVudCAmJiB2bS4kdm5vZGUgPT09IHZtLiRwYXJlbnQuX3Zub2RlKSB7XG4gICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDtcbiAgICB9XG4gICAgLy8gdXBkYXRlZCBob29rIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHRvIGVuc3VyZSB0aGF0IGNoaWxkcmVuIGFyZVxuICAgIC8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVEZXN0cm95Jyk7XG4gICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50XG4gICAgdmFyIHBhcmVudCA9IHZtLiRwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgICAgcmVtb3ZlKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcbiAgICB9XG4gICAgLy8gdGVhcmRvd24gd2F0Y2hlcnNcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIHZhciBpID0gdm0uX3dhdGNoZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2bS5fd2F0Y2hlcnNbaV0udGVhcmRvd24oKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcbiAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cbiAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XG4gICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuICAgIH1cbiAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIGludm9rZSBkZXN0cm95IGhvb2tzIG9uIGN1cnJlbnQgcmVuZGVyZWQgdHJlZVxuICAgIHZtLl9fcGF0Y2hfXyh2bS5fdm5vZGUsIG51bGwpO1xuICAgIC8vIGZpcmUgZGVzdHJveWVkIGhvb2tcbiAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpO1xuICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgdm0uJG9mZigpO1xuICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgLy8gcmVsZWFzZSBjaXJjdWxhciByZWZlcmVuY2UgKCM2NzU5KVxuICAgIGlmICh2bS4kdm5vZGUpIHtcbiAgICAgIHZtLiR2bm9kZS5wYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbW91bnRDb21wb25lbnQgKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIHZtLiRlbCA9IGVsO1xuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcbiAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXG4gICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBuYW1lID0gdm0uX25hbWU7XG4gICAgICB2YXIgaWQgPSB2bS5fdWlkO1xuICAgICAgdmFyIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArIGlkO1xuICAgICAgdmFyIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgaWQ7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdmFyIHZub2RlID0gdm0uX3JlbmRlcigpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcmVuZGVyXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2bS5fdXBkYXRlKHZub2RlLCBoeWRyYXRpbmcpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcGF0Y2hcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIHdlIHNldCB0aGlzIHRvIHZtLl93YXRjaGVyIGluc2lkZSB0aGUgd2F0Y2hlcidzIGNvbnN0cnVjdG9yXG4gIC8vIHNpbmNlIHRoZSB3YXRjaGVyJ3MgaW5pdGlhbCBwYXRjaCBtYXkgY2FsbCAkZm9yY2VVcGRhdGUgKGUuZy4gaW5zaWRlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCdzIG1vdW50ZWQgaG9vayksIHdoaWNoIHJlbGllcyBvbiB2bS5fd2F0Y2hlciBiZWluZyBhbHJlYWR5IGRlZmluZWRcbiAgbmV3IFdhdGNoZXIodm0sIHVwZGF0ZUNvbXBvbmVudCwgbm9vcCwge1xuICAgIGJlZm9yZTogZnVuY3Rpb24gYmVmb3JlICgpIHtcbiAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4uXG5cbiAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGR5bmFtaWMgc2NvcGVkU2xvdHMgKGhhbmQtd3JpdHRlbiBvciBjb21waWxlZCBidXQgd2l0aFxuICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZVxuICAvLyBcIiRzdGFibGVcIiBtYXJrZXIuXG4gIHZhciBuZXdTY29wZWRTbG90cyA9IHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7XG4gIHZhciBvbGRTY29wZWRTbG90cyA9IHZtLiRzY29wZWRTbG90cztcbiAgdmFyIGhhc0R5bmFtaWNTY29wZWRTbG90ID0gISEoXG4gICAgKG5ld1Njb3BlZFNsb3RzICYmICFuZXdTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChvbGRTY29wZWRTbG90cyAhPT0gZW1wdHlPYmplY3QgJiYgIW9sZFNjb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG5ld1Njb3BlZFNsb3RzICYmIHZtLiRzY29wZWRTbG90cy4ka2V5ICE9PSBuZXdTY29wZWRTbG90cy4ka2V5KSB8fFxuICAgICghbmV3U2NvcGVkU2xvdHMgJiYgdm0uJHNjb3BlZFNsb3RzLiRrZXkpXG4gICk7XG5cbiAgLy8gQW55IHN0YXRpYyBzbG90IGNoaWxkcmVuIGZyb20gdGhlIHBhcmVudCBtYXkgaGF2ZSBjaGFuZ2VkIGR1cmluZyBwYXJlbnQnc1xuICAvLyB1cGRhdGUuIER5bmFtaWMgc2NvcGVkIHNsb3RzIG1heSBhbHNvIGhhdmUgY2hhbmdlZC4gSW4gc3VjaCBjYXNlcywgYSBmb3JjZWRcbiAgLy8gdXBkYXRlIGlzIG5lY2Vzc2FyeSB0byBlbnN1cmUgY29ycmVjdG5lc3MuXG4gIHZhciBuZWVkc0ZvcmNlVXBkYXRlID0gISEoXG4gICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHNcbiAgICBoYXNEeW5hbWljU2NvcGVkU2xvdFxuICApO1xuXG4gIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlclxuXG4gIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XG4gIH1cbiAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgLy8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoXG4gIC8vIHRoZXNlIGFyZSBhbHNvIHJlYWN0aXZlIHNvIHRoZXkgbWF5IHRyaWdnZXIgY2hpbGQgdXBkYXRlIGlmIHRoZSBjaGlsZFxuICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0O1xuICB2bS4kbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuXG4gIC8vIHVwZGF0ZSBwcm9wc1xuICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgIHZhciBwcm9wT3B0aW9ucyA9IHZtLiRvcHRpb25zLnByb3BzOyAvLyB3dGYgZmxvdz9cbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgfVxuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcblxuICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICBpZiAobmVlZHNGb3JjZVVwZGF0ZSkge1xuICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhyZW5kZXJDaGlsZHJlbiwgcGFyZW50Vm5vZGUuY29udGV4dCk7XG4gICAgdm0uJGZvcmNlVXBkYXRlKCk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSW5JbmFjdGl2ZVRyZWUgKHZtKSB7XG4gIHdoaWxlICh2bSAmJiAodm0gPSB2bS4kcGFyZW50KSkge1xuICAgIGlmICh2bS5faW5hY3RpdmUpIHsgcmV0dXJuIHRydWUgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfSBlbHNlIGlmICh2bS5fZGlyZWN0SW5hY3RpdmUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodm0uX2luYWN0aXZlIHx8IHZtLl9pbmFjdGl2ZSA9PT0gbnVsbCkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIGlmICghdm0uX2luYWN0aXZlKSB7XG4gICAgdm0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnZGVhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayAodm0sIGhvb2spIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICB2YXIgaW5mbyA9IGhvb2sgKyBcIiBob29rXCI7XG4gIGlmIChoYW5kbGVycykge1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhoYW5kbGVyc1tpXSwgdm0sIG51bGwsIHZtLCBpbmZvKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNpcmN1bGFyID0ge307XG4gIH1cbiAgd2FpdGluZyA9IGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSAjNjU2NiByZXF1aXJlcyBzYXZpbmcgdGhlIHRpbWVzdGFtcCB3aGVuIGV2ZW50IGxpc3RlbmVycyBhcmVcbi8vIGF0dGFjaGVkLiBIb3dldmVyLCBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpIGhhcyBhIHBlcmYgb3ZlcmhlYWQgZXNwZWNpYWxseVxuLy8gaWYgdGhlIHBhZ2UgaGFzIHRob3VzYW5kcyBvZiBldmVudCBsaXN0ZW5lcnMuIEluc3RlYWQsIHdlIHRha2UgYSB0aW1lc3RhbXBcbi8vIGV2ZXJ5IHRpbWUgdGhlIHNjaGVkdWxlciBmbHVzaGVzIGFuZCB1c2UgdGhhdCBmb3IgYWxsIGV2ZW50IGxpc3RlbmVyc1xuLy8gYXR0YWNoZWQgZHVyaW5nIHRoYXQgZmx1c2guXG52YXIgY3VycmVudEZsdXNoVGltZXN0YW1wID0gMDtcblxuLy8gQXN5bmMgZWRnZSBjYXNlIGZpeCByZXF1aXJlcyBzdG9yaW5nIGFuIGV2ZW50IGxpc3RlbmVyJ3MgYXR0YWNoIHRpbWVzdGFtcC5cbnZhciBnZXROb3cgPSBEYXRlLm5vdztcblxuLy8gRGV0ZXJtaW5lIHdoYXQgZXZlbnQgdGltZXN0YW1wIHRoZSBicm93c2VyIGlzIHVzaW5nLiBBbm5veWluZ2x5LCB0aGVcbi8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzXG4vLyAocmVsYXRpdmUgdG8gVU5JWCBlcG9jaCksIHNvIGluIG9yZGVyIHRvIGNvbXBhcmUgdGltZSB3ZSBoYXZlIHRvIHVzZSB0aGVcbi8vIHNhbWUgdGltZXN0YW1wIHR5cGUgd2hlbiBzYXZpbmcgdGhlIGZsdXNoIHRpbWVzdGFtcC5cbi8vIEFsbCBJRSB2ZXJzaW9ucyB1c2UgbG93LXJlcyBldmVudCB0aW1lc3RhbXBzLCBhbmQgaGF2ZSBwcm9ibGVtYXRpYyBjbG9ja1xuLy8gaW1wbGVtZW50YXRpb25zICgjOTYzMilcbmlmIChpbkJyb3dzZXIgJiYgIWlzSUUpIHtcbiAgdmFyIHBlcmZvcm1hbmNlID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICBpZiAoXG4gICAgcGVyZm9ybWFuY2UgJiZcbiAgICB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nICYmXG4gICAgZ2V0Tm93KCkgPiBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKS50aW1lU3RhbXBcbiAgKSB7XG4gICAgLy8gaWYgdGhlIGV2ZW50IHRpbWVzdGFtcCwgYWx0aG91Z2ggZXZhbHVhdGVkIEFGVEVSIHRoZSBEYXRlLm5vdygpLCBpc1xuICAgIC8vIHNtYWxsZXIgdGhhbiBpdCwgaXQgbWVhbnMgdGhlIGV2ZW50IGlzIHVzaW5nIGEgaGktcmVzIHRpbWVzdGFtcCxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byB1c2UgdGhlIGhpLXJlcyB2ZXJzaW9uIGZvciBldmVudCBsaXN0ZW5lciB0aW1lc3RhbXBzIGFzXG4gICAgLy8gd2VsbC5cbiAgICBnZXROb3cgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTsgfTtcbiAgfVxufVxuXG4vKipcbiAqIEZsdXNoIGJvdGggcXVldWVzIGFuZCBydW4gdGhlIHdhdGNoZXJzLlxuICovXG5mdW5jdGlvbiBmbHVzaFNjaGVkdWxlclF1ZXVlICgpIHtcbiAgY3VycmVudEZsdXNoVGltZXN0YW1wID0gZ2V0Tm93KCk7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWYgKHdhdGNoZXIuYmVmb3JlKSB7XG4gICAgICB3YXRjaGVyLmJlZm9yZSgpO1xuICAgIH1cbiAgICBpZCA9IHdhdGNoZXIuaWQ7XG4gICAgaGFzW2lkXSA9IG51bGw7XG4gICAgd2F0Y2hlci5ydW4oKTtcbiAgICAvLyBpbiBkZXYgYnVpbGQsIGNoZWNrIGFuZCBzdG9wIGNpcmN1bGFyIHVwZGF0ZXMuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaGFzW2lkXSAhPSBudWxsKSB7XG4gICAgICBjaXJjdWxhcltpZF0gPSAoY2lyY3VsYXJbaWRdIHx8IDApICsgMTtcbiAgICAgIGlmIChjaXJjdWxhcltpZF0gPiBNQVhfVVBEQVRFX0NPVU5UKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCAnICsgKFxuICAgICAgICAgICAgd2F0Y2hlci51c2VyXG4gICAgICAgICAgICAgID8gKFwiaW4gd2F0Y2hlciB3aXRoIGV4cHJlc3Npb24gXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIilcbiAgICAgICAgICAgICAgOiBcImluIGEgY29tcG9uZW50IHJlbmRlciBmdW5jdGlvbi5cIlxuICAgICAgICAgICksXG4gICAgICAgICAgd2F0Y2hlci52bVxuICAgICAgICApO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGtlZXAgY29waWVzIG9mIHBvc3QgcXVldWVzIGJlZm9yZSByZXNldHRpbmcgc3RhdGVcbiAgdmFyIGFjdGl2YXRlZFF1ZXVlID0gYWN0aXZhdGVkQ2hpbGRyZW4uc2xpY2UoKTtcbiAgdmFyIHVwZGF0ZWRRdWV1ZSA9IHF1ZXVlLnNsaWNlKCk7XG5cbiAgcmVzZXRTY2hlZHVsZXJTdGF0ZSgpO1xuXG4gIC8vIGNhbGwgY29tcG9uZW50IHVwZGF0ZWQgYW5kIGFjdGl2YXRlZCBob29rc1xuICBjYWxsQWN0aXZhdGVkSG9va3MoYWN0aXZhdGVkUXVldWUpO1xuICBjYWxsVXBkYXRlZEhvb2tzKHVwZGF0ZWRRdWV1ZSk7XG5cbiAgLy8gZGV2dG9vbCBob29rXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7XG4gICAgZGV2dG9vbHMuZW1pdCgnZmx1c2gnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsVXBkYXRlZEhvb2tzIChxdWV1ZSkge1xuICB2YXIgaSA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciB3YXRjaGVyID0gcXVldWVbaV07XG4gICAgdmFyIHZtID0gd2F0Y2hlci52bTtcbiAgICBpZiAodm0uX3dhdGNoZXIgPT09IHdhdGNoZXIgJiYgdm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAgICAgZmx1c2hTY2hlZHVsZXJRdWV1ZSgpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbnZhciB1aWQkMiA9IDA7XG5cbi8qKlxuICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gKiBhbmQgZmlyZXMgY2FsbGJhY2sgd2hlbiB0aGUgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzLlxuICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cbnZhciBXYXRjaGVyID0gZnVuY3Rpb24gV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBjYixcbiAgb3B0aW9ucyxcbiAgaXNSZW5kZXJXYXRjaGVyXG4pIHtcbiAgdGhpcy52bSA9IHZtO1xuICBpZiAoaXNSZW5kZXJXYXRjaGVyKSB7XG4gICAgdm0uX3dhdGNoZXIgPSB0aGlzO1xuICB9XG4gIHZtLl93YXRjaGVycy5wdXNoKHRoaXMpO1xuICAvLyBvcHRpb25zXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdGhpcy5kZWVwID0gISFvcHRpb25zLmRlZXA7XG4gICAgdGhpcy51c2VyID0gISFvcHRpb25zLnVzZXI7XG4gICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7XG4gICAgdGhpcy5zeW5jID0gISFvcHRpb25zLnN5bmM7XG4gICAgdGhpcy5iZWZvcmUgPSBvcHRpb25zLmJlZm9yZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQyOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgID8gZXhwT3JGbi50b1N0cmluZygpXG4gICAgOiAnJztcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IG5vb3A7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHdhdGNoaW5nIHBhdGg6IFxcXCJcIiArIGV4cE9yRm4gKyBcIlxcXCIgXCIgK1xuICAgICAgICAnV2F0Y2hlciBvbmx5IGFjY2VwdHMgc2ltcGxlIGRvdC1kZWxpbWl0ZWQgcGF0aHMuICcgK1xuICAgICAgICAnRm9yIGZ1bGwgY29udHJvbCwgdXNlIGEgZnVuY3Rpb24gaW5zdGVhZC4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgdGhpcy52YWx1ZSA9IHRoaXMubGF6eVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiB0aGlzLmdldCgpO1xufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgZ2V0dGVyLCBhbmQgcmUtY29sbGVjdCBkZXBlbmRlbmNpZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoKSB7XG4gIHB1c2hUYXJnZXQodGhpcyk7XG4gIHZhciB2YWx1ZTtcbiAgdmFyIHZtID0gdGhpcy52bTtcbiAgdHJ5IHtcbiAgICB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwodm0sIHZtKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJnZXR0ZXIgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlXG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIC8vIFwidG91Y2hcIiBldmVyeSBwcm9wZXJ0eSBzbyB0aGV5IGFyZSBhbGwgdHJhY2tlZCBhc1xuICAgIC8vIGRlcGVuZGVuY2llcyBmb3IgZGVlcCB3YXRjaGluZ1xuICAgIGlmICh0aGlzLmRlZXApIHtcbiAgICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgcG9wVGFyZ2V0KCk7XG4gICAgdGhpcy5jbGVhbnVwRGVwcygpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufTtcblxuLyoqXG4gKiBBZGQgYSBkZXBlbmRlbmN5IHRvIHRoaXMgZGlyZWN0aXZlLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5hZGREZXAgPSBmdW5jdGlvbiBhZGREZXAgKGRlcCkge1xuICB2YXIgaWQgPSBkZXAuaWQ7XG4gIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGlkKSkge1xuICAgIHRoaXMubmV3RGVwSWRzLmFkZChpZCk7XG4gICAgdGhpcy5uZXdEZXBzLnB1c2goZGVwKTtcbiAgICBpZiAoIXRoaXMuZGVwSWRzLmhhcyhpZCkpIHtcbiAgICAgIGRlcC5hZGRTdWIodGhpcyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIGZvciBkZXBlbmRlbmN5IGNvbGxlY3Rpb24uXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmNsZWFudXBEZXBzID0gZnVuY3Rpb24gY2xlYW51cERlcHMgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcy5kZXBzW2ldO1xuICAgIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGRlcC5pZCkpIHtcbiAgICAgIGRlcC5yZW1vdmVTdWIodGhpcyk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHZhciBpbmZvID0gXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiO1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyh0aGlzLmNiLCB0aGlzLnZtLCBbdmFsdWUsIG9sZFZhbHVlXSwgdGhpcy52bSwgaW5mbyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNSb290ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcImRhdGEoKVwiKTtcbiAgICByZXR1cm4ge31cbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG52YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBqdXN0IGdldHRlcnMgZHVyaW5nIFNTUlxuICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxuICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKFxuICAgICAgICB2bSxcbiAgICAgICAgZ2V0dGVyIHx8IG5vb3AsXG4gICAgICAgIG5vb3AsXG4gICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4gICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcbiAgICAgIH0gZWxzZSBpZiAodm0uJG9wdGlvbnMubWV0aG9kcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMubWV0aG9kcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgbWV0aG9kLlwiKSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZpbmVDb21wdXRlZCAoXG4gIHRhcmdldCxcbiAga2V5LFxuICB1c2VyRGVmXG4pIHtcbiAgdmFyIHNob3VsZENhY2hlID0gIWlzU2VydmVyUmVuZGVyaW5nKCk7XG4gIGlmICh0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBzaG91bGRDYWNoZVxuICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZik7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IG5vb3A7XG4gIH0gZWxzZSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHVzZXJEZWYuZ2V0XG4gICAgICA/IHNob3VsZENhY2hlICYmIHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlXG4gICAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZi5nZXQpXG4gICAgICA6IG5vb3A7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IHVzZXJEZWYuc2V0IHx8IG5vb3A7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPT09IG5vb3ApIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiQ29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBhc3NpZ25lZCB0byBidXQgaXQgaGFzIG5vIHNldHRlci5cIiksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVkR2V0dGVyIChrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICB2YXIgd2F0Y2hlciA9IHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnMgJiYgdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1trZXldO1xuICAgIGlmICh3YXRjaGVyKSB7XG4gICAgICBpZiAod2F0Y2hlci5kaXJ0eSkge1xuICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdhdGNoZXIudmFsdWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHRoaXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE1ldGhvZHMgKHZtLCBtZXRob2RzKSB7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgdHlwZSBcXFwiXCIgKyAodHlwZW9mIG1ldGhvZHNba2V5XSkgKyBcIlxcXCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChrZXkgaW4gdm0pICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiBcIiArXG4gICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZtW2tleV0gPSB0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nID8gbm9vcCA6IGJpbmQobWV0aG9kc1trZXldLCB2bSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgZm9yICh2YXIga2V5IGluIHdhdGNoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBoYW5kbGVyLFxuICBvcHRpb25zXG4pIHtcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgcmV0dXJuIHZtLiR3YXRjaChleHBPckZuLCBoYW5kbGVyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YSB9O1xuICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvcHMgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgdmFyIGluZm8gPSBcImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiO1xuICAgICAgcHVzaFRhcmdldCgpO1xuICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2IsIHZtLCBbd2F0Y2hlci52YWx1ZV0sIHZtLCBpbmZvKTtcbiAgICAgIHBvcFRhcmdldCgpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuICgpIHtcbiAgICAgIHdhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkJDMgPSAwO1xuXG5mdW5jdGlvbiBpbml0TWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGEgdWlkXG4gICAgdm0uX3VpZCA9IHVpZCQzKys7XG5cbiAgICB2YXIgc3RhcnRUYWcsIGVuZFRhZztcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgKHZtLl91aWQpO1xuICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbml0UHJveHkodm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gICAgLy8gZXhwb3NlIHJlYWwgc2VsZlxuICAgIHZtLl9zZWxmID0gdm07XG4gICAgaW5pdExpZmVjeWNsZSh2bSk7XG4gICAgaW5pdEV2ZW50cyh2bSk7XG4gICAgaW5pdFJlbmRlcih2bSk7XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcbiAgICBpbml0SW5qZWN0aW9ucyh2bSk7IC8vIHJlc29sdmUgaW5qZWN0aW9ucyBiZWZvcmUgZGF0YS9wcm9wc1xuICAgIGluaXRTdGF0ZSh2bSk7XG4gICAgaW5pdFByb3ZpZGUodm0pOyAvLyByZXNvbHZlIHByb3ZpZGUgYWZ0ZXIgZGF0YS9wcm9wc1xuICAgIGNhbGxIb29rKHZtLCAnY3JlYXRlZCcpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHZtLl9uYW1lID0gZm9ybWF0Q29tcG9uZW50TmFtZSh2bSwgZmFsc2UpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyAodm0uX25hbWUpICsgXCIgaW5pdFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfVxuXG4gICAgaWYgKHZtLiRvcHRpb25zLmVsKSB7XG4gICAgICB2bS4kbW91bnQodm0uJG9wdGlvbnMuZWwpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdEludGVybmFsQ29tcG9uZW50ICh2bSwgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTtcbiAgLy8gZG9pbmcgdGhpcyBiZWNhdXNlIGl0J3MgZmFzdGVyIHRoYW4gZHluYW1pYyBlbnVtZXJhdGlvbi5cbiAgdmFyIHBhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIG9wdHMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG5cbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgc2VhbGVkID0gQ3Rvci5zZWFsZWRPcHRpb25zO1xuICBmb3IgKHZhciBrZXkgaW4gbGF0ZXN0KSB7XG4gICAgaWYgKGxhdGVzdFtrZXldICE9PSBzZWFsZWRba2V5XSkge1xuICAgICAgaWYgKCFtb2RpZmllZCkgeyBtb2RpZmllZCA9IHt9OyB9XG4gICAgICBtb2RpZmllZFtrZXldID0gbGF0ZXN0W2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZFxufVxuXG5mdW5jdGlvbiBWdWUgKG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAhKHRoaXMgaW5zdGFuY2VvZiBWdWUpXG4gICkge1xuICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgfVxuICB0aGlzLl9pbml0KG9wdGlvbnMpO1xufVxuXG5pbml0TWl4aW4oVnVlKTtcbnN0YXRlTWl4aW4oVnVlKTtcbmV2ZW50c01peGluKFZ1ZSk7XG5saWZlY3ljbGVNaXhpbihWdWUpO1xucmVuZGVyTWl4aW4oVnVlKTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkge1xuICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBpbnN0YWxsZWRQbHVnaW5zID0gKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgfHwgKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgPSBbXSkpO1xuICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA+IC0xKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8vIGFkZGl0aW9uYWwgcGFyYW1ldGVyc1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAodHlwZW9mIHBsdWdpbi5pbnN0YWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdE1peGluJDEgKFZ1ZSkge1xuICBWdWUubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAvKipcbiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAqL1xuICBWdWUuY2lkID0gMDtcbiAgdmFyIGNpZCA9IDE7XG5cbiAgLyoqXG4gICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAqL1xuICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgU3VwZXIgPSB0aGlzO1xuICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgaWYgKGNhY2hlZEN0b3JzW1N1cGVySWRdKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbmFtZSkge1xuICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBTdWIgPSBmdW5jdGlvbiBWdWVDb21wb25lbnQgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgfTtcbiAgICBTdWIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICAgIFN1Yi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWI7XG4gICAgU3ViLmNpZCA9IGNpZCsrO1xuICAgIFN1Yi5vcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgU3VwZXIub3B0aW9ucyxcbiAgICAgIGV4dGVuZE9wdGlvbnNcbiAgICApO1xuICAgIFN1Ylsnc3VwZXInXSA9IFN1cGVyO1xuXG4gICAgLy8gRm9yIHByb3BzIGFuZCBjb21wdXRlZCBwcm9wZXJ0aWVzLCB3ZSBkZWZpbmUgdGhlIHByb3h5IGdldHRlcnMgb25cbiAgICAvLyB0aGUgVnVlIGluc3RhbmNlcyBhdCBleHRlbnNpb24gdGltZSwgb24gdGhlIGV4dGVuZGVkIHByb3RvdHlwZS4gVGhpc1xuICAgIC8vIGF2b2lkcyBPYmplY3QuZGVmaW5lUHJvcGVydHkgY2FsbHMgZm9yIGVhY2ggaW5zdGFuY2UgY3JlYXRlZC5cbiAgICBpZiAoU3ViLm9wdGlvbnMucHJvcHMpIHtcbiAgICAgIGluaXRQcm9wcyQxKFN1Yik7XG4gICAgfVxuICAgIGlmIChTdWIub3B0aW9ucy5jb21wdXRlZCkge1xuICAgICAgaW5pdENvbXB1dGVkJDEoU3ViKTtcbiAgICB9XG5cbiAgICAvLyBhbGxvdyBmdXJ0aGVyIGV4dGVuc2lvbi9taXhpbi9wbHVnaW4gdXNhZ2VcbiAgICBTdWIuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kO1xuICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluO1xuICAgIFN1Yi51c2UgPSBTdXBlci51c2U7XG5cbiAgICAvLyBjcmVhdGUgYXNzZXQgcmVnaXN0ZXJzLCBzbyBleHRlbmRlZCBjbGFzc2VzXG4gICAgLy8gY2FuIGhhdmUgdGhlaXIgcHJpdmF0ZSBhc3NldHMgdG9vLlxuICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIFN1Ylt0eXBlXSA9IFN1cGVyW3R5cGVdO1xuICAgIH0pO1xuICAgIC8vIGVuYWJsZSByZWN1cnNpdmUgc2VsZi1sb29rdXBcbiAgICBpZiAobmFtZSkge1xuICAgICAgU3ViLm9wdGlvbnMuY29tcG9uZW50c1tuYW1lXSA9IFN1YjtcbiAgICB9XG5cbiAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLlxuICAgIC8vIGxhdGVyIGF0IGluc3RhbnRpYXRpb24gd2UgY2FuIGNoZWNrIGlmIFN1cGVyJ3Mgb3B0aW9ucyBoYXZlXG4gICAgLy8gYmVlbiB1cGRhdGVkLlxuICAgIFN1Yi5zdXBlck9wdGlvbnMgPSBTdXBlci5vcHRpb25zO1xuICAgIFN1Yi5leHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucztcbiAgICBTdWIuc2VhbGVkT3B0aW9ucyA9IGV4dGVuZCh7fSwgU3ViLm9wdGlvbnMpO1xuXG4gICAgLy8gY2FjaGUgY29uc3RydWN0b3JcbiAgICBjYWNoZWRDdG9yc1tTdXBlcklkXSA9IFN1YjtcbiAgICByZXR1cm4gU3ViXG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyQxIChDb21wKSB7XG4gIHZhciBwcm9wcyA9IENvbXAub3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgcHJveHkoQ29tcC5wcm90b3R5cGUsIFwiX3Byb3BzXCIsIGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkJDEgKENvbXApIHtcbiAgdmFyIGNvbXB1dGVkID0gQ29tcC5vcHRpb25zLmNvbXB1dGVkO1xuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICBkZWZpbmVDb21wdXRlZChDb21wLnByb3RvdHlwZSwga2V5LCBjb21wdXRlZFtrZXldKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEFzc2V0UmVnaXN0ZXJzIChWdWUpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhc3NldCByZWdpc3RyYXRpb24gbWV0aG9kcy5cbiAgICovXG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWVbdHlwZV0gPSBmdW5jdGlvbiAoXG4gICAgICBpZCxcbiAgICAgIGRlZmluaXRpb25cbiAgICApIHtcbiAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGUgPT09ICdjb21wb25lbnQnKSB7XG4gICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgaXNQbGFpbk9iamVjdChkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDtcbiAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2RpcmVjdGl2ZScgJiYgdHlwZW9mIGRlZmluaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuLyogICovXG5cblxuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGVudHJ5ID0gY2FjaGVba2V5XTtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIHZhciBuYW1lID0gZW50cnkubmFtZTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgZW50cnkgPSBjYWNoZVtrZXldO1xuICBpZiAoZW50cnkgJiYgKCFjdXJyZW50IHx8IGVudHJ5LnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgZW50cnkuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgfVxuICBjYWNoZVtrZXldID0gbnVsbDtcbiAgcmVtb3ZlKGtleXMsIGtleSk7XG59XG5cbnZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTtcblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGNhY2hlVk5vZGU6IGZ1bmN0aW9uIGNhY2hlVk5vZGUoKSB7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZi5jYWNoZTtcbiAgICAgIHZhciBrZXlzID0gcmVmLmtleXM7XG4gICAgICB2YXIgdm5vZGVUb0NhY2hlID0gcmVmLnZub2RlVG9DYWNoZTtcbiAgICAgIHZhciBrZXlUb0NhY2hlID0gcmVmLmtleVRvQ2FjaGU7XG4gICAgICBpZiAodm5vZGVUb0NhY2hlKSB7XG4gICAgICAgIHZhciB0YWcgPSB2bm9kZVRvQ2FjaGUudGFnO1xuICAgICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZVRvQ2FjaGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGVUb0NhY2hlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgIGNhY2hlW2tleVRvQ2FjaGVdID0ge1xuICAgICAgICAgIG5hbWU6IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyksXG4gICAgICAgICAgdGFnOiB0YWcsXG4gICAgICAgICAgY29tcG9uZW50SW5zdGFuY2U6IGNvbXBvbmVudEluc3RhbmNlLFxuICAgICAgICB9O1xuICAgICAgICBrZXlzLnB1c2goa2V5VG9DYWNoZSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZub2RlVG9DYWNoZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLmNhY2hlVk5vZGUoKTtcbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgdGhpcy5jYWNoZVZOb2RlKCk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlbGF5IHNldHRpbmcgdGhlIGNhY2hlIHVudGlsIHVwZGF0ZVxuICAgICAgICB0aGlzLnZub2RlVG9DYWNoZSA9IHZub2RlO1xuICAgICAgICB0aGlzLmtleVRvQ2FjaGUgPSBrZXk7XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn07XG5cbnZhciBidWlsdEluQ29tcG9uZW50cyA9IHtcbiAgS2VlcEFsaXZlOiBLZWVwQWxpdmVcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0R2xvYmFsQVBJIChWdWUpIHtcbiAgLy8gY29uZmlnXG4gIHZhciBjb25maWdEZWYgPSB7fTtcbiAgY29uZmlnRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZzsgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25maWdEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCByZXBsYWNlIHRoZSBWdWUuY29uZmlnIG9iamVjdCwgc2V0IGluZGl2aWR1YWwgZmllbGRzIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdjb25maWcnLCBjb25maWdEZWYpO1xuXG4gIC8vIGV4cG9zZWQgdXRpbCBtZXRob2RzLlxuICAvLyBOT1RFOiB0aGVzZSBhcmUgbm90IGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgcHVibGljIEFQSSAtIGF2b2lkIHJlbHlpbmcgb25cbiAgLy8gdGhlbSB1bmxlc3MgeW91IGFyZSBhd2FyZSBvZiB0aGUgcmlzay5cbiAgVnVlLnV0aWwgPSB7XG4gICAgd2Fybjogd2FybixcbiAgICBleHRlbmQ6IGV4dGVuZCxcbiAgICBtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucyxcbiAgICBkZWZpbmVSZWFjdGl2ZTogZGVmaW5lUmVhY3RpdmUkJDFcbiAgfTtcblxuICBWdWUuc2V0ID0gc2V0O1xuICBWdWUuZGVsZXRlID0gZGVsO1xuICBWdWUubmV4dFRpY2sgPSBuZXh0VGljaztcblxuICAvLyAyLjYgZXhwbGljaXQgb2JzZXJ2YWJsZSBBUElcbiAgVnVlLm9ic2VydmFibGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgb2JzZXJ2ZShvYmopO1xuICAgIHJldHVybiBvYmpcbiAgfTtcblxuICBWdWUub3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWUub3B0aW9uc1t0eXBlICsgJ3MnXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH0pO1xuXG4gIC8vIHRoaXMgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgXCJiYXNlXCIgY29uc3RydWN0b3IgdG8gZXh0ZW5kIGFsbCBwbGFpbi1vYmplY3RcbiAgLy8gY29tcG9uZW50cyB3aXRoIGluIFdlZXgncyBtdWx0aS1pbnN0YW5jZSBzY2VuYXJpb3MuXG4gIFZ1ZS5vcHRpb25zLl9iYXNlID0gVnVlO1xuXG4gIGV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBidWlsdEluQ29tcG9uZW50cyk7XG5cbiAgaW5pdFVzZShWdWUpO1xuICBpbml0TWl4aW4kMShWdWUpO1xuICBpbml0RXh0ZW5kKFZ1ZSk7XG4gIGluaXRBc3NldFJlZ2lzdGVycyhWdWUpO1xufVxuXG5pbml0R2xvYmFsQVBJKFZ1ZSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xuICBnZXQ6IGlzU2VydmVyUmVuZGVyaW5nXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckc3NyQ29udGV4dCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHRcbiAgfVxufSk7XG5cbi8vIGV4cG9zZSBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCBmb3Igc3NyIHJ1bnRpbWUgaGVscGVyIGluc3RhbGxhdGlvblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ0Z1bmN0aW9uYWxSZW5kZXJDb250ZXh0Jywge1xuICB2YWx1ZTogRnVuY3Rpb25hbFJlbmRlckNvbnRleHRcbn0pO1xuXG5WdWUudmVyc2lvbiA9ICcyLjYuMTQnO1xuXG4vKiAgKi9cblxuLy8gdGhlc2UgYXJlIHJlc2VydmVkIGZvciB3ZWIgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSBjb21waWxlZCBhd2F5XG4vLyBkdXJpbmcgdGVtcGxhdGUgY29tcGlsYXRpb25cbnZhciBpc1Jlc2VydmVkQXR0ciA9IG1ha2VNYXAoJ3N0eWxlLGNsYXNzJyk7XG5cbi8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcbnZhciBhY2NlcHRWYWx1ZSA9IG1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MnKTtcbnZhciBtdXN0VXNlUHJvcCA9IGZ1bmN0aW9uICh0YWcsIHR5cGUsIGF0dHIpIHtcbiAgcmV0dXJuIChcbiAgICAoYXR0ciA9PT0gJ3ZhbHVlJyAmJiBhY2NlcHRWYWx1ZSh0YWcpKSAmJiB0eXBlICE9PSAnYnV0dG9uJyB8fFxuICAgIChhdHRyID09PSAnc2VsZWN0ZWQnICYmIHRhZyA9PT0gJ29wdGlvbicpIHx8XG4gICAgKGF0dHIgPT09ICdjaGVja2VkJyAmJiB0YWcgPT09ICdpbnB1dCcpIHx8XG4gICAgKGF0dHIgPT09ICdtdXRlZCcgJiYgdGFnID09PSAndmlkZW8nKVxuICApXG59O1xuXG52YXIgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xuXG52YXIgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlID0gbWFrZU1hcCgnZXZlbnRzLGNhcmV0LHR5cGluZyxwbGFpbnRleHQtb25seScpO1xuXG52YXIgY29udmVydEVudW1lcmF0ZWRWYWx1ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJ1xuICAgID8gJ2ZhbHNlJ1xuICAgIC8vIGFsbG93IGFyYml0cmFyeSBzdHJpbmcgdmFsdWUgZm9yIGNvbnRlbnRlZGl0YWJsZVxuICAgIDoga2V5ID09PSAnY29udGVudGVkaXRhYmxlJyAmJiBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUodmFsdWUpXG4gICAgICA/IHZhbHVlXG4gICAgICA6ICd0cnVlJ1xufTtcblxudmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLCcgK1xuICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbik7XG5cbnZhciB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG52YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluaydcbn07XG5cbnZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJydcbn07XG5cbnZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YS5jbGFzcylcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNsYXNzIChcbiAgc3RhdGljQ2xhc3MsXG4gIGR5bmFtaWNDbGFzc1xuKSB7XG4gIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKVxuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBzdHJpbmdpZmllZDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0gc3RyaW5naWZpZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7XG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG59O1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG4gICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICtcbiAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG4gICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgK1xuICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcbiAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnXG4pO1xuXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xuICAnZm9yZWlnbm9iamVjdCxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG59O1xuXG5mdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuICBpZiAoaXNTVkcodGFnKSkge1xuICAgIHJldHVybiAnc3ZnJ1xuICB9XG4gIC8vIGJhc2ljIHN1cHBvcnQgZm9yIE1hdGhNTFxuICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gIGlmICh0YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnbWF0aCdcbiAgfVxufVxuXG52YXIgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHxcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICApKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgfVxufVxuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyogICovXG5cbi8qKlxuICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ0Nhbm5vdCBmaW5kIGVsZW1lbnQ6ICcgKyBlbFxuICAgICAgKTtcbiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0ZWRcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZWxcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxICh0YWdOYW1lLCB2bm9kZSkge1xuICB2YXIgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgaWYgKHRhZ05hbWUgIT09ICdzZWxlY3QnKSB7XG4gICAgcmV0dXJuIGVsbVxuICB9XG4gIC8vIGZhbHNlIG9yIG51bGwgd2lsbCByZW1vdmUgdGhlIGF0dHJpYnV0ZSBidXQgdW5kZWZpbmVkIHdpbGwgbm90XG4gIGlmICh2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEuYXR0cnMgJiYgdm5vZGUuZGF0YS5hdHRycy5tdWx0aXBsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZWxtLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcbiAgfVxuICByZXR1cm4gZWxtXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyAobmFtZXNwYWNlLCB0YWdOYW1lKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlTWFwW25hbWVzcGFjZV0sIHRhZ05hbWUpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50ICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRleHQpXG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZSAocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZVxufVxuXG5mdW5jdGlvbiBuZXh0U2libGluZyAobm9kZSkge1xuICByZXR1cm4gbm9kZS5uZXh0U2libGluZ1xufVxuXG5mdW5jdGlvbiB0YWdOYW1lIChub2RlKSB7XG4gIHJldHVybiBub2RlLnRhZ05hbWVcbn1cblxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQgKG5vZGUsIHRleHQpIHtcbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlU2NvcGUgKG5vZGUsIHNjb3BlSWQpIHtcbiAgbm9kZS5zZXRBdHRyaWJ1dGUoc2NvcGVJZCwgJycpO1xufVxuXG52YXIgbm9kZU9wcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuICBjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcbiAgY3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuICBjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcbiAgcmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuICBhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG4gIHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG4gIG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcbiAgdGFnTmFtZTogdGFnTmFtZSxcbiAgc2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuICBzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZWdpc3RlclJlZiAodm5vZGUsIGlzUmVtb3ZhbCkge1xuICB2YXIga2V5ID0gdm5vZGUuZGF0YS5yZWY7XG4gIGlmICghaXNEZWYoa2V5KSkgeyByZXR1cm4gfVxuXG4gIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7XG4gIHZhciByZWYgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5lbG07XG4gIHZhciByZWZzID0gdm0uJHJlZnM7XG4gIGlmIChpc1JlbW92YWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICByZW1vdmUocmVmc1trZXldLCByZWYpO1xuICAgIH0gZWxzZSBpZiAocmVmc1trZXldID09PSByZWYpIHtcbiAgICAgIHJlZnNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZub2RlLmRhdGEucmVmSW5Gb3IpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICAgIHJlZnNba2V5XSA9IFtyZWZdO1xuICAgICAgfSBlbHNlIGlmIChyZWZzW2tleV0uaW5kZXhPZihyZWYpIDwgMCkge1xuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgcmVmc1trZXldLnB1c2gocmVmKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVmc1trZXldID0gcmVmO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFZpcnR1YWwgRE9NIHBhdGNoaW5nIGFsZ29yaXRobSBiYXNlZCBvbiBTbmFiYmRvbSBieVxuICogU2ltb24gRnJpaXMgVmluZHVtIChAcGFsZGVwaW5kKVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGFsZGVwaW5kL3NuYWJiZG9tL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMylcbiAqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGJlY2F1c2UgdGhpcyBmaWxlIGlzIHBlcmYtY3JpdGljYWwgYW5kIHRoZSBjb3N0XG4gKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC5cbiAqL1xuXG52YXIgZW1wdHlOb2RlID0gbmV3IFZOb2RlKCcnLCB7fSwgW10pO1xuXG52YXIgaG9va3MgPSBbJ2NyZWF0ZScsICdhY3RpdmF0ZScsICd1cGRhdGUnLCAncmVtb3ZlJywgJ2Rlc3Ryb3knXTtcblxuZnVuY3Rpb24gc2FtZVZub2RlIChhLCBiKSB7XG4gIHJldHVybiAoXG4gICAgYS5rZXkgPT09IGIua2V5ICYmXG4gICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmIChcbiAgICAgIChcbiAgICAgICAgYS50YWcgPT09IGIudGFnICYmXG4gICAgICAgIGEuaXNDb21tZW50ID09PSBiLmlzQ29tbWVudCAmJlxuICAgICAgICBpc0RlZihhLmRhdGEpID09PSBpc0RlZihiLmRhdGEpICYmXG4gICAgICAgIHNhbWVJbnB1dFR5cGUoYSwgYilcbiAgICAgICkgfHwgKFxuICAgICAgICBpc1RydWUoYS5pc0FzeW5jUGxhY2Vob2xkZXIpICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAodm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmIChpc0RlZihybSkpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgdm5vZGVUb01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xuICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGRpci5vbGRBcmcgPSBvbGREaXIuYXJnO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoaXNEZWYob3B0cykgJiYgb3B0cy5DdG9yLm9wdGlvbnMuaW5oZXJpdEF0dHJzID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuYXR0cnMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5hdHRycykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXIsIG9sZDtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7XG4gICAgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhdHRycyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1ciwgdm5vZGUuZGF0YS5wcmUpO1xuICAgIH1cbiAgfVxuICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxuICAvLyAjNjY2NjogSUUvRWRnZSBmb3JjZXMgcHJvZ3Jlc3MgdmFsdWUgZG93biB0byAxIGJlZm9yZSBzZXR0aW5nIGEgbWF4XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoKGlzSUUgfHwgaXNFZGdlKSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcbiAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlLCBpc0luUHJlKSB7XG4gIGlmIChpc0luUHJlIHx8IGVsLnRhZ05hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7XG4gICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcbiAgICAvLyBlLmcuIDxvcHRpb24gZGlzYWJsZWQ+U2VsZWN0IG9uZTwvb3B0aW9uPlxuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRlY2huaWNhbGx5IGFsbG93ZnVsbHNjcmVlbiBpcyBhIGJvb2xlYW4gYXR0cmlidXRlIGZvciA8aWZyYW1lPixcbiAgICAgIC8vIGJ1dCBGbGFzaCBleHBlY3RzIGEgdmFsdWUgb2YgXCJ0cnVlXCIgd2hlbiB1c2VkIG9uIDxlbWJlZD4gdGFnXG4gICAgICB2YWx1ZSA9IGtleSA9PT0gJ2FsbG93ZnVsbHNjcmVlbicgJiYgZWwudGFnTmFtZSA9PT0gJ0VNQkVEJ1xuICAgICAgICA/ICd0cnVlJ1xuICAgICAgICA6IGtleTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgY29udmVydEVudW1lcmF0ZWRWYWx1ZShrZXksIHZhbHVlKSk7XG4gIH0gZWxzZSBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZVNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICB9IGVsc2Uge1xuICAgIC8vICM3MTM4OiBJRTEwICYgMTEgZmlyZXMgaW5wdXQgZXZlbnQgd2hlbiBzZXR0aW5nIHBsYWNlaG9sZGVyIG9uXG4gICAgLy8gPHRleHRhcmVhPi4uLiBibG9jayB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYW5kIHJlbW92ZSB0aGUgYmxvY2tlclxuICAgIC8vIGltbWVkaWF0ZWx5LlxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcbiAgICAgIGlzSUUgJiYgIWlzSUU5ICYmXG4gICAgICBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnICYmXG4gICAgICBrZXkgPT09ICdwbGFjZWhvbGRlcicgJiYgdmFsdWUgIT09ICcnICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG4gIGlmIChcbiAgICBpc1VuZGVmKGRhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgaXNVbmRlZihkYXRhLmNsYXNzKSAmJiAoXG4gICAgICBpc1VuZGVmKG9sZERhdGEpIHx8IChcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuY2xhc3MpXG4gICAgICApXG4gICAgKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjbHMgPSBnZW5DbGFzc0ZvclZub2RlKHZub2RlKTtcblxuICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmIChpc0RlZih0cmFuc2l0aW9uQ2xhc3MpKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBrbGFzcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGluIHNvbWUgY2FzZXMsIHRoZSBldmVudCB1c2VkIGhhcyB0byBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWVcbi8vIHNvIHdlIHVzZWQgc29tZSByZXNlcnZlZCB0b2tlbnMgZHVyaW5nIGNvbXBpbGUuXG52YXIgUkFOR0VfVE9LRU4gPSAnX19yJztcbnZhciBDSEVDS0JPWF9SQURJT19UT0tFTiA9ICdfX2MnO1xuXG4vKiAgKi9cblxuLy8gbm9ybWFsaXplIHYtbW9kZWwgZXZlbnQgdG9rZW5zIHRoYXQgY2FuIG9ubHkgYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lLlxuLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZVxuLy8gdXNlci1hdHRhY2hlZCBoYW5kbGVycy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltSQU5HRV9UT0tFTl0pKSB7XG4gICAgLy8gSUUgaW5wdXRbdHlwZT1yYW5nZV0gb25seSBzdXBwb3J0cyBgY2hhbmdlYCBldmVudFxuICAgIHZhciBldmVudCA9IGlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCc7XG4gICAgb25bZXZlbnRdID0gW10uY29uY2F0KG9uW1JBTkdFX1RPS0VOXSwgb25bZXZlbnRdIHx8IFtdKTtcbiAgICBkZWxldGUgb25bUkFOR0VfVE9LRU5dO1xuICB9XG4gIC8vIFRoaXMgd2FzIG9yaWdpbmFsbHkgaW50ZW5kZWQgdG8gZml4ICM0NTIxIGJ1dCBubyBsb25nZXIgbmVjZXNzYXJ5XG4gIC8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltDSEVDS0JPWF9SQURJT19UT0tFTl0pKSB7XG4gICAgb24uY2hhbmdlID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb24uY2hhbmdlIHx8IFtdKTtcbiAgICBkZWxldGUgb25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dO1xuICB9XG59XG5cbnZhciB0YXJnZXQkMTtcblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIkMSAoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbi8vICM5NDQ2OiBGaXJlZm94IDw9IDUzIChpbiBwYXJ0aWN1bGFyLCBFU1IgNTIpIGhhcyBpbmNvcnJlY3QgRXZlbnQudGltZVN0YW1wXG4vLyBpbXBsZW1lbnRhdGlvbiBhbmQgZG9lcyBub3QgZmlyZSBtaWNyb3Rhc2tzIGluIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24sIHNvXG4vLyBzYWZlIHRvIGV4Y2x1ZGUuXG52YXIgdXNlTWljcm90YXNrRml4ID0gaXNVc2luZ01pY3JvVGFzayAmJiAhKGlzRkYgJiYgTnVtYmVyKGlzRkZbMV0pIDw9IDUzKTtcblxuZnVuY3Rpb24gYWRkJDEgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBwYXNzaXZlXG4pIHtcbiAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xuICAvLyBoYXBwZW5zIGJlY2F1c2UgYnJvd3NlcnMgZmlyZSBtaWNyb3Rhc2sgdGlja3MgYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbi5cbiAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuICAvLyBhbmQgdGhlIGhhbmRsZXIgd291bGQgb25seSBmaXJlIGlmIHRoZSBldmVudCBwYXNzZWQgdG8gaXQgd2FzIGZpcmVkXG4gIC8vIEFGVEVSIGl0IHdhcyBhdHRhY2hlZC5cbiAgaWYgKHVzZU1pY3JvdGFza0ZpeCkge1xuICAgIHZhciBhdHRhY2hlZFRpbWVzdGFtcCA9IGN1cnJlbnRGbHVzaFRpbWVzdGFtcDtcbiAgICB2YXIgb3JpZ2luYWwgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBvcmlnaW5hbC5fd3JhcHBlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vIGJ1YmJsaW5nLCBzaG91bGQgYWx3YXlzIGZpcmUuXG4gICAgICAgIC8vIHRoaXMgaXMganVzdCBhIHNhZmV0eSBuZXQgaW4gY2FzZSBldmVudC50aW1lU3RhbXAgaXMgdW5yZWxpYWJsZSBpblxuICAgICAgICAvLyBjZXJ0YWluIHdlaXJkIGVudmlyb25tZW50cy4uLlxuICAgICAgICBlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0IHx8XG4gICAgICAgIC8vIGV2ZW50IGlzIGZpcmVkIGFmdGVyIGhhbmRsZXIgYXR0YWNobWVudFxuICAgICAgICBlLnRpbWVTdGFtcCA+PSBhdHRhY2hlZFRpbWVzdGFtcCB8fFxuICAgICAgICAvLyBiYWlsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBoYXZlIGJ1Z2d5IGV2ZW50LnRpbWVTdGFtcCBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgLy8gIzk0NjIgaU9TIDkgYnVnOiBldmVudC50aW1lU3RhbXAgaXMgMCBhZnRlciBoaXN0b3J5LnB1c2hTdGF0ZVxuICAgICAgICAvLyAjOTY4MSBRdFdlYkVuZ2luZSBldmVudC50aW1lU3RhbXAgaXMgbmVnYXRpdmUgdmFsdWVcbiAgICAgICAgZS50aW1lU3RhbXAgPD0gMCB8fFxuICAgICAgICAvLyAjOTQ0OCBiYWlsIGlmIGV2ZW50IGlzIGZpcmVkIGluIGFub3RoZXIgZG9jdW1lbnQgaW4gYSBtdWx0aS1wYWdlXG4gICAgICAgIC8vIGVsZWN0cm9uL253LmpzIGFwcCwgc2luY2UgZXZlbnQudGltZVN0YW1wIHdpbGwgYmUgdXNpbmcgYSBkaWZmZXJlbnRcbiAgICAgICAgLy8gc3RhcnRpbmcgcmVmZXJlbmNlXG4gICAgICAgIGUudGFyZ2V0Lm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHRhcmdldCQxLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLFxuICAgIHN1cHBvcnRzUGFzc2l2ZVxuICAgICAgPyB7IGNhcHR1cmU6IGNhcHR1cmUsIHBhc3NpdmU6IHBhc3NpdmUgfVxuICAgICAgOiBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQyIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlci5fd3JhcHBlciB8fCBoYW5kbGVyLFxuICAgIGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5vbikgJiYgaXNVbmRlZih2bm9kZS5kYXRhLm9uKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICBub3JtYWxpemVFdmVudHMob24pO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIGNyZWF0ZU9uY2VIYW5kbGVyJDEsIHZub2RlLmNvbnRleHQpO1xuICB0YXJnZXQkMSA9IHVuZGVmaW5lZDtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxudmFyIHN2Z0NvbnRhaW5lcjtcblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKHByb3BzLl9fb2JfXykpIHtcbiAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgaWYgKCEoa2V5IGluIHByb3BzKSkge1xuICAgICAgZWxtW2tleV0gPSAnJztcbiAgICB9XG4gIH1cblxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuICAgICAgLy8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxuICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmIGVsbS50YWdOYW1lICE9PSAnUFJPR1JFU1MnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgJiYgaXNTVkcoZWxtLnRhZ05hbWUpICYmIGlzVW5kZWYoZWxtLmlubmVySFRNTCkpIHtcbiAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lckhUTUwgZm9yIFNWRyBlbGVtZW50c1xuICAgICAgc3ZnQ29udGFpbmVyID0gc3ZnQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc3ZnQ29udGFpbmVyLmlubmVySFRNTCA9IFwiPHN2Zz5cIiArIGN1ciArIFwiPC9zdmc+XCI7XG4gICAgICB2YXIgc3ZnID0gc3ZnQ29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICB3aGlsZSAoZWxtLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzdmcuZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0uYXBwZW5kQ2hpbGQoc3ZnLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAvLyBza2lwIHRoZSB1cGRhdGUgaWYgb2xkIGFuZCBuZXcgVkRPTSBzdGF0ZSBpcyB0aGUgc2FtZS5cbiAgICAgIC8vIGB2YWx1ZWAgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHlcbiAgICAgIC8vIG91dCBvZiBzeW5jIHdpdGggVkRPTSBzdGF0ZSBkdWUgdG8gZm9jdXMsIGNvbXBvc2l0aW9uIGFuZCBtb2RpZmllcnMuXG4gICAgICAvLyBUaGlzICAjNDUyMSBieSBza2lwcGluZyB0aGUgdW5uZWNlc3NhcnkgYGNoZWNrZWRgIHVwZGF0ZS5cbiAgICAgIGN1ciAhPT0gb2xkUHJvcHNba2V5XVxuICAgICkge1xuICAgICAgLy8gc29tZSBwcm9wZXJ0eSB1cGRhdGVzIGNhbiB0aHJvd1xuICAgICAgLy8gZS5nLiBgdmFsdWVgIG9uIDxwcm9ncmVzcz4gdy8gbm9uLWZpbml0ZSB2YWx1ZVxuICAgICAgdHJ5IHtcbiAgICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cbiAgfVxufVxuXG4vLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWVcblxuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVWYWx1ZSAoZWxtLCBjaGVja1ZhbCkge1xuICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcbiAgICBlbG0udGFnTmFtZSA9PT0gJ09QVElPTicgfHxcbiAgICBpc05vdEluRm9jdXNBbmREaXJ0eShlbG0sIGNoZWNrVmFsKSB8fFxuICAgIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzTm90SW5Gb2N1c0FuZERpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXNcbiAgLy8gbm90IGVxdWFsIHRvIHRoZSB1cGRhdGVkIHZhbHVlXG4gIHZhciBub3RJbkZvY3VzID0gdHJ1ZTtcbiAgLy8gIzYxNTdcbiAgLy8gd29yayBhcm91bmQgSUUgYnVnIHdoZW4gYWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW4gYW4gaWZyYW1lXG4gIHRyeSB7IG5vdEluRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG07IH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiBub3RJbkZvY3VzICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWxcbn1cblxuZnVuY3Rpb24gaXNEaXJ0eVdpdGhNb2RpZmllcnMgKGVsbSwgbmV3VmFsKSB7XG4gIHZhciB2YWx1ZSA9IGVsbS52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lXG4gIGlmIChpc0RlZihtb2RpZmllcnMpKSB7XG4gICAgaWYgKG1vZGlmaWVycy5udW1iZXIpIHtcbiAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbClcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy50cmltKSB7XG4gICAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpXG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsXG59XG5cbnZhciBkb21Qcm9wcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcyxcbiAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xufTtcblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShuYW1lKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICB9IGVsc2Uge1xuICAgIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZShuYW1lKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAvLyBTdXBwb3J0IHZhbHVlcyBhcnJheSBjcmVhdGVkIGJ5IGF1dG9wcmVmaXhlciwgZS5nLlxuICAgICAgLy8ge2Rpc3BsYXk6IFtcIi13ZWJraXQtYm94XCIsIFwiLW1zLWZsZXhib3hcIiwgXCJmbGV4XCJdfVxuICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWxbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB2ZW5kb3JOYW1lcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG52YXIgZW1wdHlTdHlsZTtcbnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcbiAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIGVtcHR5U3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICB2YXIgY2FwTmFtZSA9IHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5hbWUgPSB2ZW5kb3JOYW1lc1tpXSArIGNhcE5hbWU7XG4gICAgaWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVTdHlsZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gIGlmIChpc1VuZGVmKGRhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYoZGF0YS5zdHlsZSkgJiZcbiAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYob2xkRGF0YS5zdHlsZSlcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7XG4gIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGREYXRhLm5vcm1hbGl6ZWRTdHlsZSB8fCBvbGREYXRhLnN0eWxlIHx8IHt9O1xuXG4gIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG4gIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZztcblxuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgLy8gc3RvcmUgbm9ybWFsaXplZCBzdHlsZSB1bmRlciBhIGRpZmZlcmVudCBrZXkgZm9yIG5leHQgZGlmZlxuICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzXG4gIC8vIHRvIG11dGF0ZSBpdC5cbiAgdm5vZGUuZGF0YS5ub3JtYWxpemVkU3R5bGUgPSBpc0RlZihzdHlsZS5fX29iX18pXG4gICAgPyBleHRlbmQoe30sIHN0eWxlKVxuICAgIDogc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmIChpc1VuZGVmKG5ld1N0eWxlW25hbWVdKSkge1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHtcbiAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTtcbiAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgLy8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmdcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsIGN1ciA9PSBudWxsID8gJycgOiBjdXIpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc3R5bGUgPSB7XG4gIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gIHVwZGF0ZTogdXBkYXRlU3R5bGVcbn07XG5cbi8qICAqL1xuXG52YXIgd2hpdGVzcGFjZVJFID0gL1xccysvO1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYkJDEpIHtcbiAgaWYgKCFkZWYkJDEpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZiQkMS5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmJCQxKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAvLyBKU0RPTSBtYXkgcmV0dXJuIHVuZGVmaW5lZCBmb3IgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gIHZhciB0cmFuc2l0aW9uRGVsYXlzID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuXG4gIHZhciB0eXBlO1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHZhciBwcm9wQ291bnQgPSAwO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xuICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgIHR5cGUgPSB0aW1lb3V0ID4gMFxuICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgPyBUUkFOU0lUSU9OXG4gICAgICAgIDogQU5JTUFUSU9OXG4gICAgICA6IG51bGw7XG4gICAgcHJvcENvdW50ID0gdHlwZVxuICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXG4gICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICA6IDA7XG4gIH1cbiAgdmFyIGhhc1RyYW5zZm9ybSA9XG4gICAgdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxuICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdGltZW91dDogdGltZW91dCxcbiAgICBwcm9wQ291bnQ6IHByb3BDb3VudCxcbiAgICBoYXNUcmFuc2Zvcm06IGhhc1RyYW5zZm9ybVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVvdXQgKGRlbGF5cywgZHVyYXRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xuICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgcmV0dXJuIHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSlcbiAgfSkpXG59XG5cbi8vIE9sZCB2ZXJzaW9ucyBvZiBDaHJvbWl1bSAoYmVsb3cgNjEuMC4zMTYzLjEwMCkgZm9ybWF0cyBmbG9hdGluZyBwb2ludGVyIG51bWJlcnNcbi8vIGluIGEgbG9jYWxlLWRlcGVuZGVudCB3YXksIHVzaW5nIGEgY29tbWEgaW5zdGVhZCBvZiBhIGRvdC5cbi8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd24gKGkuZS4gYWN0aW5nXG4vLyBhcyBhIGZsb29yIGZ1bmN0aW9uKSBjYXVzaW5nIHVuZXhwZWN0ZWQgYmVoYXZpb3JzXG5mdW5jdGlvbiB0b01zIChzKSB7XG4gIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZSgnLCcsICcuJykpICogMTAwMFxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW50ZXIgKHZub2RlLCB0b2dnbGVEaXNwbGF5KSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fbGVhdmVDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICB2YXIgZW50ZXJUb0NsYXNzID0gZGF0YS5lbnRlclRvQ2xhc3M7XG4gIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICB2YXIgYXBwZWFyVG9DbGFzcyA9IGRhdGEuYXBwZWFyVG9DbGFzcztcbiAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVyID0gZGF0YS5lbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gIHZhciBiZWZvcmVBcHBlYXIgPSBkYXRhLmJlZm9yZUFwcGVhcjtcbiAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyO1xuICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICB2YXIgYXBwZWFyQ2FuY2VsbGVkID0gZGF0YS5hcHBlYXJDYW5jZWxsZWQ7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcbiAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2tcbiAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gIHZhciBjb250ZXh0ID0gYWN0aXZlSW5zdGFuY2U7XG4gIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTtcbiAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgIGNvbnRleHQgPSB0cmFuc2l0aW9uTm9kZS5jb250ZXh0O1xuICAgIHRyYW5zaXRpb25Ob2RlID0gdHJhbnNpdGlvbk5vZGUucGFyZW50O1xuICB9XG5cbiAgdmFyIGlzQXBwZWFyID0gIWNvbnRleHQuX2lzTW91bnRlZCB8fCAhdm5vZGUuaXNSb290SW5zZXJ0O1xuXG4gIGlmIChpc0FwcGVhciAmJiAhYXBwZWFyICYmIGFwcGVhciAhPT0gJycpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQ2xhc3NcbiAgICA/IGFwcGVhckNsYXNzXG4gICAgOiBlbnRlckNsYXNzO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJBY3RpdmVDbGFzc1xuICAgID8gYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA6IGVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciB0b0NsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyVG9DbGFzc1xuICAgID8gYXBwZWFyVG9DbGFzc1xuICAgIDogZW50ZXJUb0NsYXNzO1xuXG4gIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcilcbiAgICA6IGJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpXG4gICAgOiBlbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKVxuICAgIDogYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKVxuICAgIDogZW50ZXJDYW5jZWxsZWQ7XG5cbiAgdmFyIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5lbnRlclxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24sICdlbnRlcicsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChlbnRlckhvb2spO1xuXG4gIHZhciBjYiA9IGVsLl9lbnRlckNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIH1cbiAgICAgIGVudGVyQ2FuY2VsbGVkSG9vayAmJiBlbnRlckNhbmNlbGxlZEhvb2soZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlckVudGVySG9vayAmJiBhZnRlckVudGVySG9vayhlbCk7XG4gICAgfVxuICAgIGVsLl9lbnRlckNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcGVuZGluZ05vZGUgPSBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldO1xuICAgICAgaWYgKHBlbmRpbmdOb2RlICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLnRhZyA9PT0gdm5vZGUudGFnICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYlxuICAgICAgKSB7XG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYigpO1xuICAgICAgfVxuICAgICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gc3RhcnQgZW50ZXIgdHJhbnNpdGlvblxuICBiZWZvcmVFbnRlckhvb2sgJiYgYmVmb3JlRW50ZXJIb29rKGVsKTtcbiAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24pKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdEVudGVyRHVyYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICh2bm9kZS5kYXRhLnNob3cpIHtcbiAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcbiAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gIH1cblxuICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICBjYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlYXZlICh2bm9kZSwgcm0pIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikpIHtcbiAgICBlbC5fZW50ZXJDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9lbnRlckNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIHJtKClcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgbGVhdmVDbGFzcyA9IGRhdGEubGVhdmVDbGFzcztcbiAgdmFyIGxlYXZlVG9DbGFzcyA9IGRhdGEubGVhdmVUb0NsYXNzO1xuICB2YXIgbGVhdmVBY3RpdmVDbGFzcyA9IGRhdGEubGVhdmVBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUxlYXZlID0gZGF0YS5iZWZvcmVMZWF2ZTtcbiAgdmFyIGxlYXZlID0gZGF0YS5sZWF2ZTtcbiAgdmFyIGFmdGVyTGVhdmUgPSBkYXRhLmFmdGVyTGVhdmU7XG4gIHZhciBsZWF2ZUNhbmNlbGxlZCA9IGRhdGEubGVhdmVDYW5jZWxsZWQ7XG4gIHZhciBkZWxheUxlYXZlID0gZGF0YS5kZWxheUxlYXZlO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChsZWF2ZSk7XG5cbiAgdmFyIGV4cGxpY2l0TGVhdmVEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5sZWF2ZVxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbiwgJ2xlYXZlJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgfVxuICAgIGVsLl9sZWF2ZUNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybUxlYXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIChlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVsodm5vZGUua2V5KV0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG5mdW5jdGlvbiBjaGVja0R1cmF0aW9uICh2YWwsIG5hbWUsIHZub2RlKSB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIiArXG4gICAgICBcImdvdCBcIiArIChKU09OLnN0cmluZ2lmeSh2YWwpKSArIFwiLlwiLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIiArXG4gICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24gKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbClcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB0cmFuc2l0aW9uIGhvb2sncyBhcmd1bWVudCBsZW5ndGguIFRoZSBob29rIG1heSBiZTpcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gKiAtIGEgcGxhaW4gZnVuY3Rpb24gKC5sZW5ndGgpXG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tBcmd1bWVudHNMZW5ndGggKGZuKSB7XG4gIGlmIChpc1VuZGVmKGZuKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBpbnZva2VyRm5zID0gZm4uZm5zO1xuICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAvLyBpbnZva2VyXG4gICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoXG4gICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgID8gaW52b2tlckZuc1swXVxuICAgICAgICA6IGludm9rZXJGbnNcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmbi5fbGVuZ3RoIHx8IGZuLmxlbmd0aCkgPiAxXG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyID8ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUkJDEgKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn0gOiB7fTtcblxudmFyIHBsYXRmb3JtTW9kdWxlcyA9IFtcbiAgYXR0cnMsXG4gIGtsYXNzLFxuICBldmVudHMsXG4gIGRvbVByb3BzLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvblxuXTtcblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRpcmVjdGl2ZSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmXG4gICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG4gICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOyB9KVxuICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpO1xuICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIC8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG4gIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciAoZWwsIHR5cGUpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbn1cblxuLyogICovXG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUgKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKVxuICAgIDogdm5vZGVcbn1cblxudmFyIHNob3cgPSB7XG4gIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufTtcblxudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgbW9kZWw6IGRpcmVjdGl2ZSxcbiAgc2hvdzogc2hvd1xufTtcblxuLyogICovXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7XG4gICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxudmFyIGlzTm90VGV4dE5vZGUgPSBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9O1xuXG52YXIgaXNWU2hvd0RpcmVjdGl2ZSA9IGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfTtcblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihpc05vdFRleHROb2RlKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblxuICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbidcbiAgICApIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdO1xuXG4gICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxuICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdHJhbnNpdGlvbiBkYXRhIHRvIGNoaWxkXG4gICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgIHZhciBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcbiAgICAvLyBkdXJpbmcgZW50ZXJpbmcuXG4gICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIgKyAodGhpcy5fdWlkKSArIFwiLVwiO1xuICAgIGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGNoaWxkLmlzQ29tbWVudFxuICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgIDogaWQgKyBjaGlsZC50YWdcbiAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICA6IGNoaWxkLmtleTtcblxuICAgIHZhciBkYXRhID0gKGNoaWxkLmRhdGEgfHwgKGNoaWxkLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG4gICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgdmFyIG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcblxuICAgIC8vIG1hcmsgdi1zaG93XG4gICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShpc1ZTaG93RGlyZWN0aXZlKSkge1xuICAgICAgY2hpbGQuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBvbGRDaGlsZCAmJlxuICAgICAgb2xkQ2hpbGQuZGF0YSAmJlxuICAgICAgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkgJiZcbiAgICAgICFpc0FzeW5jUGxhY2Vob2xkZXIob2xkQ2hpbGQpICYmXG4gICAgICAvLyAjNjY4NyBjb21wb25lbnQgcm9vdCBpcyBhIGNvbW1lbnQgbm9kZVxuICAgICAgIShvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZSAmJiBvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUuaXNDb21tZW50KVxuICAgICkge1xuICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG4gICAgICB2YXIgb2xkRGF0YSA9IG9sZENoaWxkLmRhdGEudHJhbnNpdGlvbiA9IGV4dGVuZCh7fSwgZGF0YSk7XG4gICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG4gICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcbiAgICAgICAgLy8gcmV0dXJuIHBsYWNlaG9sZGVyIG5vZGUgYW5kIHF1ZXVlIHVwZGF0ZSB3aGVuIGxlYXZlIGZpbmlzaGVzXG4gICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnYWZ0ZXJMZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzJDEuX2xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnKSB7XG4gICAgICAgIGlmIChpc0FzeW5jUGxhY2Vob2xkZXIoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIG9sZFJhd0NoaWxkXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGF5ZWRMZWF2ZTtcbiAgICAgICAgdmFyIHBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uICgpIHsgZGVsYXllZExlYXZlKCk7IH07XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2RlbGF5TGVhdmUnLCBmdW5jdGlvbiAobGVhdmUpIHsgZGVsYXllZExlYXZlID0gbGVhdmU7IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYXdDaGlsZFxuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHByb3BzID0gZXh0ZW5kKHtcbiAgdGFnOiBTdHJpbmcsXG4gIG1vdmVDbGFzczogU3RyaW5nXG59LCB0cmFuc2l0aW9uUHJvcHMpO1xuXG5kZWxldGUgcHJvcHMubW9kZTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IHtcbiAgcHJvcHM6IHByb3BzLFxuXG4gIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdXBkYXRlID0gdGhpcy5fdXBkYXRlO1xuICAgIHRoaXMuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2UodGhpcyQxKTtcbiAgICAgIC8vIGZvcmNlIHJlbW92aW5nIHBhc3NcbiAgICAgIHRoaXMkMS5fX3BhdGNoX18oXG4gICAgICAgIHRoaXMkMS5fdm5vZGUsXG4gICAgICAgIHRoaXMkMS5rZXB0LFxuICAgICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICAgIHRydWUgLy8gcmVtb3ZlT25seSAoIWltcG9ydGFudCwgYXZvaWRzIHVubmVjZXNzYXJ5IG1vdmVzKVxuICAgICAgKTtcbiAgICAgIHRoaXMkMS5fdm5vZGUgPSB0aGlzJDEua2VwdDtcbiAgICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgICAgdXBkYXRlLmNhbGwodGhpcyQxLCB2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRhZyA9IHRoaXMudGFnIHx8IHRoaXMuJHZub2RlLmRhdGEudGFnIHx8ICdzcGFuJztcbiAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIHZhciByYXdDaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW107XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gcmF3Q2hpbGRyZW5baV07XG4gICAgICBpZiAoYy50YWcpIHtcbiAgICAgICAgaWYgKGMua2V5ICE9IG51bGwgJiYgU3RyaW5nKGMua2V5KS5pbmRleE9mKCdfX3ZsaXN0JykgIT09IDApIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGMpO1xuICAgICAgICAgIG1hcFtjLmtleV0gPSBjXG4gICAgICAgICAgOyhjLmRhdGEgfHwgKGMuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgb3B0cyA9IGMuY29tcG9uZW50T3B0aW9ucztcbiAgICAgICAgICB2YXIgbmFtZSA9IG9wdHMgPyAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZyB8fCAnJykgOiBjLnRhZztcbiAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHZhciBrZXB0ID0gW107XG4gICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgdmFyIGMkMSA9IHByZXZDaGlsZHJlbltpJDFdO1xuICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIGMkMS5kYXRhLnBvcyA9IGMkMS5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChtYXBbYyQxLmtleV0pIHtcbiAgICAgICAgICBrZXB0LnB1c2goYyQxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVkLnB1c2goYyQxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpO1xuICAgICAgdGhpcy5yZW1vdmVkID0gcmVtb3ZlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gaCh0YWcsIG51bGwsIGNoaWxkcmVuKVxuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZ1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBlbCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fbW92ZUNiKSB7XG4gICAgYy5lbG0uX21vdmVDYigpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX2VudGVyQ2IpIHtcbiAgICBjLmVsbS5fZW50ZXJDYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uIChjKSB7XG4gIGMuZGF0YS5uZXdQb3MgPSBjLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbiAoYykge1xuICB2YXIgb2xkUG9zID0gYy5kYXRhLnBvcztcbiAgdmFyIG5ld1BvcyA9IGMuZGF0YS5uZXdQb3M7XG4gIHZhciBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gIHZhciBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICBpZiAoZHggfHwgZHkpIHtcbiAgICBjLmRhdGEubW92ZWQgPSB0cnVlO1xuICAgIHZhciBzID0gYy5lbG0uc3R5bGU7XG4gICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgZHggKyBcInB4LFwiICsgZHkgKyBcInB4KVwiO1xuICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgfVxufVxuXG52YXIgcGxhdGZvcm1Db21wb25lbnRzID0ge1xuICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cFxufTtcblxuLyogICovXG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcblZ1ZS5jb25maWcubXVzdFVzZVByb3AgPSBtdXN0VXNlUHJvcDtcblZ1ZS5jb25maWcuaXNSZXNlcnZlZFRhZyA9IGlzUmVzZXJ2ZWRUYWc7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRBdHRyID0gaXNSZXNlcnZlZEF0dHI7XG5WdWUuY29uZmlnLmdldFRhZ05hbWVzcGFjZSA9IGdldFRhZ05hbWVzcGFjZTtcblZ1ZS5jb25maWcuaXNVbmtub3duRWxlbWVudCA9IGlzVW5rbm93bkVsZW1lbnQ7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50c1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmRpcmVjdGl2ZXMsIHBsYXRmb3JtRGlyZWN0aXZlcyk7XG5leHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgcGxhdGZvcm1Db21wb25lbnRzKTtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBpbkJyb3dzZXIgPyBwYXRjaCA6IG5vb3A7XG5cbi8vIHB1YmxpYyBtb3VudCBtZXRob2RcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBpbkJyb3dzZXIgPyBxdWVyeShlbCkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBtb3VudENvbXBvbmVudCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLy8gZGV2dG9vbHMgZ2xvYmFsIGhvb2tcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAoaW5Ccm93c2VyKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChjb25maWcuZGV2dG9vbHMpIHtcbiAgICAgIGlmIChkZXZ0b29scykge1xuICAgICAgICBkZXZ0b29scy5lbWl0KCdpbml0JywgVnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0J1xuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICAgICdEb3dubG9hZCB0aGUgVnVlIERldnRvb2xzIGV4dGVuc2lvbiBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTpcXG4nICtcbiAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgIGNvbmZpZy5wcm9kdWN0aW9uVGlwICE9PSBmYWxzZSAmJlxuICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgXCJZb3UgYXJlIHJ1bm5pbmcgVnVlIGluIGRldmVsb3BtZW50IG1vZGUuXFxuXCIgK1xuICAgICAgICBcIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cXG5cIiArXG4gICAgICAgIFwiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIlxuICAgICAgKTtcbiAgICB9XG4gIH0sIDApO1xufVxuXG4vKiAgKi9cblxuZXhwb3J0IGRlZmF1bHQgVnVlO1xuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHsgc3RhdGljQ2xhc3M6IFwiY29udGFpbmVyXCIgfSxcbiAgICBbXG4gICAgICBfYyhcIkhlYWRlclwiKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcIkxhbmRpbmdcIiksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJSb2FkbWFwXCIpLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiVGVhbVwiKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcIkZBUVwiKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcIlJhcml0eVwiKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcIkZvb3RlclwiKVxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImhlYWRlclwiIH0sIFtcbiAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImhlYWRlcl9jb250YWluZXJcIiB9LCBbXG4gICAgICBfdm0uX20oMCksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJuYXZcIiwgYXR0cnM6IHsgaWQ6IFwibmF2X2NvbnRhaW5lclwiIH0gfSwgW1xuICAgICAgICBfdm0uX20oMSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibGlua3NcIiB9LCBbX2MoXCJOYXZNZW51XCIpXSwgMSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwibW9iaWxlX21lbnVfaWNvblwiLFxuICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgIF92bS5oaWRlTWVudSA9ICFfdm0uaGlkZU1lbnVcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgW19jKFwic3BhblwiLCBbX3ZtLl92KFwi76GbXCIpXSldXG4gICAgICAgIClcbiAgICAgIF0pXG4gICAgXSksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICAhX3ZtLmhpZGVNZW51XG4gICAgICA/IF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJtb2JpbGVfbmF2X21lbnVcIiB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwiTmF2TWVudVwiLCB7XG4gICAgICAgICAgICAgIGF0dHJzOiB7IGlzTWVudTogdHJ1ZSB9LFxuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIGNsb3NlTWVudTogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICBfdm0uaGlkZU1lbnUgPSB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIF0sXG4gICAgICAgICAgMVxuICAgICAgICApXG4gICAgICA6IF92bS5fZSgpXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInRpdGxlXCIgfSwgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJ0aXRsZS10ZXh0XCIgfSwgW1xuICAgICAgICBfYyhcImgxXCIsIFtfdm0uX3YoXCJNaWtlIGFuZCBTYW0ncyBORlRcIildKVxuICAgICAgXSlcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcIm5ld3NcIiB9LCBbXG4gICAgICBfYyhcInNwYW5cIiwgW192bS5fdihcIk1pbnRpbmcgUTEgMjAyMiFcIildKVxuICAgIF0pXG4gIH1cbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHtcbiAgICAgIHN0YXRpY0NsYXNzOiBcIm1lbnVcIixcbiAgICAgIGNsYXNzOiB7IG1lbnVfY29sdW1uOiBfdm0uaXNNZW51IH0sXG4gICAgICBhdHRyczogeyBpZDogXCJuYXZfbWVudVwiIH1cbiAgICB9LFxuICAgIFtcbiAgICAgIF9jKFxuICAgICAgICBcInNwYW5cIixcbiAgICAgICAge1xuICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm1lbnVfaXRlbVwiLFxuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdm0uYW5pbWF0ZWRTY3JvbGwoXCJyb2FkbWFwX2NvbnRhaW5lclwiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgW192bS5fdihcIlJvYWRtYXBcIildXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcInNwYW5cIixcbiAgICAgICAge1xuICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm1lbnVfaXRlbVwiLFxuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdm0uYW5pbWF0ZWRTY3JvbGwoXCJ0ZWFtX2NvbnRhaW5lclwiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgW192bS5fdihcIlRoZSB0ZWFtXCIpXVxuICAgICAgKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJzcGFuXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJtZW51X2l0ZW1cIixcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gX3ZtLmFuaW1hdGVkU2Nyb2xsKFwiRkFRX2NvbnRhaW5lclwiKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgW192bS5fdihcIkZBUVwiKV1cbiAgICAgICksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwic3BhblwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwibWVudV9pdGVtXCIsXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF92bS5hbmltYXRlZFNjcm9sbChcInJhcml0eV9jb250YWluZXJcIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtfdm0uX3YoXCJSYXJpdGllc1wiKV1cbiAgICAgICksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLl9tKDApXG4gICAgXVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInNvY2lhbCBtZW51X2l0ZW1cIiB9LCBbXG4gICAgICBfYyhcInNwYW5cIiwgW192bS5fdihcIu+IsFwiKV0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwic3BhblwiLCBbX3ZtLl92KFwi74KBXCIpXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJzcGFuXCIsIFtfdm0uX3YoXCLvha1cIildKVxuICAgIF0pXG4gIH1cbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxuICA8ZGl2IGlkPVwibmF2X21lbnVcIiBjbGFzcz1cIm1lbnVcIiB2LWJpbmQ6Y2xhc3M9XCJ7ICdtZW51X2NvbHVtbic6IGlzTWVudSB9XCI+XG4gICAgPHNwYW4gY2xhc3M9XCJtZW51X2l0ZW1cIiBAY2xpY2s9XCJhbmltYXRlZFNjcm9sbCgncm9hZG1hcF9jb250YWluZXInKVwiPlJvYWRtYXA8L3NwYW4+XG4gICAgPHNwYW4gY2xhc3M9XCJtZW51X2l0ZW1cIiBAY2xpY2s9XCJhbmltYXRlZFNjcm9sbCgndGVhbV9jb250YWluZXInKVwiPlRoZSB0ZWFtPC9zcGFuPlxuICAgIDxzcGFuIGNsYXNzPVwibWVudV9pdGVtXCIgQGNsaWNrPVwiYW5pbWF0ZWRTY3JvbGwoJ0ZBUV9jb250YWluZXInKVwiPkZBUTwvc3Bhbj5cbiAgICA8c3BhbiBjbGFzcz1cIm1lbnVfaXRlbVwiIEBjbGljaz1cImFuaW1hdGVkU2Nyb2xsKCdyYXJpdHlfY29udGFpbmVyJylcIj5SYXJpdGllczwvc3Bhbj5cbiAgICA8ZGl2IGNsYXNzPVwic29jaWFsIG1lbnVfaXRlbVwiPlxuICAgICAgPHNwYW4+74iwPC9zcGFuPlxuICAgICAgPHNwYW4+74KBPC9zcGFuPlxuICAgICAgPHNwYW4+74WtPC9zcGFuPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczoge1xuICAgICAgICBpc01lbnU6IEJvb2xlYW5cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgIGFuaW1hdGVkU2Nyb2xsKGlkKSB7XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gJChcIiNcIiArIGlkKVxuICAgICAgICBjb25zdCB3aW5kb3dfaGVpZ2h0ID0gbG9jYXRpb24ub2Zmc2V0KCkudG9wXG4gICAgICAgICQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcbiAgICAgICAgICBzY3JvbGxUb3A6IHdpbmRvd19oZWlnaHQgLSAxMDBcbiAgICAgICAgfSwgMTIwMClcblxuICAgICAgICB0aGlzLiRlbWl0KCdjbG9zZU1lbnUnKVxuICAgICAgfVxuICAgIH1cbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxuQGltcG9ydCBcIi4uL192YXJpYWJsZXNcIjtcblxuLm1lbnUge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcbn1cblxuLm1lbnVfaXRlbSB7XG4gICAgbWFyZ2luLWxlZnQ6IDJ2dztcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgZm9udC1zaXplOiAxNnB0O1xuICB9XG5cbi5zb2NpYWwge1xuICBtYXJnaW4tcmlnaHQ6IDF2dztcbn1cblxuLm1lbnVfY29sdW1uIHtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTmF2TWVudS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9OYXZNZW51LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICAob3B0aW9ucy5mdW5jdGlvbmFsID8gdGhpcy5wYXJlbnQgOiB0aGlzKS4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290XG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIDogaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIGZvciB0ZW1wbGF0ZS1vbmx5IGhvdC1yZWxvYWQgYmVjYXVzZSBpbiB0aGF0IGNhc2UgdGhlIHJlbmRlciBmbiBkb2Vzbid0XG4gICAgICAvLyBnbyB0aHJvdWdoIHRoZSBub3JtYWxpemVyXG4gICAgICBvcHRpb25zLl9pbmplY3RTdHlsZXMgPSBob29rXG4gICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL05hdk1lbnUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWYyYjEzMzdjJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL05hdk1lbnUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9OYXZNZW51LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9OYXZNZW51LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPWYyYjEzMzdjJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiZjJiMTMzN2NcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvaG9tZS9zYW0vUHJvamVjdHMvU2FtQW5kTWlrZU5GVC9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCdmMmIxMzM3YycpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdmMmIxMzM3YycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdmMmIxMzM3YycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vTmF2TWVudS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZjJiMTMzN2Mmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignZjJiMTMzN2MnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9Db21wb25lbnRzL05hdk1lbnUudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0hlYWRlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9IZWFkZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiaGVhZGVyXCI+XG4gICAgPGRpdiBjbGFzcz1cImhlYWRlcl9jb250YWluZXJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0aXRsZVwiPlxuICAgICAgICA8IS0tIDxpbWcgc3JjPVwiLi4vQXNzZXRzL2ljb24ucG5nXCIgYWx0PVwiXCIgLz4gLS0+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0aXRsZS10ZXh0XCI+XG4gICAgICAgICAgPGgxPk1pa2UgYW5kIFNhbSdzIE5GVDwvaDE+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibmF2XCIgaWQ9XCJuYXZfY29udGFpbmVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJuZXdzXCI+XG4gICAgICAgICAgPHNwYW4+TWludGluZyBRMSAyMDIyITwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJsaW5rc1wiPlxuICAgICAgICAgIDxOYXZNZW51IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwibW9iaWxlX21lbnVfaWNvblwiIEBjbGljaz1cImhpZGVNZW51ID0gIWhpZGVNZW51XCI+XG4gICAgICAgICAgPHNwYW4+76GbPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJtb2JpbGVfbmF2X21lbnVcIiB2LWlmPVwiIWhpZGVNZW51XCI+XG4gICAgICA8TmF2TWVudSA6aXNNZW51PVwidHJ1ZVwiIHYtb246Y2xvc2VNZW51PVwiaGlkZU1lbnU9dHJ1ZVwiLz5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IE5hdk1lbnUgZnJvbSBcIi4vTmF2TWVudS52dWVcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBkYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhpZGVNZW51OiB0cnVlLFxuICAgIH07XG4gIH0sXG4gIGNvbXBvbmVudHM6IHsgTmF2TWVudSB9LFxuICBtb3VudGVkKCkge30sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPSdzY3NzJyBzY29wZWQ+XG5AaW1wb3J0IFwiLi4vX3ZhcmlhYmxlc1wiO1xuXG4uaGVhZGVyIHtcbiAgei1pbmRleDogMTA7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgd2lkdGg6IDEwMCU7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgYmFja2dyb3VuZC1jb2xvcjogJGJhbm5lcl9iYWNrZ3JvdW5kO1xuICBjb2xvcjogJGJhbm5lcl90ZXh0O1xuICBvcGFjaXR5OiA4MCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xufVxuXG4uaGVhZGVyX2NvbnRhaW5lciB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLm5hdiB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogZW5kO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB3aWR0aDogNjAlO1xufVxuXG4ubmV3cyB7XG4gIG1hcmdpbi1yaWdodDogMnZ3O1xuICBib3JkZXI6IDJweCBzb2xpZCAkYmFubmVyX3RleHQ7XG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XG4gIHBhZGRpbmc6IDEwcHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLnRpdGxlIHtcbiAgbWFyZ2luLWxlZnQ6IDIwcHg7XG59XG5cbi5tb2JpbGVfbWVudV9pY29uIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgZm9udC1zaXplOiA1MHB0O1xuICBtYXJnaW4tcmlnaHQ6IDF2dztcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4ubW9iaWxlX25hdl9tZW51IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMTAwcHgpIHtcbiAgLm1vYmlsZV9tZW51X2ljb24ge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9XG5cbiAgLm1vYmlsZV9uYXZfbWVudSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cblxuICAubGlua3Mge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbn1cbjwvc3R5bGU+IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9IZWFkZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTYyODI2YmM2JnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0hlYWRlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0hlYWRlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vSGVhZGVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTYyODI2YmM2Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiNjI4MjZiYzZcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvaG9tZS9zYW0vUHJvamVjdHMvU2FtQW5kTWlrZU5GVC9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc2MjgyNmJjNicpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc2MjgyNmJjNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc2MjgyNmJjNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vSGVhZGVyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02MjgyNmJjNiZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc2MjgyNmJjNicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL0NvbXBvbmVudHMvSGVhZGVyLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX3ZtLl9tKDApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZvb3RlclwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwidGl0bGVcIiB9LCBbX2MoXCJwXCIsIFtfdm0uX3YoXCJHb2xmaW4gR2Vja29zXCIpXSldKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImluZm9cIiB9LCBbXG4gICAgICAgIF9jKFwicFwiLCBbX3ZtLl92KFwiTWFkZSBieSBTYW0gTmV3YnlcIildKVxuICAgICAgXSlcbiAgICBdKVxuICB9XG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vRm9vdGVyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1hNGU3MzNhYSZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9Gb290ZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9Gb290ZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0Zvb3Rlci52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1hNGU3MzNhYSZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcImE0ZTczM2FhXCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL2hvbWUvc2FtL1Byb2plY3RzL1NhbUFuZE1pa2VORlQvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnYTRlNzMzYWEnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnYTRlNzMzYWEnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnYTRlNzMzYWEnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0Zvb3Rlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YTRlNzMzYWEmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignYTRlNzMzYWEnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9Db21wb25lbnRzL0Zvb3Rlci52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJmb290ZXJcIj5cbiAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIj5cbiAgICAgIDxwPkdvbGZpbiBHZWNrb3M8L3A+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImluZm9cIj5cbiAgICAgIDxwPk1hZGUgYnkgU2FtIE5ld2J5PC9wPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG5AaW1wb3J0IFwiLi4vX3ZhcmlhYmxlc1wiO1xuXG4uZm9vdGVyIHtcbiAgY29sb3I6ICRmb290ZXJfdGV4dDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBtYXJnaW4tdG9wOiA0MHB4O1xufVxuXG5wIHtcbiAgbWFyZ2luOiAwO1xufVxuXG48L3N0eWxlPiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJsYW5kaW5nXCIgfSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0xhbmRpbmcudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc3ZmI3MTgzJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0xhbmRpbmcudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9MYW5kaW5nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9MYW5kaW5nLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTc3ZmI3MTgzJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiNzdmYjcxODNcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvaG9tZS9zYW0vUHJvamVjdHMvU2FtQW5kTWlrZU5GVC9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc3N2ZiNzE4MycpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc3N2ZiNzE4MycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc3N2ZiNzE4MycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vTGFuZGluZy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzdmYjcxODMmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignNzdmYjcxODMnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9QYWdlcy9MYW5kaW5nLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImxhbmRpbmdcIj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge307XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxuQGltcG9ydCBcIi4uL192YXJpYWJsZXNcIjtcblxuLmxhbmRpbmcge1xuICBoZWlnaHQ6IDEwODBweDtcbiAgd2lkdGg6IDk4dnc7XG59XG5cbi5sYW5kaW5nIHtcbiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vQXNzZXRzL01pa2UuanBnXCIpO1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgdG9wO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuXG59XG5cbjwvc3R5bGU+IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfdm0uX20oMClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgYXR0cnM6IHsgaWQ6IFwicm9hZG1hcF9jb250YWluZXJcIiB9IH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwidGV4dFwiIH0sIFtcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcInRpdGxlXCIsIGF0dHJzOiB7IFwiZGF0YS1hb3NcIjogXCJmYWRlLWRvd25cIiB9IH0sXG4gICAgICAgICAgW19jKFwiaDFcIiwgW192bS5fdihcIlJvYWRtYXBcIildKV1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJyb2FkbWFwLWl0ZW0gcm9hZG1hcC0xXCIsXG4gICAgICAgICAgICBhdHRyczogeyBcImRhdGEtYW9zXCI6IFwiZmFkZS1yaWdodFwiIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwiaDJcIiwgW192bS5fdihcIjEuIENyZWF0aW9uXCIpXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJwXCIsIFtcbiAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICBxdWFlIGFiIGlsbG8gaW52ZW50b3JlIHZlcml0YXRpcyBldCBxdWFzaSBhcmNoaXRlY3RvIGJlYXRhZSB2aXRhZVxcbiAgICAgICAgZGljdGEgc3VudCBleHBsaWNhYm8uIE5lbW8gZW5pbSBpcHNhbSB2b2x1cHRhdGVtIHF1aWEgdm9sdXB0YXMgc2l0XFxuICAgICAgICBhc3Blcm5hdHVyIGF1dCBvZGl0IGF1dCBmdWdpdCwgc2VkIHF1aWEgY29uc2VxdXVudHVyIG1hZ25pIGRvbG9yZXMgZW9zXFxuICAgICAgICBxdWkgcmF0aW9uZSB2b2x1cHRhdGVtIHNlcXVpIG5lc2NpdW50LiBpbGxvIGludmVudG9yZSB2ZXJpdGF0aXMgZXRcXG4gICAgICAgIHF1YXNpIGFyY2hpdGVjdG8gYmVhdGFlIHZpdGFlIGRpY3RhIHN1bnQgZXhwbGljYWJvLiBOZW1vIGVuaW0gaXBzYW1cXG4gICAgICAgIHZvbHVwdGF0ZW0gcXVpYSB2b2x1cHRhcyBzaXQgYXNwZXJuYXR1ciBhdXQgb2RpdCBhdXQgZnVnaXQsIHNlZCBxdWlhXFxuICAgICAgICBjb25zZXF1dW50dXIgbWFnbmkgZG9sb3JlcyBlb3MgcXVpIHJhdGlvbmUgdm9sdXB0YXRlbSBzZXF1aSBuZXNjaXVudC5cXG4gICAgICAgIE5lcXVlIHBvcnJvIHF1aXNxdWFtIGVzdCwgcXVpIGRvbG9yZW0gaXBzdW0gcXVpYSBkb2xvciBzaXQgYW1ldCxcXG4gICAgICAgIGNvbnNlY3RldHVyLCBhZGlwaXNjaSB2ZWxpdCwgc2VkIHF1aWEgbm9uIG51bXF1YW0gZWl1cyBtb2RpIHRlbXBvcmFcXG4gICAgICAgIGluY2lkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmFtXFxuICAgICAgXCJcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJyb2FkbWFwLTJcIiwgYXR0cnM6IHsgXCJkYXRhLWFvc1wiOiBcImZhZGUtbGVmdFwiIH0gfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJvYWRtYXAtaXRlbVwiIH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJoMlwiLCBbX3ZtLl92KFwiMi4gTWludGluZ1wiKV0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcInBcIiwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgIEJ1dCBJIG11c3QgZXhwbGFpbiB0byB5b3UgaG93IGFsbCB0aGlzIG1pc3Rha2VuIGlkZWEgb2YgZGVub3VuY2luZ1xcbiAgICAgICAgICBwbGVhc3VyZSBhbmQgcHJhaXNpbmcgcGFpbiB3YXMgYm9ybiBhbmQgSSB3aWxsIGdpdmUgeW91IGEgY29tcGxldGVcXG4gICAgICAgICAgYWNjb3VudC4gdWUgbmloaWwgaW1wZWRpdCBxdW8gbWludXMgaWQgcXVvZCBtYXhpbWUgcGxhY2VhdCBmYWNlcmVcXG4gICAgICAgICAgcG9zc2ltdXMsIG9tbmlzIHZvbHVwdGFzIGFzc3VtZW5kYSBlc3QsIG9tbmlzIGRvbG9yIHJlcGVsbGVuZHVzLlxcbiAgICAgICAgICBUZW1wb3JpYnVzIGF1dGVtIHF1aWJ1c2RhbSBldCBhdXQgb2ZmaWNpaXMgZGViaXRpcyBhdXQgcmVydW1cXG4gICAgICAgICAgbmVjZXNzaXRhdGlidXMgc2FlcGUgZXZlbmlldCB1dCBldCB2b2x1cHRhdGVzIHJlcHVkaWFuZGFlIHNpbnQgZXRcXG4gICAgICAgICAgbW9sZXN0aWFlIG5vbiByZWN1c2FuZGFlLiBJdGFxdWUgZWFydVxcbiAgICAgICAgXCJcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF1cbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJyb2FkbWFwLWl0ZW0gcm9hZG1hcC0zXCIsXG4gICAgICAgICAgICBhdHRyczogeyBcImRhdGEtYW9zXCI6IFwiZmFkZS1yaWdodFwiIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwiaDJcIiwgW192bS5fdihcIjMuIEltcHJvdmVtZW50XCIpXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJwXCIsIFtcbiAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICBBdCB2ZXJvIGVvcyBldCBhY2N1c2FtdXMgZXQgaXVzdG8gb2RpbyBkaWduaXNzaW1vcyBkdWNpbXVzIHF1aVxcbiAgICAgICAgYmxhbmRpdGlpcyBwcmFlc2VudGl1bSB2b2x1cHRhdHVtIGRlbGVuaXRpIGF0cXVlIGNvcnJ1cHRpIHF1b3MgY2F0aVxcbiAgICAgICAgY3VwaWRpdGF0ZSBub24gcHJvdmlkZW50LCBzaW1pbGlxdWUgc3VudCBpbiBjdWxwYSBxdWkgb2ZmaWNpYSBkZXNlcnVudFxcbiAgICAgICAgbW9sbGl0aWEgYW5pbWksIGlkIGVzdCBsYWJvcnVtIGV0IGRvbG9ydW0gZnVnYS4gRXQgaGFydW0gcXVpZGVtIHJlcnVtXFxuICAgICAgICBmYWNpbGlzIGVzdCBldCBleHBlZGl0YSBkaXN0aW5jdGlvLiBOYW0gbGliZXJvIHRlbXBvcmUsIGN1bSBzb2x1dGFcXG4gICAgICAgIG5vYmlzIGVzdCBlbGlnZW5kaSBvcHRpbyBjdW1xdWUgbmloaWwgaW1wZWRpdCBxdW8gbWludXMgaWQgcXVvZFxcbiAgICAgIFwiXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXVxuICAgICAgICApXG4gICAgICBdKVxuICAgIF0pXG4gIH1cbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9Sb2FkbWFwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mMDZhMjFiMCZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9Sb2FkbWFwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vUm9hZG1hcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vUm9hZG1hcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD1mMDZhMjFiMCZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcImYwNmEyMWIwXCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL2hvbWUvc2FtL1Byb2plY3RzL1NhbUFuZE1pa2VORlQvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnZjA2YTIxYjAnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnZjA2YTIxYjAnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnZjA2YTIxYjAnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1JvYWRtYXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWYwNmEyMWIwJnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJ2YwNmEyMWIwJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvUGFnZXMvUm9hZG1hcC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCI8dGVtcGxhdGU+XG4gIDxkaXYgaWQ9XCJyb2FkbWFwX2NvbnRhaW5lclwiPlxuICAgIDxkaXYgY2xhc3M9XCJ0ZXh0XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwidGl0bGVcIiBkYXRhLWFvcz1cImZhZGUtZG93blwiPlxuICAgICAgICA8aDE+Um9hZG1hcDwvaDE+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJyb2FkbWFwLWl0ZW0gcm9hZG1hcC0xXCIgZGF0YS1hb3M9XCJmYWRlLXJpZ2h0XCI+XG4gICAgICAgIDxoMj4xLiBDcmVhdGlvbjwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIHF1YWUgYWIgaWxsbyBpbnZlbnRvcmUgdmVyaXRhdGlzIGV0IHF1YXNpIGFyY2hpdGVjdG8gYmVhdGFlIHZpdGFlXG4gICAgICAgICAgZGljdGEgc3VudCBleHBsaWNhYm8uIE5lbW8gZW5pbSBpcHNhbSB2b2x1cHRhdGVtIHF1aWEgdm9sdXB0YXMgc2l0XG4gICAgICAgICAgYXNwZXJuYXR1ciBhdXQgb2RpdCBhdXQgZnVnaXQsIHNlZCBxdWlhIGNvbnNlcXV1bnR1ciBtYWduaSBkb2xvcmVzIGVvc1xuICAgICAgICAgIHF1aSByYXRpb25lIHZvbHVwdGF0ZW0gc2VxdWkgbmVzY2l1bnQuIGlsbG8gaW52ZW50b3JlIHZlcml0YXRpcyBldFxuICAgICAgICAgIHF1YXNpIGFyY2hpdGVjdG8gYmVhdGFlIHZpdGFlIGRpY3RhIHN1bnQgZXhwbGljYWJvLiBOZW1vIGVuaW0gaXBzYW1cbiAgICAgICAgICB2b2x1cHRhdGVtIHF1aWEgdm9sdXB0YXMgc2l0IGFzcGVybmF0dXIgYXV0IG9kaXQgYXV0IGZ1Z2l0LCBzZWQgcXVpYVxuICAgICAgICAgIGNvbnNlcXV1bnR1ciBtYWduaSBkb2xvcmVzIGVvcyBxdWkgcmF0aW9uZSB2b2x1cHRhdGVtIHNlcXVpIG5lc2NpdW50LlxuICAgICAgICAgIE5lcXVlIHBvcnJvIHF1aXNxdWFtIGVzdCwgcXVpIGRvbG9yZW0gaXBzdW0gcXVpYSBkb2xvciBzaXQgYW1ldCxcbiAgICAgICAgICBjb25zZWN0ZXR1ciwgYWRpcGlzY2kgdmVsaXQsIHNlZCBxdWlhIG5vbiBudW1xdWFtIGVpdXMgbW9kaSB0ZW1wb3JhXG4gICAgICAgICAgaW5jaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYW1cbiAgICAgICAgPC9wPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwicm9hZG1hcC0yXCIgZGF0YS1hb3M9XCJmYWRlLWxlZnRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvYWRtYXAtaXRlbVwiPlxuICAgICAgICAgIDxoMj4yLiBNaW50aW5nPC9oMj5cbiAgICAgICAgICA8cD5cbiAgICAgICAgICAgIEJ1dCBJIG11c3QgZXhwbGFpbiB0byB5b3UgaG93IGFsbCB0aGlzIG1pc3Rha2VuIGlkZWEgb2YgZGVub3VuY2luZ1xuICAgICAgICAgICAgcGxlYXN1cmUgYW5kIHByYWlzaW5nIHBhaW4gd2FzIGJvcm4gYW5kIEkgd2lsbCBnaXZlIHlvdSBhIGNvbXBsZXRlXG4gICAgICAgICAgICBhY2NvdW50LiB1ZSBuaWhpbCBpbXBlZGl0IHF1byBtaW51cyBpZCBxdW9kIG1heGltZSBwbGFjZWF0IGZhY2VyZVxuICAgICAgICAgICAgcG9zc2ltdXMsIG9tbmlzIHZvbHVwdGFzIGFzc3VtZW5kYSBlc3QsIG9tbmlzIGRvbG9yIHJlcGVsbGVuZHVzLlxuICAgICAgICAgICAgVGVtcG9yaWJ1cyBhdXRlbSBxdWlidXNkYW0gZXQgYXV0IG9mZmljaWlzIGRlYml0aXMgYXV0IHJlcnVtXG4gICAgICAgICAgICBuZWNlc3NpdGF0aWJ1cyBzYWVwZSBldmVuaWV0IHV0IGV0IHZvbHVwdGF0ZXMgcmVwdWRpYW5kYWUgc2ludCBldFxuICAgICAgICAgICAgbW9sZXN0aWFlIG5vbiByZWN1c2FuZGFlLiBJdGFxdWUgZWFydVxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJyb2FkbWFwLWl0ZW0gcm9hZG1hcC0zXCIgZGF0YS1hb3M9XCJmYWRlLXJpZ2h0XCI+XG4gICAgICAgIDxoMj4zLiBJbXByb3ZlbWVudDwvaDI+XG4gICAgICAgIDxwPlxuICAgICAgICAgIEF0IHZlcm8gZW9zIGV0IGFjY3VzYW11cyBldCBpdXN0byBvZGlvIGRpZ25pc3NpbW9zIGR1Y2ltdXMgcXVpXG4gICAgICAgICAgYmxhbmRpdGlpcyBwcmFlc2VudGl1bSB2b2x1cHRhdHVtIGRlbGVuaXRpIGF0cXVlIGNvcnJ1cHRpIHF1b3MgY2F0aVxuICAgICAgICAgIGN1cGlkaXRhdGUgbm9uIHByb3ZpZGVudCwgc2ltaWxpcXVlIHN1bnQgaW4gY3VscGEgcXVpIG9mZmljaWEgZGVzZXJ1bnRcbiAgICAgICAgICBtb2xsaXRpYSBhbmltaSwgaWQgZXN0IGxhYm9ydW0gZXQgZG9sb3J1bSBmdWdhLiBFdCBoYXJ1bSBxdWlkZW0gcmVydW1cbiAgICAgICAgICBmYWNpbGlzIGVzdCBldCBleHBlZGl0YSBkaXN0aW5jdGlvLiBOYW0gbGliZXJvIHRlbXBvcmUsIGN1bSBzb2x1dGFcbiAgICAgICAgICBub2JpcyBlc3QgZWxpZ2VuZGkgb3B0aW8gY3VtcXVlIG5paGlsIGltcGVkaXQgcXVvIG1pbnVzIGlkIHF1b2RcbiAgICAgICAgPC9wPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHt9O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbkBpbXBvcnQgXCIuLi9fdmFyaWFibGVzXCI7XG5cbiNyb2FkbWFwX2NvbnRhaW5lciB7XG4gIHBhZGRpbmc6IDAgMTB2dztcbiAgY29sb3I6ICRyb2FkbWFwX3RleHQ7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG59XG5cbi50ZXh0IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHJvYWRtYXBfYmFja2dyb3VuZDtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLnRpdGxlIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBmb250LXNpemU6IDI0cHQ7XG59XG5cbi5yb2FkbWFwLTEge1xuICB3aWR0aDogNTAlO1xufVxuXG4ucm9hZG1hcC0zIHtcbiAgd2lkdGg6IDUwJTtcbn1cblxuLnJvYWRtYXAtaXRlbSB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHJvYWRtYXBfaXRlbTtcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgbWFyZ2luOiAxMHB4O1xufVxuXG4ucm9hZG1hcC0yIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgYWxpZ24taXRlbXM6IGVuZDtcbiAgZGl2IHtcbiAgICB3aWR0aDogNTAlO1xuICB9XG59XG5cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAwMHB4KSB7XG4gIC5yb2FkbWFwLTIgZGl2IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgfVxuXG4gIC5yb2FkbWFwLWl0ZW0ge1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5cbiAgLnRpdGxlIHtcbiAgICBmb250LXNpemU6IDE2cHQ7XG4gIH1cbn1cbjwvc3R5bGU+IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IGF0dHJzOiB7IGlkOiBcIkZBUV9jb250YWluZXJcIiB9IH0sIFtcbiAgICBfdm0uX20oMCksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcbiAgICAgIFwiZGl2XCIsXG4gICAgICB7IHN0YXRpY0NsYXNzOiBcInF1ZXN0aW9uc1wiIH0sXG4gICAgICBfdm0uX2woX3ZtLlF1ZXN0aW9ucywgZnVuY3Rpb24ocXVlc3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIF9jKFwiRkFRcXVlc3Rpb25cIiwge1xuICAgICAgICAgIGtleTogcXVlc3Rpb24ucXVlc3Rpb24sXG4gICAgICAgICAgYXR0cnM6IHsgcXVlc3Rpb246IHF1ZXN0aW9uLlF1ZXN0aW9uLCBhbnN3ZXI6IHF1ZXN0aW9uLkFuc3dlciB9XG4gICAgICAgIH0pXG4gICAgICB9KSxcbiAgICAgIDFcbiAgICApXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInRpdGxlXCIgfSwgW1xuICAgICAgX2MoXCJoMVwiLCB7IGF0dHJzOiB7IFwiZGF0YS1hb3NcIjogXCJmbGlwLXVwXCIgfSB9LCBbXG4gICAgICAgIF92bS5fdihcIkZyZXF1ZW50bHkgYXNrZWQgcXVlc3Rpb25zXCIpXG4gICAgICBdKVxuICAgIF0pXG4gIH1cbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHtcbiAgICAgIHN0YXRpY0NsYXNzOiBcImNvbnRhaW5lclwiLFxuICAgICAgYXR0cnM6IHsgXCJkYXRhLWFvc1wiOiBcImZsaXAtdXBcIiwgXCJkYXRhLWFvcy1kZWxheVwiOiBcIjIwMFwiIH1cbiAgICB9LFxuICAgIFtcbiAgICAgIF9jKFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwicXVlc3Rpb25cIixcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICBfdm0uYW5zd2VyU2hvd24gPSAhX3ZtLmFuc3dlclNob3duXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBbX2MoXCJoMlwiLCBbX3ZtLl92KF92bS5fcyhfdm0ucXVlc3Rpb24pKV0pXVxuICAgICAgKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcInRyYW5zaXRpb25cIiwgW1xuICAgICAgICBfdm0uYW5zd2VyU2hvd25cbiAgICAgICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYW5zd2VyXCIgfSwgW1xuICAgICAgICAgICAgICBfYyhcInBcIiwgW192bS5fdihfdm0uX3MoX3ZtLmFuc3dlcikpXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgXSlcbiAgICBdLFxuICAgIDFcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiIGRhdGEtYW9zPVwiZmxpcC11cFwiIGRhdGEtYW9zLWRlbGF5PVwiMjAwXCI+XG4gICAgPGRpdiBjbGFzcz1cInF1ZXN0aW9uXCIgQGNsaWNrPVwiYW5zd2VyU2hvd24gPSAhYW5zd2VyU2hvd25cIj5cbiAgICAgIDxoMj57eyBxdWVzdGlvbiB9fTwvaDI+XG4gICAgPC9kaXY+XG4gICAgPHRyYW5zaXRpb24+XG4gICAgICA8ZGl2IGNsYXNzPVwiYW5zd2VyXCIgdi1pZj1cImFuc3dlclNob3duXCI+XG4gICAgICAgIDxwPnt7IGFuc3dlciB9fTwvcD5cbiAgICAgIDwvZGl2PlxuICAgIDwvdHJhbnNpdGlvbj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHByb3BzOiB7XG4gICAgcXVlc3Rpb246IFN0cmluZyxcbiAgICBhbnN3ZXI6IFN0cmluZyxcbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhbnN3ZXJTaG93bjogZmFsc2UsXG4gICAgfTtcbiAgfSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlIGxhbmc9XCJzY3NzXCIgc2NvcGVkPlxuQGltcG9ydCBcIi4uL192YXJpYWJsZXNcIjtcblxuLnF1ZXN0aW9uIHtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4uY29udGFpbmVyIHtcbiAgbWFyZ2luOiAydmggMDtcbn1cblxuLnF1ZXN0aW9uIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogJEZBUV9xdWVzdGlvbl9iYWNrZ3JvdW5kO1xuICBwYWRkaW5nOiAycHg7XG59XG5cbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0ZBUXF1ZXN0aW9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0ZBUXF1ZXN0aW9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vRkFRcXVlc3Rpb24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTRiMDQ0OTFjJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0ZBUXF1ZXN0aW9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vRkFRcXVlc3Rpb24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0ZBUXF1ZXN0aW9uLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTRiMDQ0OTFjJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiNGIwNDQ5MWNcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvaG9tZS9zYW0vUHJvamVjdHMvU2FtQW5kTWlrZU5GVC9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc0YjA0NDkxYycpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc0YjA0NDkxYycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc0YjA0NDkxYycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vRkFRcXVlc3Rpb24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTRiMDQ0OTFjJnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzRiMDQ0OTFjJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvQ29tcG9uZW50cy9GQVFxdWVzdGlvbi52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRkFRLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0ZBUS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCI8dGVtcGxhdGU+XG4gIDxkaXYgaWQ9XCJGQVFfY29udGFpbmVyXCI+XG4gICAgPGRpdiBjbGFzcz1cInRpdGxlXCI+XG4gICAgICA8aDEgZGF0YS1hb3M9XCJmbGlwLXVwXCI+RnJlcXVlbnRseSBhc2tlZCBxdWVzdGlvbnM8L2gxPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJxdWVzdGlvbnNcIj5cbiAgICAgIDxGQVFxdWVzdGlvblxuICAgICAgICB2LWZvcj1cInF1ZXN0aW9uIGluIFF1ZXN0aW9uc1wiXG4gICAgICAgIDprZXk9XCJxdWVzdGlvbi5xdWVzdGlvblwiXG4gICAgICAgIDpxdWVzdGlvbj1cInF1ZXN0aW9uLlF1ZXN0aW9uXCJcbiAgICAgICAgOmFuc3dlcj1cInF1ZXN0aW9uLkFuc3dlclwiXG4gICAgICAvPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgRkFRcXVlc3Rpb24gZnJvbSBcIi4uL0NvbXBvbmVudHMvRkFRcXVlc3Rpb24udnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czogeyBGQVFxdWVzdGlvbiB9LFxuICBkYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIFF1ZXN0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgUXVlc3Rpb246IFwiSG93IG11Y2ggZG9lcyB0aGUgbmZ0IGNvc3Q/XCIsXG4gICAgICAgICAgQW5zd2VyOlxuICAgICAgICAgICAgXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpc0xvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBcIixcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFF1ZXN0aW9uOiBcIldoYXQgYXJlIHRoZSByYXJpdGllcz9cIixcbiAgICAgICAgICBBbnN3ZXI6XG4gICAgICAgICAgICBcIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbyBlaXVzbW9kdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCBxdWlzXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBRdWVzdGlvbjogXCJXaGF0IGFyZSBmdXR1cmUgcGxhbnM/P1wiLFxuICAgICAgICAgIEFuc3dlcjpcbiAgICAgICAgICAgIFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2R0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZCBtaW5pbSB2TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2R0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGVuaWFtLCBxdWlzXCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBRdWVzdGlvbjogXCJXaGF0IGlzIGFub3RoZXIgcXVlc3Rpb24/XCIsXG4gICAgICAgICAgQW5zd2VyOlxuICAgICAgICAgICAgXCJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYWxpcXVhLiBVdCBlbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpc1wiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgUXVlc3Rpb246IFwiSGVyZSBnb2VzIHRoZSBsYXN0IHF1ZXN0aW9uP1wiLFxuICAgICAgICAgIEFuc3dlcjpcbiAgICAgICAgICAgIFwiTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvIGVpdXNtb2R0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25Mb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZG8gZWl1c21vZHRlbXBvciBpbmNpZGlkdW50IHV0IGxhYm9yZSBldCBkb2xvcmUgbWFnbmEgYSBhbGlxdWEuIFV0IGVuaW0gYWQgbWluaW0gdmVuaWFtLCBxdWlzXCIsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbkBpbXBvcnQgXCIuLi9fdmFyaWFibGVzXCI7XG5cbiNGQVFfY29udGFpbmVyIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogJEZBUV9iYWNrZ3JvdW5kO1xuICBtYXJnaW46IDAgMTB2dztcbiAgY29sb3I6ICRGQVFfdGV4dDtcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgcGFkZGluZzogMTVweDtcbn1cblxuLnRpdGxlIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBmb250LXNpemU6IDI0cHQ7XG59XG5cbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTAwMHB4KSB7XG4gIC50aXRsZSB7XG4gICAgaDF7XG4gICAgICBmb250LXNpemU6IDMwcHQ7XG4gICAgfVxuICB9XG5cbn1cblxuPC9zdHlsZT4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0ZBUS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9Y2NiNTFkZmMmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vRkFRLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vRkFRLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9GQVEudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9Y2NiNTFkZmMmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCJjY2I1MWRmY1wiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIi9ob21lL3NhbS9Qcm9qZWN0cy9TYW1BbmRNaWtlTkZUL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJ2NjYjUxZGZjJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJ2NjYjUxZGZjJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJ2NjYjUxZGZjJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9GQVEudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWNjYjUxZGZjJnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJ2NjYjUxZGZjJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvUGFnZXMvRkFRLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBhdHRyczogeyBpZDogXCJ0ZWFtX2NvbnRhaW5lclwiIH0gfSwgW1xuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29udGFpbmVyXCIgfSwgW1xuICAgICAgX2MoXCJoMVwiLCB7IGF0dHJzOiB7IFwiZGF0YS1hb3NcIjogXCJmYWRlLXVwXCIgfSB9LCBbX3ZtLl92KFwiVGVhbSBNZW1iZXJzXCIpXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgc3RhdGljQ2xhc3M6IFwibWVtYmVyc1wiIH0sXG4gICAgICAgIF92bS5fbChfdm0udGVhbV9tZW1iZXJzLCBmdW5jdGlvbihtZW1iZXIpIHtcbiAgICAgICAgICByZXR1cm4gX2MoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgeyBrZXk6IG1lbWJlci5pbmRleCB9LFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICBfYyhcIlRlYW1NZW1iZXJcIiwge1xuICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBtZW1iZXIubmFtZSxcbiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBtZW1iZXIuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICBpbWFnZTogbWVtYmVyLmltYWdlLFxuICAgICAgICAgICAgICAgICAgYWx0OiBtZW1iZXIuYWx0LFxuICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uOiBtZW1iZXIuaW5kZXggJSAyID09IDAgPyBcInJpZ2h0XCIgOiBcImxlZnRcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAxXG4gICAgICAgICAgKVxuICAgICAgICB9KSxcbiAgICAgICAgMFxuICAgICAgKVxuICAgIF0pXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHtcbiAgICAgIHN0YXRpY0NsYXNzOiBcInRlYW1fbWVtYmVyXCIsXG4gICAgICBhdHRyczogeyBcImRhdGEtYW9zXCI6IFwiZmFkZS1cIiArIF92bS5kaXJlY3Rpb24gfVxuICAgIH0sXG4gICAgW1xuICAgICAgX2MoXCJpbWdcIiwge1xuICAgICAgICByZWY6IFwibWVtYmVyX2ltYWdlXCIsXG4gICAgICAgIHN0YXRpY0NsYXNzOiBcIm1lbWJlcl9pbWFnZVwiLFxuICAgICAgICBhdHRyczogeyBhbHQ6IF92bS5hbHQgfVxuICAgICAgfSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJoM1wiLCBbX3ZtLl92KF92bS5fcyhfdm0ubmFtZSkpXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJwXCIsIFtfdm0uX3YoX3ZtLl9zKF92bS5kZXNjcmlwdGlvbikpXSlcbiAgICBdXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cInRlYW1fbWVtYmVyXCIgOmRhdGEtYW9zPVwiJ2ZhZGUtJyArIGRpcmVjdGlvblwiPlxuICAgICAgICA8aW1nIGNsYXNzPVwibWVtYmVyX2ltYWdlXCIgcmVmPVwibWVtYmVyX2ltYWdlXCIgOmFsdD1cImFsdFwiPlxuICAgICAgICA8aDM+e3sgbmFtZSB9fTwvaDM+XG4gICAgICAgIDxwPnt7IGRlc2NyaXB0aW9uIH19PC9wPlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczoge1xuICAgICAgICBuYW1lOiBTdHJpbmcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBTdHJpbmcsXG4gICAgICAgIGltYWdlOiBTdHJpbmcsXG4gICAgICAgIGFsdDogU3RyaW5nLFxuICAgICAgICBkaXJlY3Rpb246IFN0cmluZ1xuICAgIH0sXG4gICAgbW91bnRlZCgpIHtcbiAgICAgICAgdGhpcy4kcmVmcy5tZW1iZXJfaW1hZ2Uuc3JjID0gcmVxdWlyZShcIi4uL0Fzc2V0cy9cIiArIHRoaXMuaW1hZ2UpXG4gICAgfVxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbkBpbXBvcnQgJy4uL192YXJpYWJsZXMnO1xuXG4udGVhbV9tZW1iZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRtZW1iZXJfYmFja2dyb3VuZDtcbiAgICBjb2xvcjogJG1lbWJlcl90ZXh0O1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBwYWRkaW5nOiAxNXB4O1xuICAgIG1hcmdpbjogMTVweDtcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xufVxuXG4ubWVtYmVyX2ltYWdlIHtcbiAgICB3aWR0aDogMjB2dztcbiAgICBoZWlnaHQ6IGF1dG87XG59XG5cbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1RlYW1NZW1iZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vVGVhbU1lbWJlci52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1RlYW1NZW1iZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTE3ZTNiNWU3JnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1RlYW1NZW1iZXIudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9UZWFtTWVtYmVyLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9UZWFtTWVtYmVyLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTE3ZTNiNWU3Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMTdlM2I1ZTdcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvaG9tZS9zYW0vUHJvamVjdHMvU2FtQW5kTWlrZU5GVC9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCcxN2UzYjVlNycpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCcxN2UzYjVlNycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCcxN2UzYjVlNycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vVGVhbU1lbWJlci52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTdlM2I1ZTcmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMTdlM2I1ZTcnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9Db21wb25lbnRzL1RlYW1NZW1iZXIudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1RlYW0udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vVGVhbS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCI8dGVtcGxhdGU+XG4gIDxkaXYgaWQ9XCJ0ZWFtX2NvbnRhaW5lclwiPlxuICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICAgIDxoMSBkYXRhLWFvcz1cImZhZGUtdXBcIj5UZWFtIE1lbWJlcnM8L2gxPlxuICAgICAgPGRpdiBjbGFzcz1cIm1lbWJlcnNcIj5cbiAgICAgICAgPGRpdiB2LWZvcj1cIm1lbWJlciBpbiB0ZWFtX21lbWJlcnNcIiA6a2V5PVwibWVtYmVyLmluZGV4XCI+XG4gICAgICAgICAgPFRlYW1NZW1iZXJcbiAgICAgICAgICAgIDpuYW1lPVwibWVtYmVyLm5hbWVcIlxuICAgICAgICAgICAgOmRlc2NyaXB0aW9uPVwibWVtYmVyLmRlc2NyaXB0aW9uXCJcbiAgICAgICAgICAgIDppbWFnZT1cIm1lbWJlci5pbWFnZVwiXG4gICAgICAgICAgICA6YWx0PVwibWVtYmVyLmFsdFwiXG4gICAgICAgICAgICA6ZGlyZWN0aW9uPVwibWVtYmVyLmluZGV4ICUgMiA9PSAwID8gJ3JpZ2h0JyA6ICdsZWZ0J1wiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IFRlYW1NZW1iZXIgZnJvbSBcIi4uL0NvbXBvbmVudHMvVGVhbU1lbWJlci52dWVcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XG4gICAgVGVhbU1lbWJlcixcbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICB0ZWFtX21lbWJlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGluZGV4OiAwLFxuICAgICAgICAgIG5hbWU6IFwiTm9vYnlcIixcbiAgICAgICAgICBpbWFnZTogXCJOb29ieS5qcGdcIixcbiAgICAgICAgICBhbHQ6IFwiQSBwaWN0dXJlIG9mIE1yTm9vYnlcIixcbiAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgIFwiVGhpcyBpcyBhIGRlc2NyaXB0aW9uIGZvciBOb29ieSBhbmQgdGhlIGNvbnRyaWJ1dGlvbnMgaGUgaGFzIGRvbmUgdG8gdGhpcyAgcHJvamVjdFwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaW5kZXg6IDEsXG4gICAgICAgICAgbmFtZTogXCJNaWtlXCIsXG4gICAgICAgICAgaW1hZ2U6IFwiTWlrZS5qcGdcIixcbiAgICAgICAgICBhbHQ6IFwiQSBwaWN0dXJlIG9mIE1pa2VcIixcbiAgICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgIFwiVGhpcyBpcyBhIGRlc2NyaXB0aW9uIGZvciBNaWtlIGFuZCB0aGUgY29udHJpYnV0aW9ucyBoZSBoYXMgZG9uZSB0byB0aGlzICBwcm9qZWN0XCIsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbkBpbXBvcnQgXCIuLi9fdmFyaWFibGVzXCI7XG5cbiN0ZWFtX2NvbnRhaW5lciB7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG4gIHBhZGRpbmc6IDAgMTB2dztcbiAgY29sb3I6ICR0ZWFtX3RpdGxlO1xufVxuXG4ubWVtYmVycyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xufVxuXG4uY29udGFpbmVyIHtcbiAgcGFkZGluZy10b3A6IDVweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHRlYW1fYmFja2dyb3VuZDtcbiAgaDEge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogNDhwdDtcbn1cbn1cblxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDAwcHgpIHtcbiAgLm1lbWJlcnMge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIH1cblxuICAuY29udGFpbmVyIHtcbiAgICBoMXtcbiAgICAgIGZvbnQtc2l6ZTogMzBwdDtcbiAgICB9XG4gIH1cblxufVxuXG48L3N0eWxlPiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vVGVhbS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NGY0M2QyYmUmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vVGVhbS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL1RlYW0udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL1RlYW0udnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NGY0M2QyYmUmbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCI0ZjQzZDJiZVwiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIi9ob21lL3NhbS9Qcm9qZWN0cy9TYW1BbmRNaWtlTkZUL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzRmNDNkMmJlJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzRmNDNkMmJlJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzRmNDNkMmJlJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9UZWFtLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00ZjQzZDJiZSZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc0ZjQzZDJiZScsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL1BhZ2VzL1RlYW0udnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfdm0uX20oMClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgYXR0cnM6IHsgaWQ6IFwicmFyaXR5X2NvbnRhaW5lclwiIH0gfSwgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb250YWluZXJcIiB9LCBbXG4gICAgICAgIF9jKFwiaDFcIiwgeyBhdHRyczogeyBcImRhdGEtYW9zXCI6IFwiZmFkZS11cFwiIH0gfSwgW192bS5fdihcIlJhcml0aWVzXCIpXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJyYXJpdHlfY29udGVudFwiLCBhdHRyczogeyBcImRhdGEtYW9zXCI6IFwiem9vbS1pblwiIH0gfSxcbiAgICAgICAgICBbX2MoXCJoMlwiLCBbX3ZtLl92KFwiQ29taW5nIHNvb24hXCIpXSldXG4gICAgICAgIClcbiAgICAgIF0pXG4gICAgXSlcbiAgfVxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1Jhcml0eS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZWQzMjI4MjImc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vUmFyaXR5LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vUmFyaXR5LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9SYXJpdHkudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9ZWQzMjI4MjImbGFuZz1zY3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCJlZDMyMjgyMlwiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIi9ob21lL3NhbS9Qcm9qZWN0cy9TYW1BbmRNaWtlTkZUL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJ2VkMzIyODIyJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJ2VkMzIyODIyJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJ2VkMzIyODIyJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9SYXJpdHkudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWVkMzIyODIyJnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJ2VkMzIyODIyJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvUGFnZXMvUmFyaXR5LnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBpZD1cInJhcml0eV9jb250YWluZXJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG4gICAgICA8aDEgZGF0YS1hb3M9XCJmYWRlLXVwXCI+UmFyaXRpZXM8L2gxPlxuICAgICAgPGRpdiBjbGFzcz1cInJhcml0eV9jb250ZW50XCIgZGF0YS1hb3M9XCJ6b29tLWluXCIgPlxuICAgICAgICA8aDI+Q29taW5nIHNvb24hPC9oMj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7fTtcbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIiBzY29wZWQ+XG5AaW1wb3J0IFwiLi4vX3ZhcmlhYmxlc1wiO1xuXG4jcmFyaXR5X2NvbnRhaW5lciB7XG4gIG1hcmdpbi10b3A6IDIwcHg7XG4gIHBhZGRpbmc6IDAgMTB2dztcbiAgY29sb3I6ICRyYXJpdHlfdGV4dDtcbn1cblxuLnJhcml0eV9jb250ZW50IHtcbiAgICBoZWlnaHQ6IDMwdmg7XG59XG5cbi5jb250YWluZXIge1xuICBwYWRkaW5nLXRvcDogNXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAkcmFyaXR5X2JhY2tncm91bmQ7XG4gIGhlaWdodDogNjB2aDtcbiAgaDEge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBmb250LXNpemU6IDQ4cHQ7XG4gIH1cbn1cbi5yYXJpdHlfY29udGVudCB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xufVxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCI8dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgICA8SGVhZGVyIC8+XG4gICAgICAgIDxMYW5kaW5nIC8+XG4gICAgICAgIDxSb2FkbWFwIC8+XG4gICAgICAgIDxUZWFtIC8+XG4gICAgICAgIDxGQVEgLz5cbiAgICAgICAgPFJhcml0eSAvPlxuICAgICAgICA8Rm9vdGVyIC8+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IEhlYWRlciBmcm9tICcuL0NvbXBvbmVudHMvSGVhZGVyLnZ1ZSdcbmltcG9ydCBGb290ZXIgZnJvbSAnLi9Db21wb25lbnRzL0Zvb3Rlci52dWUnXG5pbXBvcnQgTGFuZGluZyBmcm9tICcuL1BhZ2VzL0xhbmRpbmcudnVlJ1xuaW1wb3J0IFJvYWRtYXAgZnJvbSAnLi9QYWdlcy9Sb2FkbWFwLnZ1ZSdcbmltcG9ydCBGQVEgZnJvbSAnLi9QYWdlcy9GQVEudnVlJ1xuaW1wb3J0IFRlYW0gZnJvbSAnLi9QYWdlcy9UZWFtLnZ1ZSdcbmltcG9ydCBSYXJpdHkgZnJvbSAnLi9QYWdlcy9SYXJpdHkudnVlJ1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgIEhlYWRlciwgRm9vdGVyLCBMYW5kaW5nLCBSb2FkbWFwLCBGQVEsIFRlYW0sIFJhcml0eVxuICAgIH1cbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgbGFuZz1cInNjc3NcIj5cbiAgICBAaW1wb3J0ICdfdmFyaWFibGVzJztcblxuICAgIGJvZHkge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkcHJpbWFyeTtcbiAgICB9XG5cbiAgICBAZm9udC1mYWNlIHtcbiAgICAgICAgZm9udC1mYW1pbHk6ICdOZXdSb21hbic7XG4gICAgICAgIHNyYzogdXJsKCcuL0Fzc2V0cy9Db2RlX05ld19Sb21hbl9OZXJkX0ZvbnRfQ29tcGxldGVfTW9uby50dGYnKTtcbiAgICB9XG5cbiAgICBoMSwgaDIsIGgzLCBoNCB7XG4gICAgICAgIGZvbnQtZmFtaWx5OiBOZXdSb21hbjtcbiAgICB9XG5cbiAgICBzcGFuIHtcbiAgICAgICAgZm9udC1mYW1pbHk6IE5ld1JvbWFuO1xuICAgIH1cblxuICAgIHAge1xuICAgICAgICBmb250LWZhbWlseTogTmV3Um9tYW47XG4gICAgfVxuPC9zdHlsZT4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2JhNWJkOTAmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1zY3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvaG9tZS9zYW0vUHJvamVjdHMvU2FtQW5kTWlrZU5GVC9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc3YmE1YmQ5MCcpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc3YmE1YmQ5MCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc3YmE1YmQ5MCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vQXBwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03YmE1YmQ5MCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc3YmE1YmQ5MCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL0FwcC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9hb3MuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Fvcy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAudnVlJ1xuaW1wb3J0IEFvcyBmcm9tICdhb3MnXG5pbXBvcnQgJ2Fvcy9kaXN0L2Fvcy5jc3MnXG5cbnZhciBhcHAgPSBuZXcgVnVlKHtcbiAgICBjcmVhdGVkKCkge1xuICAgICAgICBBb3MuaW5pdCh7XG4gICAgICAgICAgICBzdGFydEV2ZW50OiAnbG9hZCdcbiAgICAgICAgfSlcbiAgICB9LFxuICAgIHJlbmRlcjogaCA9PiBoKEFwcClcbn0pLiRtb3VudCgnI2FwcCcpIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJlIiwidCIsIm8iLCJuIiwiaSIsImlkIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiT2JqZWN0IiwiYXNzaWduIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJhIiwidSIsInMiLCJkIiwiYiIsInkiLCJoIiwidyIsImsiLCJ4Iiwib2Zmc2V0IiwiZGVsYXkiLCJlYXNpbmciLCJkdXJhdGlvbiIsImRpc2FibGUiLCJvbmNlIiwic3RhcnRFdmVudCIsInRocm90dGxlRGVsYXkiLCJkZWJvdW5jZURlbGF5IiwiZGlzYWJsZU11dGF0aW9uT2JzZXJ2ZXIiLCJqIiwiTyIsImluaXQiLCJkb2N1bWVudCIsImFsbCIsIndpbmRvdyIsImF0b2IiLCJtb2JpbGUiLCJwaG9uZSIsInRhYmxldCIsIlMiLCJmb3JFYWNoIiwibm9kZSIsInJlbW92ZUF0dHJpYnV0ZSIsImlzU3VwcG9ydGVkIiwiY29uc29sZSIsImluZm8iLCJxdWVyeVNlbGVjdG9yIiwic2V0QXR0cmlidXRlIiwiaW5kZXhPZiIsInJlYWR5U3RhdGUiLCJhZGRFdmVudExpc3RlbmVyIiwicmVhZHkiLCJyZWZyZXNoIiwicmVmcmVzaEhhcmQiLCJ2IiwiZyIsImFwcGx5IiwiciIsInNldFRpbWVvdXQiLCJmIiwiTSIsIl8iLCJ0aGlzIiwiVHlwZUVycm9yIiwibGVhZGluZyIsIm1heFdhaXQiLCJ0cmFpbGluZyIsImNhbmNlbCIsImNsZWFyVGltZW91dCIsImZsdXNoIiwidmFsdWVPZiIsInJlcGxhY2UiLCJsIiwidGVzdCIsInNsaWNlIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsIk5hTiIsInBhcnNlSW50Iiwic2VsZiIsIkZ1bmN0aW9uIiwidG9TdHJpbmciLCJNYXRoIiwibWF4IiwibWluIiwiRGF0ZSIsIm5vdyIsImRhdGFzZXQiLCJhb3MiLCJjaGlsZHJlbiIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiTW96TXV0YXRpb25PYnNlcnZlciIsIkFycmF5IiwiYWRkZWROb2RlcyIsInJlbW92ZWROb2RlcyIsImNvbmNhdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJvYnNlcnZlIiwiZG9jdW1lbnRFbGVtZW50IiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInZlbmRvciIsIm9wZXJhIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwia2V5Iiwic3Vic3RyIiwicGFnZVlPZmZzZXQiLCJpbm5lckhlaWdodCIsImdldEF0dHJpYnV0ZSIsInBvc2l0aW9uIiwiY2xhc3NMaXN0IiwiYWRkIiwicmVtb3ZlIiwiYW5jaG9yIiwiYW5jaG9yUGxhY2VtZW50IiwiaXNOYU4iLCJxdWVyeVNlbGVjdG9yQWxsIiwidG9wIiwib2Zmc2V0SGVpZ2h0Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsInRhZ05hbWUiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwib2Zmc2V0UGFyZW50IiwibGVmdCIsIm1hcCIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJqb2luIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJfaSIsIl9pMiIsInVybCIsIm9wdGlvbnMiLCJTdHJpbmciLCJoYXNoIiwibmVlZFF1b3RlcyIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJnbG9iYWwiLCJmYWN0b3J5IiwiRXJyb3IiLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJmbGF0IiwiYXJyYXkiLCJjbGFzczJ0eXBlIiwiaGFzT3duIiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJvYmoiLCJub2RlVHlwZSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInR5cGUiLCJzcmMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJkb2MiLCJ2YWwiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRvVHlwZSIsInZlcnNpb24iLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImlzQXJyYXlMaWtlIiwianF1ZXJ5IiwidG9BcnJheSIsImdldCIsIm51bSIsInB1c2hTdGFjayIsImVsZW1zIiwicmV0IiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsImNhbGxiYWNrIiwiZWxlbSIsImZpcnN0IiwiZXEiLCJsYXN0IiwiZXZlbiIsImdyZXAiLCJfZWxlbSIsIm9kZCIsImxlbiIsImVuZCIsInNvcnQiLCJzcGxpY2UiLCJleHRlbmQiLCJuYW1lIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsImlzQXJyYXkiLCJleHBhbmRvIiwicmFuZG9tIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwibm9vcCIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJndWlkIiwic3BsaXQiLCJ0b0xvd2VyQ2FzZSIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiZG9uZSIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwibm9ubmF0aXZlU2VsZWN0b3JDYWNoZSIsInNvcnRPcmRlciIsInBvcCIsInB1c2hOYXRpdmUiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJ0cmltIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZSIsIm5vbkhleCIsImhpZ2giLCJmcm9tQ2hhckNvZGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImluRGlzYWJsZWRGaWVsZHNldCIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsIm5vZGVOYW1lIiwiZGlyIiwibmV4dCIsImNoaWxkTm9kZXMiLCJlbHMiLCJzZWVkIiwibmlkIiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdENvbnRleHQiLCJzY29wZSIsInRvU2VsZWN0b3IiLCJxc2FFcnJvciIsImtleXMiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJlbCIsImFkZEhhbmRsZSIsImF0dHJzIiwiaGFuZGxlciIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJjdXIiLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZUlucHV0UHNldWRvIiwiY3JlYXRlQnV0dG9uUHNldWRvIiwiY3JlYXRlRGlzYWJsZWRQc2V1ZG8iLCJpc0Rpc2FibGVkIiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwibmFtZXNwYWNlIiwibmFtZXNwYWNlVVJJIiwiaGFzQ29tcGFyZSIsInN1YldpbmRvdyIsImRlZmF1bHRWaWV3IiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbnB1dCIsImlubmVySFRNTCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJfYXJndW1lbnQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwiX2NvbnRleHQiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwibGFuZyIsImVsZW1MYW5nIiwibG9jYXRpb24iLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiX21hdGNoSW5kZXhlcyIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiX25hbWUiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJybmVlZHNDb250ZXh0IiwibmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsIm5vdCIsInJvb3RqUXVlcnkiLCJyb290IiwicGFyc2VIVE1MIiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNvbnRlbnRzIiwicHJldiIsInNpYmxpbmciLCJoYXMiLCJ0YXJnZXRzIiwiY2xvc2VzdCIsImluZGV4IiwicHJldkFsbCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJUaHJvd2VyIiwiZXgiLCJhZG9wdFZhbHVlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJtZXRob2QiLCJwcm9taXNlIiwiZmFpbCIsInRoZW4iLCJDYWxsYmFja3MiLCJvYmplY3QiLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJzdG9wT25GYWxzZSIsImVtcHR5IiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJkZWZlcnJlZCIsInBpcGUiLCJmbnMiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsImRlcHRoIiwic3BlY2lhbCIsInRoYXQiLCJtaWdodFRocm93Iiwibm90aWZ5V2l0aCIsInJlc29sdmVXaXRoIiwicHJvY2VzcyIsImV4Y2VwdGlvbkhvb2siLCJzdGFja1RyYWNlIiwicmVqZWN0V2l0aCIsImdldFN0YWNrSG9vayIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsInByaW1hcnkiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2F0Y2giLCJyZWFkeVdhaXQiLCJ3YWl0IiwiZG9TY3JvbGwiLCJhY2Nlc3MiLCJjaGFpbmFibGUiLCJlbXB0eUdldCIsInJhdyIsImJ1bGsiLCJfa2V5Iiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJfYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwic2V0IiwicHJvcCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwicGFyc2UiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN0eWxlIiwiZGlzcGxheSIsImNzcyIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsImVyciIsInNhZmVBY3RpdmVFbGVtZW50Iiwib24iLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImV2ZW50Iiwib2ZmIiwibGV2ZXJhZ2VOYXRpdmUiLCJub3RBc3luYyIsInNhdmVkIiwiaXNUcmlnZ2VyIiwiZGVsZWdhdGVUeXBlIiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJ0cmlnZ2VyIiwiRXZlbnQiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImNyZWF0ZSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYnV0dG9uIiwiYWRkUHJvcCIsImhvb2siLCJvcmlnaW5hbEV2ZW50IiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImZvY3VzIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwidWRhdGFPbGQiLCJ1ZGF0YUN1ciIsImZpeElucHV0IiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJzd2FwIiwib2xkIiwicmJveFN0eWxlIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJ3aWR0aCIsIm1pbldpZHRoIiwibWF4V2lkdGgiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicGl4ZWxCb3hTdHlsZXMiLCJhZGRHZXRIb29rSWYiLCJjb25kaXRpb25GbiIsImhvb2tGbiIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsInBpeGVsQm94U3R5bGVzVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJwYXJzZUZsb2F0IiwicmVsaWFibGVUckRpbWVuc2lvbnNWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJyZWxpYWJsZVRyRGltZW5zaW9ucyIsInRhYmxlIiwidHJDaGlsZCIsInRyU3R5bGUiLCJoZWlnaHQiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcHMiLCJmaW5hbFByb3BOYW1lIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiZGltZW5zaW9uIiwiYm94IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiZGVsdGEiLCJjZWlsIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRQcm9wIiwiZ2V0Q2xpZW50UmVjdHMiLCJUd2VlbiIsImNzc0hvb2tzIiwib3BhY2l0eSIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbGJveFNpemVCdWdneSIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwicG9zIiwic3RlcCIsImZ4IiwibGluZWFyIiwic3dpbmciLCJjb3MiLCJQSSIsImZ4Tm93IiwiaW5Qcm9ncmVzcyIsInJmeHR5cGVzIiwicnJ1biIsInNjaGVkdWxlIiwiaGlkZGVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJnZW5GeCIsImluY2x1ZGVXaWR0aCIsImNyZWF0ZVR3ZWVuIiwiYW5pbWF0aW9uIiwiQW5pbWF0aW9uIiwidHdlZW5lcnMiLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9wdHMiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwiZ290b0VuZCIsInByb3BGaWx0ZXIiLCJiaW5kIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwidGltZSIsInRpbWVvdXQiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJib29sIiwiYXR0ck5hbWVzIiwiZ2V0dGVyIiwibG93ZXJjYXNlTmFtZSIsInJmb2N1c2FibGUiLCJyY2xpY2thYmxlIiwic3RyaXBBbmRDb2xsYXBzZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwiYWRkQ2xhc3MiLCJjbGFzc2VzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJjbGFzc05hbWVzIiwiaGFzQ2xhc3MiLCJycmV0dXJuIiwidmFsSG9va3MiLCJvcHRpb25TZXQiLCJmb2N1c2luIiwicmZvY3VzTW9ycGgiLCJzdG9wUHJvcGFnYXRpb25DYWxsYmFjayIsIm9ubHlIYW5kbGVycyIsImJ1YmJsZVR5cGUiLCJvbnR5cGUiLCJsYXN0RWxlbWVudCIsImV2ZW50UGF0aCIsInBhcmVudFdpbmRvdyIsInNpbXVsYXRlIiwidHJpZ2dlckhhbmRsZXIiLCJhdHRhY2hlcyIsInJxdWVyeSIsInBhcnNlWE1MIiwicGFyc2VyRXJyb3JFbGVtIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInZhbHVlT3JGdW5jdGlvbiIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwicmVzcG9uc2VGaWVsZHMiLCJjb252ZXJ0ZXJzIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib3ZlcnJpZGVNaW1lVHlwZSIsIm1pbWVUeXBlIiwic3RhdHVzIiwiYWJvcnQiLCJzdGF0dXNUZXh0IiwiZmluYWxUZXh0IiwiY3Jvc3NEb21haW4iLCJob3N0IiwiaGFzQ29udGVudCIsImlmTW9kaWZpZWQiLCJoZWFkZXJzIiwiYmVmb3JlU2VuZCIsInN1Y2Nlc3MiLCJzZW5kIiwibmF0aXZlU3RhdHVzVGV4dCIsInJlc3BvbnNlcyIsImlzU3VjY2VzcyIsInJlc3BvbnNlIiwibW9kaWZpZWQiLCJjdCIsImZpbmFsRGF0YVR5cGUiLCJmaXJzdERhdGFUeXBlIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsImNvbnYyIiwiY3VycmVudCIsImNvbnYiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWpheENvbnZlcnQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ4aHJTdWNjZXNzU3RhdHVzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInNjcmlwdEF0dHJzIiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWE9mZnNldCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJ0cmltIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaW5kZXhCeUlkZW50aWZpZXIiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4IiwibWVtbyIsInN0eWxlVGFyZ2V0IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJnZXRUYXJnZXQiLCJlbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImxvY2FscyIsImxpc3RUb1N0eWxlcyIsInBhcmVudElkIiwibmV3U3R5bGVzIiwicGFydCIsImhhc0RvY3VtZW50IiwiREVCVUciLCJzdHlsZXNJbkRvbSIsInNpbmdsZXRvbkVsZW1lbnQiLCJzaW5nbGV0b25Db3VudGVyIiwiaXNQcm9kdWN0aW9uIiwic3NySWRLZXkiLCJpc09sZElFIiwiYWRkU3R5bGVzQ2xpZW50IiwiX2lzUHJvZHVjdGlvbiIsIl9vcHRpb25zIiwiYWRkU3R5bGVzVG9Eb20iLCJtYXlSZW1vdmUiLCJkb21TdHlsZSIsInJlZnMiLCJhZGRTdHlsZSIsImNyZWF0ZVN0eWxlRWxlbWVudCIsInN0eWxlSW5kZXgiLCJhcHBseVRvU2luZ2xldG9uVGFnIiwiYXBwbHlUb1RhZyIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJCb29sZWFuIiwiY3NzTm9kZSIsInNzcklkIiwid2VicGFja0NvbnRleHQiLCJyZXEiLCJ3ZWJwYWNrQ29udGV4dFJlc29sdmUiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsImdsb2JhbFRoaXMiLCJ0b1N0cmluZ1RhZyIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJjdXJyZW50U2NyaXB0IiwiYmFzZVVSSSIsImVtcHR5T2JqZWN0IiwiZnJlZXplIiwiaXNVbmRlZiIsImlzRGVmIiwiaXNUcnVlIiwiaXNQcmltaXRpdmUiLCJpc09iamVjdCIsIl90b1N0cmluZyIsImlzVmFsaWRBcnJheUluZGV4IiwiZmxvb3IiLCJpc1Byb21pc2UiLCJ0b051bWJlciIsIm1ha2VNYXAiLCJzdHIiLCJleHBlY3RzTG93ZXJDYXNlIiwiaXNSZXNlcnZlZEF0dHJpYnV0ZSIsImNhbWVsaXplUkUiLCJjYW1lbGl6ZSIsImNhcGl0YWxpemUiLCJjaGFyQXQiLCJoeXBoZW5hdGVSRSIsImh5cGhlbmF0ZSIsImN0eCIsImJvdW5kRm4iLCJfbGVuZ3RoIiwiX2Zyb20iLCJ0b09iamVjdCIsInJlcyIsIm5vIiwiaWRlbnRpdHkiLCJsb29zZUVxdWFsIiwiaXNPYmplY3RBIiwiaXNPYmplY3RCIiwiaXNBcnJheUEiLCJpc0FycmF5QiIsImV2ZXJ5IiwiZ2V0VGltZSIsImtleXNBIiwia2V5c0IiLCJsb29zZUluZGV4T2YiLCJjYWxsZWQiLCJTU1JfQVRUUiIsIkFTU0VUX1RZUEVTIiwiTElGRUNZQ0xFX0hPT0tTIiwiY29uZmlnIiwib3B0aW9uTWVyZ2VTdHJhdGVnaWVzIiwic2lsZW50IiwicHJvZHVjdGlvblRpcCIsImRldnRvb2xzIiwicGVyZm9ybWFuY2UiLCJlcnJvckhhbmRsZXIiLCJ3YXJuSGFuZGxlciIsImlnbm9yZWRFbGVtZW50cyIsImtleUNvZGVzIiwiaXNSZXNlcnZlZFRhZyIsImlzUmVzZXJ2ZWRBdHRyIiwiaXNVbmtub3duRWxlbWVudCIsImdldFRhZ05hbWVzcGFjZSIsInBhcnNlUGxhdGZvcm1UYWdOYW1lIiwibXVzdFVzZVByb3AiLCJfbGlmZWN5Y2xlSG9va3MiLCJkZWYiLCJfaXNTZXJ2ZXIiLCJiYWlsUkUiLCJoYXNQcm90byIsImluQnJvd3NlciIsImluV2VleCIsIldYRW52aXJvbm1lbnQiLCJwbGF0Zm9ybSIsIndlZXhQbGF0Zm9ybSIsIlVBIiwiaXNJRSIsImlzSUU5IiwiaXNFZGdlIiwiaXNJT1MiLCJpc0ZGIiwibmF0aXZlV2F0Y2giLCJ3YXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsImlzU2VydmVyUmVuZGVyaW5nIiwiZW52IiwiVlVFX0VOViIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc05hdGl2ZSIsIl9TZXQiLCJoYXNTeW1ib2wiLCJSZWZsZWN0Iiwib3duS2V5cyIsIlNldCIsImNsZWFyIiwiRGVwIiwic3VicyIsImFkZFN1YiIsInN1YiIsInJlbW92ZVN1YiIsImRlcGVuZCIsImFkZERlcCIsInRhcmdldFN0YWNrIiwicHVzaFRhcmdldCIsInBvcFRhcmdldCIsIlZOb2RlIiwiZWxtIiwiY29tcG9uZW50T3B0aW9ucyIsImFzeW5jRmFjdG9yeSIsIm5zIiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiY29tcG9uZW50SW5zdGFuY2UiLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiY2hpbGQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY3JlYXRlRW1wdHlWTm9kZSIsImNyZWF0ZVRleHRWTm9kZSIsImNsb25lVk5vZGUiLCJ2bm9kZSIsImNsb25lZCIsImFycmF5UHJvdG8iLCJhcnJheU1ldGhvZHMiLCJpbnNlcnRlZCIsIm9iIiwiX19vYl9fIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNob3VsZE9ic2VydmUiLCJ0b2dnbGVPYnNlcnZpbmciLCJPYnNlcnZlciIsInZtQ291bnQiLCJfX3Byb3RvX18iLCJwcm90b0F1Z21lbnQiLCJjb3B5QXVnbWVudCIsIndhbGsiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiX2lzVnVlIiwiZGVmaW5lUmVhY3RpdmUkJDEiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93IiwicHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjaGlsZE9iIiwiZGVwZW5kQXJyYXkiLCJuZXdWYWwiLCJkZWwiLCJpdGVtcyIsInN0cmF0cyIsIm1lcmdlRGF0YSIsImZyb20iLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZURhdGFPckZuIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJ2bSIsImluc3RhbmNlRGF0YSIsImRlZmF1bHREYXRhIiwibWVyZ2VIb29rIiwiZGVkdXBlSG9va3MiLCJtZXJnZUFzc2V0cyIsImtleSQxIiwibWV0aG9kcyIsImluamVjdCIsInByb3ZpZGUiLCJkZWZhdWx0U3RyYXQiLCJtZXJnZU9wdGlvbnMiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVJbmplY3QiLCJkaXJzIiwiZGlyZWN0aXZlcyIsImRlZiQkMSIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMiLCJfYmFzZSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJwcm9wc0RhdGEiLCJhYnNlbnQiLCJib29sZWFuSW5kZXgiLCJnZXRUeXBlSW5kZXgiLCJzdHJpbmdJbmRleCIsIiRvcHRpb25zIiwiX3Byb3BzIiwiZ2V0VHlwZSIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkT2JzZXJ2ZSIsImZ1bmN0aW9uVHlwZUNoZWNrUkUiLCJpc1NhbWVUeXBlIiwiZXhwZWN0ZWRUeXBlcyIsImhhbmRsZUVycm9yIiwiJHBhcmVudCIsImVycm9yQ2FwdHVyZWQiLCJnbG9iYWxIYW5kbGVFcnJvciIsImludm9rZVdpdGhFcnJvckhhbmRsaW5nIiwiX2hhbmRsZWQiLCJsb2dFcnJvciIsInRpbWVyRnVuYyIsImlzVXNpbmdNaWNyb1Rhc2siLCJjYWxsYmFja3MiLCJwZW5kaW5nIiwiZmx1c2hDYWxsYmFja3MiLCJjb3BpZXMiLCJQcm9taXNlIiwic2V0SW1tZWRpYXRlIiwiY291bnRlciIsIm9ic2VydmVyIiwidGV4dE5vZGUiLCJjaGFyYWN0ZXJEYXRhIiwibmV4dFRpY2siLCJjYiIsIl9yZXNvbHZlIiwic2Vlbk9iamVjdHMiLCJ0cmF2ZXJzZSIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJpc0Zyb3plbiIsImRlcElkIiwibm9ybWFsaXplRXZlbnQiLCJwYXNzaXZlIiwib25jZSQkMSIsImNhcHR1cmUiLCJjcmVhdGVGbkludm9rZXIiLCJpbnZva2VyIiwiYXJndW1lbnRzJDEiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbGRPbiIsInJlbW92ZSQkMSIsImNyZWF0ZU9uY2VIYW5kbGVyIiwibWVyZ2VWTm9kZUhvb2siLCJob29rS2V5Iiwib2xkSG9vayIsIndyYXBwZWRIb29rIiwibWVyZ2VkIiwiY2hlY2tQcm9wIiwicHJlc2VydmUiLCJub3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4iLCJpc1RleHROb2RlIiwibmVzdGVkSW5kZXgiLCJsYXN0SW5kZXgiLCJfaXNWTGlzdCIsInJlc29sdmVJbmplY3QiLCJwcm92aWRlS2V5IiwiX3Byb3ZpZGVkIiwicHJvdmlkZURlZmF1bHQiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIiRzdGFibGUiLCIka2V5IiwiX25vcm1hbGl6ZWQiLCIkaGFzTm9ybWFsIiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleSQyIiwicHJveHlOb3JtYWxTbG90IiwicmVuZGVyTGlzdCIsInJlbmRlciIsInJlbmRlclNsb3QiLCJmYWxsYmFja1JlbmRlciIsImJpbmRPYmplY3QiLCJzY29wZWRTbG90Rm4iLCIkc2NvcGVkU2xvdHMiLCIkc2xvdHMiLCIkY3JlYXRlRWxlbWVudCIsInJlc29sdmVGaWx0ZXIiLCJpc0tleU5vdE1hdGNoIiwiZXhwZWN0IiwiYWN0dWFsIiwiY2hlY2tLZXlDb2RlcyIsImV2ZW50S2V5Q29kZSIsImJ1aWx0SW5LZXlDb2RlIiwiZXZlbnRLZXlOYW1lIiwiYnVpbHRJbktleU5hbWUiLCJtYXBwZWRLZXlDb2RlIiwiYmluZE9iamVjdFByb3BzIiwiYXNQcm9wIiwiaXNTeW5jIiwibG9vcCIsImRvbVByb3BzIiwiY2FtZWxpemVkS2V5IiwiaHlwaGVuYXRlZEtleSIsIiRldmVudCIsInJlbmRlclN0YXRpYyIsImlzSW5Gb3IiLCJfc3RhdGljVHJlZXMiLCJ0cmVlIiwibWFya1N0YXRpYyIsInN0YXRpY1JlbmRlckZucyIsIl9yZW5kZXJQcm94eSIsIm1hcmtPbmNlIiwibWFya1N0YXRpY05vZGUiLCJiaW5kT2JqZWN0TGlzdGVuZXJzIiwiZXhpc3RpbmciLCJvdXJzIiwicmVzb2x2ZVNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY0tleXMiLCJjb250ZW50SGFzaEtleSIsImJpbmREeW5hbWljS2V5cyIsImJhc2VPYmoiLCJwcmVwZW5kTW9kaWZpZXIiLCJzeW1ib2wiLCJpbnN0YWxsUmVuZGVySGVscGVycyIsIl9vIiwiX24iLCJfcyIsIl9sIiwiX3QiLCJfcSIsIl9tIiwiX2YiLCJfayIsIl9iIiwiX3YiLCJfZSIsIl91IiwiX2ciLCJfZCIsIl9wIiwiRnVuY3Rpb25hbFJlbmRlckNvbnRleHQiLCJjb250ZXh0Vm0iLCJ0aGlzJDEiLCJfb3JpZ2luYWwiLCJpc0NvbXBpbGVkIiwiX2NvbXBpbGVkIiwibmVlZE5vcm1hbGl6YXRpb24iLCJsaXN0ZW5lcnMiLCJpbmplY3Rpb25zIiwic2NvcGVkU2xvdHMiLCJfc2NvcGVJZCIsIl9jIiwiY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCIsInJlbmRlckNvbnRleHQiLCJtZXJnZVByb3BzIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImh5ZHJhdGluZyIsIl9pc0Rlc3Ryb3llZCIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwicHJlcGF0Y2giLCJfaXNDb21wb25lbnQiLCJfcGFyZW50Vm5vZGUiLCJpbmxpbmVUZW1wbGF0ZSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCJhY3RpdmVJbnN0YW5jZSIsIiRtb3VudCIsIm9sZFZub2RlIiwicGFyZW50Vm5vZGUiLCJyZW5kZXJDaGlsZHJlbiIsIm5ld1Njb3BlZFNsb3RzIiwib2xkU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljU2NvcGVkU2xvdCIsIm5lZWRzRm9yY2VVcGRhdGUiLCJfcmVuZGVyQ2hpbGRyZW4iLCIkdm5vZGUiLCJfdm5vZGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJfcHJvcEtleXMiLCJvbGRMaXN0ZW5lcnMiLCJfcGFyZW50TGlzdGVuZXJzIiwidXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIiwiJGZvcmNlVXBkYXRlIiwidXBkYXRlQ2hpbGRDb21wb25lbnQiLCJfaXNNb3VudGVkIiwiY2FsbEhvb2siLCJfaW5hY3RpdmUiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsImFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCJkZXN0cm95IiwiZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiJGRlc3Ryb3kiLCJob29rc1RvTWVyZ2UiLCJjcmVhdGVDb21wb25lbnQiLCJiYXNlQ3RvciIsImNpZCIsImVycm9yQ29tcCIsInJlc29sdmVkIiwiY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwib3duZXJzIiwibG9hZGluZyIsImxvYWRpbmdDb21wIiwic3luYyIsInRpbWVyTG9hZGluZyIsInRpbWVyVGltZW91dCIsIiRvbiIsImZvcmNlUmVuZGVyIiwicmVuZGVyQ29tcGxldGVkIiwiZW5zdXJlQ3RvciIsInJlYXNvbiIsImNvbXBvbmVudCIsInJlc29sdmVBc3luY0NvbXBvbmVudCIsImNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIiLCJyZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIiwibW9kZWwiLCJ0cmFuc2Zvcm1Nb2RlbCIsImV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEiLCJmdW5jdGlvbmFsIiwidm5vZGVzIiwiY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudCIsIm5hdGl2ZU9uIiwiYWJzdHJhY3QiLCJ0b01lcmdlIiwiX21lcmdlZCIsIm1lcmdlSG9vayQxIiwiaW5zdGFsbENvbXBvbmVudEhvb2tzIiwiZjEiLCJmMiIsIm5vcm1hbGl6YXRpb25UeXBlIiwiYWx3YXlzTm9ybWFsaXplIiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCJwcmUiLCJhcHBseU5TIiwiY2xhc3MiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsIl9jcmVhdGVFbGVtZW50IiwiZm9yY2UiLCJjb21wIiwiZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCIsInJlbW92ZSQxIiwiJG9mZiIsIl90YXJnZXQiLCJvbmNlSGFuZGxlciIsInNldEFjdGl2ZUluc3RhbmNlIiwicHJldkFjdGl2ZUluc3RhbmNlIiwiaXNJbkluYWN0aXZlVHJlZSIsImRpcmVjdCIsIl9kaXJlY3RJbmFjdGl2ZSIsIiRjaGlsZHJlbiIsIl9oYXNIb29rRXZlbnQiLCIkZW1pdCIsIndhaXRpbmciLCJmbHVzaGluZyIsImN1cnJlbnRGbHVzaFRpbWVzdGFtcCIsImdldE5vdyIsImNyZWF0ZUV2ZW50IiwiZmx1c2hTY2hlZHVsZXJRdWV1ZSIsIndhdGNoZXIiLCJhY3RpdmF0ZWRRdWV1ZSIsInVwZGF0ZWRRdWV1ZSIsImNhbGxBY3RpdmF0ZWRIb29rcyIsIl93YXRjaGVyIiwiY2FsbFVwZGF0ZWRIb29rcyIsImVtaXQiLCJ1aWQkMiIsIldhdGNoZXIiLCJleHBPckZuIiwiaXNSZW5kZXJXYXRjaGVyIiwiX3dhdGNoZXJzIiwidXNlciIsImxhenkiLCJkaXJ0eSIsImRlcHMiLCJuZXdEZXBzIiwiZGVwSWRzIiwibmV3RGVwSWRzIiwiZXhwcmVzc2lvbiIsInBhdGgiLCJzZWdtZW50cyIsInBhcnNlUGF0aCIsImNsZWFudXBEZXBzIiwicXVldWVXYXRjaGVyIiwib2xkVmFsdWUiLCJldmFsdWF0ZSIsIl9pc0JlaW5nRGVzdHJveWVkIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwic291cmNlS2V5IiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsImRlZmluZUNvbXB1dGVkIiwidXNlckRlZiIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCJjcmVhdGVHZXR0ZXJJbnZva2VyIiwiX2NvbXB1dGVkV2F0Y2hlcnMiLCJjcmVhdGVXYXRjaGVyIiwiJHdhdGNoIiwidWlkJDMiLCJzdXBlciIsInN1cGVyT3B0aW9ucyIsIm1vZGlmaWVkT3B0aW9ucyIsImxhdGVzdCIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJyZXNvbHZlTW9kaWZpZWRPcHRpb25zIiwiZXh0ZW5kT3B0aW9ucyIsImNvbXBvbmVudHMiLCJWdWUiLCJfaW5pdCIsImdldENvbXBvbmVudE5hbWUiLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJlbnRyeSIsInBydW5lQ2FjaGVFbnRyeSIsIl91aWQiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJfY29tcG9uZW50VGFnIiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiX3NlbGYiLCIkcm9vdCIsIiRyZWZzIiwiaW5pdExpZmVjeWNsZSIsIl9ldmVudHMiLCJpbml0RXZlbnRzIiwicGFyZW50RGF0YSIsImluaXRSZW5kZXIiLCJpbml0SW5qZWN0aW9ucyIsInByb3BzT3B0aW9ucyIsImluaXRQcm9wcyIsImluaXRNZXRob2RzIiwiaW5pdERhdGEiLCJ3YXRjaGVycyIsImlzU1NSIiwiaW5pdENvbXB1dGVkIiwiaW5pdFdhdGNoIiwiaW5pdFN0YXRlIiwiaW5pdFByb3ZpZGUiLCJpbml0TWl4aW4iLCJkYXRhRGVmIiwicHJvcHNEZWYiLCIkc2V0IiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInN0YXRlTWl4aW4iLCJob29rUkUiLCIkb25jZSIsImkkMSIsImNicyIsImV2ZW50c01peGluIiwiX3VwZGF0ZSIsInByZXZFbCIsIiRlbCIsInByZXZWbm9kZSIsInJlc3RvcmVBY3RpdmVJbnN0YW5jZSIsIl9fcGF0Y2hfXyIsIl9fdnVlX18iLCJsaWZlY3ljbGVNaXhpbiIsIiRuZXh0VGljayIsIl9yZW5kZXIiLCJyZWYiLCJyZW5kZXJNaXhpbiIsInBhdHRlcm5UeXBlcyIsIktlZXBBbGl2ZSIsImluY2x1ZGUiLCJleGNsdWRlIiwiTnVtYmVyIiwiY2FjaGVWTm9kZSIsInZub2RlVG9DYWNoZSIsImtleVRvQ2FjaGUiLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwibW91bnRlZCIsInVwZGF0ZWQiLCJidWlsdEluQ29tcG9uZW50cyIsImNvbmZpZ0RlZiIsInV0aWwiLCJkZWZpbmVSZWFjdGl2ZSIsImRlbGV0ZSIsIm9ic2VydmFibGUiLCJ1c2UiLCJwbHVnaW4iLCJpbnN0YWxsZWRQbHVnaW5zIiwiX2luc3RhbGxlZFBsdWdpbnMiLCJpbnN0YWxsIiwiaW5pdFVzZSIsIm1peGluIiwiaW5pdE1peGluJDEiLCJTdXBlciIsIlN1cGVySWQiLCJjYWNoZWRDdG9ycyIsIl9DdG9yIiwiU3ViIiwiQ29tcCIsImluaXRQcm9wcyQxIiwiaW5pdENvbXB1dGVkJDEiLCJpbml0RXh0ZW5kIiwiaW5pdEFzc2V0UmVnaXN0ZXJzIiwiaW5pdEdsb2JhbEFQSSIsInNzckNvbnRleHQiLCJhY2NlcHRWYWx1ZSIsImlzRW51bWVyYXRlZEF0dHIiLCJpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUiLCJpc0Jvb2xlYW5BdHRyIiwieGxpbmtOUyIsImlzWGxpbmsiLCJnZXRYbGlua1Byb3AiLCJpc0ZhbHN5QXR0clZhbHVlIiwibWVyZ2VDbGFzc0RhdGEiLCJzdGF0aWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwic3RyaW5naWZpZWQiLCJzdHJpbmdpZnlBcnJheSIsInN0cmluZ2lmeU9iamVjdCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJpc1RleHRJbnB1dFR5cGUiLCJub2RlT3BzIiwibXVsdGlwbGUiLCJjcmVhdGVFbGVtZW50TlMiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsInNldFRleHRDb250ZW50Iiwic2V0U3R5bGVTY29wZSIsInNjb3BlSWQiLCJyZWdpc3RlclJlZiIsImlzUmVtb3ZhbCIsInJlZkluRm9yIiwiZW1wdHlOb2RlIiwic2FtZVZub2RlIiwidHlwZUEiLCJ0eXBlQiIsInNhbWVJbnB1dFR5cGUiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwidXBkYXRlRGlyZWN0aXZlcyIsIm9sZERpciIsImlzQ3JlYXRlIiwiaXNEZXN0cm95Iiwib2xkRGlycyIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMkMSIsIm5ld0RpcnMiLCJkaXJzV2l0aEluc2VydCIsImRpcnNXaXRoUG9zdHBhdGNoIiwib2xkQXJnIiwiY2FsbEhvb2skMSIsImNvbXBvbmVudFVwZGF0ZWQiLCJjYWxsSW5zZXJ0IiwiZW1wdHlNb2RpZmllcnMiLCJtb2RpZmllcnMiLCJnZXRSYXdEaXJOYW1lIiwicmF3TmFtZSIsImJhc2VNb2R1bGVzIiwidXBkYXRlQXR0cnMiLCJpbmhlcml0QXR0cnMiLCJvbGRBdHRycyIsInNldEF0dHIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsImlzSW5QcmUiLCJiYXNlU2V0QXR0ciIsImNvbnZlcnRFbnVtZXJhdGVkVmFsdWUiLCJzZXRBdHRyaWJ1dGVOUyIsIl9faWVwaCIsImJsb2NrZXIiLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJjaGlsZE5vZGUiLCJkeW5hbWljQ2xhc3MiLCJnZW5DbGFzc0ZvclZub2RlIiwidHJhbnNpdGlvbkNsYXNzIiwiX3RyYW5zaXRpb25DbGFzc2VzIiwiX3ByZXZDbGFzcyIsInRhcmdldCQxIiwia2xhc3MiLCJjcmVhdGVPbmNlSGFuZGxlciQxIiwicmVtb3ZlJDIiLCJ1c2VNaWNyb3Rhc2tGaXgiLCJhZGQkMSIsImF0dGFjaGVkVGltZXN0YW1wIiwiX3dyYXBwZXIiLCJ1cGRhdGVET01MaXN0ZW5lcnMiLCJjaGFuZ2UiLCJub3JtYWxpemVFdmVudHMiLCJzdmdDb250YWluZXIiLCJ1cGRhdGVET01Qcm9wcyIsIm9sZFByb3BzIiwiX3ZhbHVlIiwic3RyQ3VyIiwic2hvdWxkVXBkYXRlVmFsdWUiLCJjaGVja1ZhbCIsImNvbXBvc2luZyIsIm5vdEluRm9jdXMiLCJpc05vdEluRm9jdXNBbmREaXJ0eSIsIl92TW9kaWZpZXJzIiwibnVtYmVyIiwiaXNEaXJ0eVdpdGhNb2RpZmllcnMiLCJwYXJzZVN0eWxlVGV4dCIsInByb3BlcnR5RGVsaW1pdGVyIiwibm9ybWFsaXplU3R5bGVEYXRhIiwibm9ybWFsaXplU3R5bGVCaW5kaW5nIiwic3RhdGljU3R5bGUiLCJiaW5kaW5nU3R5bGUiLCJjc3NWYXJSRSIsImltcG9ydGFudFJFIiwic2V0UHJvcCIsIm5vcm1hbGl6ZWROYW1lIiwibm9ybWFsaXplIiwidmVuZG9yTmFtZXMiLCJ1cGRhdGVTdHlsZSIsIm9sZFN0YXRpY1N0eWxlIiwib2xkU3R5bGVCaW5kaW5nIiwibm9ybWFsaXplZFN0eWxlIiwib2xkU3R5bGUiLCJuZXdTdHlsZSIsImNoZWNrQ2hpbGQiLCJzdHlsZURhdGEiLCJnZXRTdHlsZSIsIndoaXRlc3BhY2VSRSIsInRhciIsInJlc29sdmVUcmFuc2l0aW9uIiwiYXV0b0Nzc1RyYW5zaXRpb24iLCJlbnRlckNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImxlYXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwiaGFzVHJhbnNpdGlvbiIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJ0cmFuc2l0aW9uUHJvcCIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvblByb3AiLCJhbmltYXRpb25FbmRFdmVudCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJyYWYiLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ0cmFuc2l0aW9uQ2xhc3NlcyIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImV4cGVjdGVkVHlwZSIsImdldFRyYW5zaXRpb25JbmZvIiwicHJvcENvdW50IiwiZW5kZWQiLCJvbkVuZCIsInRyYW5zZm9ybVJFIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZHVyYXRpb25zIiwidG9NcyIsImVudGVyIiwidG9nZ2xlRGlzcGxheSIsIl9sZWF2ZUNiIiwiY2FuY2VsbGVkIiwidHJhbnNpdGlvbiIsIl9lbnRlckNiIiwiYXBwZWFyQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJiZWZvcmVFbnRlciIsImFmdGVyRW50ZXIiLCJlbnRlckNhbmNlbGxlZCIsImJlZm9yZUFwcGVhciIsImFwcGVhciIsImFmdGVyQXBwZWFyIiwiYXBwZWFyQ2FuY2VsbGVkIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJiZWZvcmVFbnRlckhvb2siLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImVudGVyQ2FuY2VsbGVkSG9vayIsImV4cGxpY2l0RW50ZXJEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInBlbmRpbmdOb2RlIiwiX3BlbmRpbmciLCJpc1ZhbGlkRHVyYXRpb24iLCJsZWF2ZSIsInJtIiwiYmVmb3JlTGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwicGVyZm9ybUxlYXZlIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBhdGNoIiwiYmFja2VuZCIsInJlbW92ZU5vZGUiLCJjcmVhdGVFbG0iLCJpbnNlcnRlZFZub2RlUXVldWUiLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJuZXN0ZWQiLCJvd25lckFycmF5IiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJpbm5lck5vZGUiLCJhY3RpdmF0ZSIsInJlYWN0aXZhdGVDb21wb25lbnQiLCJzZXRTY29wZSIsImNyZWF0ZUNoaWxkcmVuIiwiaW52b2tlQ3JlYXRlSG9va3MiLCJwZW5kaW5nSW5zZXJ0IiwiaXNQYXRjaGFibGUiLCJyZWYkJDEiLCJhbmNlc3RvciIsImFkZFZub2RlcyIsInN0YXJ0SWR4IiwiaW52b2tlRGVzdHJveUhvb2siLCJyZW1vdmVWbm9kZXMiLCJyZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rIiwiY2hpbGRFbG0iLCJjcmVhdGVSbUNiIiwiZmluZElkeEluT2xkIiwib2xkQ2giLCJwYXRjaFZub2RlIiwicmVtb3ZlT25seSIsImh5ZHJhdGUiLCJuZXdDaCIsIm9sZEtleVRvSWR4IiwiaWR4SW5PbGQiLCJ2bm9kZVRvTW92ZSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJjYW5Nb3ZlIiwidXBkYXRlQ2hpbGRyZW4iLCJwb3N0cGF0Y2giLCJpbnZva2VJbnNlcnRIb29rIiwiaXNSZW5kZXJlZE1vZHVsZSIsImluVlByZSIsImhhc0NoaWxkTm9kZXMiLCJjaGlsZHJlbk1hdGNoIiwiZnVsbEludm9rZSIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsIm9sZEVsbSIsInBhdGNoYWJsZSIsImkkMiIsImNyZWF0ZVBhdGNoRnVuY3Rpb24iLCJ2bW9kZWwiLCJkaXJlY3RpdmUiLCJiaW5kaW5nIiwiX3ZPcHRpb25zIiwic2V0U2VsZWN0ZWQiLCJnZXRWYWx1ZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJwcmV2T3B0aW9ucyIsImN1ck9wdGlvbnMiLCJzb21lIiwiaGFzTm9NYXRjaGluZ09wdGlvbiIsImFjdHVhbGx5U2V0U2VsZWN0ZWQiLCJpc011bHRpcGxlIiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImxvY2F0ZU5vZGUiLCJ0cmFuc2l0aW9uJCQxIiwib3JpZ2luYWxEaXNwbGF5IiwiX192T3JpZ2luYWxEaXNwbGF5IiwicGxhdGZvcm1EaXJlY3RpdmVzIiwidHJhbnNpdGlvblByb3BzIiwibW9kZSIsImdldFJlYWxDaGlsZCIsImNvbXBPcHRpb25zIiwiZXh0cmFjdFRyYW5zaXRpb25EYXRhIiwicGxhY2Vob2xkZXIiLCJyYXdDaGlsZCIsImlzTm90VGV4dE5vZGUiLCJpc1ZTaG93RGlyZWN0aXZlIiwiVHJhbnNpdGlvbiIsImhhc1BhcmVudFRyYW5zaXRpb24iLCJfbGVhdmluZyIsIm9sZFJhd0NoaWxkIiwib2xkQ2hpbGQiLCJpc1NhbWVDaGlsZCIsImRlbGF5ZWRMZWF2ZSIsIm1vdmVDbGFzcyIsImNhbGxQZW5kaW5nQ2JzIiwiX21vdmVDYiIsInJlY29yZFBvc2l0aW9uIiwibmV3UG9zIiwiYXBwbHlUcmFuc2xhdGlvbiIsIm9sZFBvcyIsImR4IiwiZHkiLCJtb3ZlZCIsInRyYW5zZm9ybSIsIldlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInBsYXRmb3JtQ29tcG9uZW50cyIsIlRyYW5zaXRpb25Hcm91cCIsImJlZm9yZU1vdW50Iiwia2VwdCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJyZW1vdmVkIiwiYyQxIiwiaGFzTW92ZSIsIl9yZWZsb3ciLCJwcm9wZXJ0eU5hbWUiLCJfaGFzTW92ZSIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwidXBkYXRlQ29tcG9uZW50IiwibW91bnRDb21wb25lbnQiLCJxdWVyeSIsIl92bSIsIl9oIiwiX3dpdGhTdHJpcHBlZCIsImhpZGVNZW51IiwiaXNNZW51IiwiY2xvc2VNZW51IiwibWVudV9jb2x1bW4iLCJhbmltYXRlZFNjcm9sbCIsIndpbmRvd19oZWlnaHQiLCJub3JtYWxpemVDb21wb25lbnQiLCJzY3JpcHRFeHBvcnRzIiwiZnVuY3Rpb25hbFRlbXBsYXRlIiwiaW5qZWN0U3R5bGVzIiwibW9kdWxlSWRlbnRpZmllciIsInNoYWRvd01vZGUiLCJfX1ZVRV9TU1JfQ09OVEVYVF9fIiwiX3JlZ2lzdGVyZWRDb21wb25lbnRzIiwiX3NzclJlZ2lzdGVyIiwic2hhZG93Um9vdCIsIl9pbmplY3RTdHlsZXMiLCJvcmlnaW5hbFJlbmRlciIsImJlZm9yZUNyZWF0ZSIsIl9fZmlsZSIsIk5hdk1lbnUiLCJRdWVzdGlvbnMiLCJxdWVzdGlvbiIsIlF1ZXN0aW9uIiwiYW5zd2VyIiwiQW5zd2VyIiwiYW5zd2VyU2hvd24iLCJGQVFxdWVzdGlvbiIsInRlYW1fbWVtYmVycyIsIm1lbWJlciIsImRlc2NyaXB0aW9uIiwiYWx0IiwiZGlyZWN0aW9uIiwibWVtYmVyX2ltYWdlIiwiVGVhbU1lbWJlciIsIkhlYWRlciIsIkFwcCJdLCJzb3VyY2VSb290IjoiIn0=